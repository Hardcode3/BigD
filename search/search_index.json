{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projectum Ipsum Documentatio","text":""},{"location":"#introductio","title":"Introductio","text":"<p>\"Auctoritas sine veritate nil est.\" \u2014 Antiquus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras posuere, sapien quis egestas tincidunt, dui libero tempus felis, ac faucibus est arcu a urna. Nulla facilisi. In vitae sapien blandit, facilisis erat in, fermentum quam.</p> <p>Nota Bene</p> <p>Hic textus fictus est et ad nullum usum practicam destinatur. Admonitiones sunt instrumentum utilissimum!</p>"},{"location":"#gradus-ad-installationem","title":"Gradus Ad Installationem","text":"<ol> <li>Lorem Ipsum - Consurgunt amicitiae si nec.</li> <li>Dolor Sit Amet - Lacerabant et eorum opibus utebantur.</li> <li>Consectetur Adipiscing - Sapien propter hostis invictus.</li> </ol>"},{"location":"#codex-exemplum","title":"Codex Exemplum","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero.</p> <pre><code># Exemplum Codicis\ndef salve_mundus():\n    print(\"Salve, Mundus!\")\n</code></pre>"},{"location":"#nota-codicis","title":"Nota Codicis","text":"<p>Inveniri inveniri inveniri ultro discursantes nec momento ultro celsius non si temporis parvi temporis citroque ultro celsius qui nobis amici inveniri rapacium amici quicquid vastabant dispexerint celeri umquam praedam discursantes impetraverint inmorantur.</p>"},{"location":"#tabulae-et-mores","title":"Tabulae et Mores","text":"Elementum Descriptio Status Projectum Ipsum Projectum Activa Documentatione Quicquid Confusum Codex Exemplum Codicis Probatum <ul> <li>Nota Bene: Tempore in ac tempor est, non nisi dico ut et milvorum venire.</li> <li>Quid aliud?: Nulla morantur hostes.</li> </ul>"},{"location":"#alius-titulus","title":"Alius Titulus","text":"<p>Vivamus accumsan ligula nec lacus volutpat, quis blandit metus lobortis. Suspendisse potenti.</p> <p>Cave!</p> <p>Hic textus exspectationes fallit. Ne fallaris ab illusione similium!</p> <p>Quicquid inveniri celeri, aut si nobis, aut optandi nobis aut temporis hostes nec celeri.</p>"},{"location":"#exemplum-longae-frivolitae","title":"Exemplum Longae Frivolitae","text":"<p>Inveniri inveniri inveniri ultro discursantes nec momento ultro celsius non si temporis parvi temporis citroque ultro celsius qui nobis amici inveniri rapacium amici quicquid vastabant dispexerint celeri umquam praedam discursantes impetraverint inmorantur discursantes nec aut optandi ultro optandi milvorum qui qui volatu nec impetraverint celeri similes milvorum hostes quicquid vastabant si similes aut celsius nec parvi rapacium ultro nobis quicquid poterat si nobis rapacium si dispexerint rapiunt quicquid quicquid milvorum momento si optandi nobis volatu discursantes vastabant umquam discursantes quicquid qui discursantes aut inveniri celeri momento similes optandi nobis nec non poterat rapacium hostes discursantes qui poterat vastabant umquam temporis.</p> <pre><code>{\n    \"key\": \"value\",\n    \"description\": \"fictus descriptio cum sine sensu\",\n    \"status\": \"omni momento\"\n}\n</code></pre>"},{"location":"#ultima-praeceptio","title":"Ultima Praeceptio","text":"<p>Quicquid in illo momento simul similes poterat exstinguere.</p>"},{"location":"computer_science/digit_representations/","title":"Digit representations","text":""},{"location":"computer_science/digit_representations/#overview","title":"Overview","text":"<p>Info</p> <p>Binary code is a system of representing information using only two digits, 0 and 1. Each digit in a binary code is called a \"bit,\" and a sequence of bits represents a piece of information. Binary is the fundamental language of computers, and it forms the basis for all digital systems. Here's how binary code works:</p> <p>[!Binary and Computers] Computers use binary code internally because electronic circuits can easily represent two states (on/off, high/low voltage), corresponding to the binary digits 0 and 1. These binary states are the foundation of digital computing.</p> <p>[!Binary and Data Storage] - Text: Characters are often represented in binary using character encoding schemes like ASCII or Unicode. Each character is assigned a unique binary code. - Numbers: Binary code is used to represent integer and floating-point numbers. Binary-coded decimals (BCD) and two's complement are common binary representations for numbers. - Images, Audio, and Video: These types of data are represented in binary as well. For example, pixels in an image may be represented using binary values to represent colors.</p> <p>[!Boolean Logic] Binary code is closely tied to Boolean logic, where the values 0 and 1 represent the logical states of false and true, respectively. In computer programming and digital circuit design, Boolean logic is used for decision-making and control flow.</p>"},{"location":"computer_science/digit_representations/#representations","title":"Representations","text":""},{"location":"computer_science/digit_representations/#binary","title":"Binary","text":"<p>[!Binary Representation (base 2)] In the binary system, numbers are represented using powers of 2. Each digit in a binary number represents a power of 2:</p> <ul> <li>Example: Binary representation of 101101:</li> </ul> <p>$1 \\times 2^5 + 0 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 = 53$</p> Power Base 2 0 1 1 2 2 4 3 8 4 16 5 32 6 64 7 128 8 256 9 512 10 1 024 11 2 048 12 4 096 13 8 192 14 16 384 15 32 768 16 65 536 17 131 072 18 262 144 19 524 288 20 1 048 576 21 2 097 151 22 4 194 304 23 8 388 608 24 16 777 216 25 33 554 432 26 67 108 864 27 134 217 728 28 268 435 456 29 5 36870 912 30 1 073 741 824 31 2 147 483 648 32 4 294 967 296 64 18 446 744 073 709 551 616"},{"location":"computer_science/digit_representations/#binary-digits-bits-octet","title":"Binary Digits (Bits / octet)","text":"<p>[!Binary Digits (Bits)]</p> <ul> <li>Bit: The smallest unit of data in binary code is a bit, which can be either 0 or 1. The term \"bit\" is a contraction of \"binary digit.\"</li> <li>Byte: A group of 8 bits is called a byte. Bytes are commonly used to represent characters in computer systems.</li> <li>4 bits (nibble) can be represented using Hexadecimal notation</li> </ul>"},{"location":"computer_science/digit_representations/#hexadecimal","title":"Hexadecimal","text":"<p>[!Hexadecimal Representation (base 16)] In addition to binary, hexadecimal is often used to represent binary values more compactly.  Each hexadecimal digit represents four bits (a nibble).  The code representation starts with <code>0x</code> followed by the hexadecimal value (ex: <code>0xFF</code> is the decimal number <code>0xF.0 + 0xF.16 = 15 + 15.16 = 255</code>)</p> <p>Hexadecimal (or hex) is a base-16 numeral system. It is commonly used as a more human-friendly representation of binary-coded values, especially in computing and programming. Here's how hexadecimal representation works:</p>"},{"location":"computer_science/digit_representations/#1-hexadecimal-digits","title":"1. Hexadecimal Digits:","text":"<p>Hexadecimal uses 16 symbols to represent values, comprising the regular decimal digits (0-9) and six additional symbols represented by letters A to F. The hexadecimal digits are:</p> <pre><code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\n</code></pre> <p>Each hexadecimal digit corresponds to a 4-bit binary nibble (half-byte), making it convenient for representing binary values.</p>"},{"location":"computer_science/digit_representations/#2-conversion-from-binary-to-hexadecimal","title":"2. Conversion from Binary to Hexadecimal:","text":"<p>To convert a binary number to hexadecimal, replace each group of four binary digits with the corresponding hexadecimal digit:</p> <p>Example: Binary to Hexadecimal</p> <pre><code>Binary: 110101101010\nGrouped: 1101 0110 1010\nHexadecimal: D6A\nComputer representation: 0xD6A\n</code></pre>"},{"location":"computer_science/digit_representations/#3-conversion-from-hexadecimal-to-binary","title":"3. Conversion from Hexadecimal to Binary:","text":"<p>To convert a hexadecimal number to binary: replace each hexadecimal digit with its 4-bit binary representation.</p> <p>Example: Hexadecimal to Binary</p> <pre><code>Hexadecimal: B3A\nBinary: 1011 0011 1010\n</code></pre>"},{"location":"computer_science/digit_representations/#4-conversion-from-decimal-to-hexadecimal","title":"4. Conversion from Decimal to Hexadecimal:","text":"<p>To convert a decimal number to hexadecimal:</p> <ul> <li>Divide the decimal number by 16.</li> <li>Write down the remainder as the least significant digit (rightmost).</li> <li>Divide the quotient by 16 and repeat the process until the quotient is zero.</li> <li>The hexadecimal representation is the sequence of remainders read from bottom to top.</li> </ul> <p>Example: Decimal to Hexadecimal</p> <pre><code>Decimal: 482\n482 \u00f7 16 = 30 remainder 2\n30 \u00f7 16 = 1 remainder 14 (E in hexadecimal)\n1 \u00f7 16 = 0 remainder 1\nHexadecimal: 1EE\n</code></pre> <p>Example: Hexadecimal to Decimal:</p> <pre><code>  0x12345678\n\n  8 * 16^0  (least significant digit)\n+ 7 * 16^1\n+ 6 * 16^2\n+ 5 * 16^3\n+ 4 * 16^4\n+ 3 * 16^5\n+ 2 * 16^6\n+ 1 * 16^7  (most significant digit)\n-----------------\n  Decimal Result\n</code></pre>"},{"location":"computer_science/digit_representations/#5-usage-in-programming","title":"5. Usage in Programming:","text":"<p>Info</p> <p>Hexadecimal is widely used in programming for several reasons: - It provides a concise representation of binary data. - Memory addresses and byte values are often represented in hexadecimal. - Hexadecimal is used in color representations (RGB values in web development, for example). Understanding hexadecimal is crucial for working with low-level programming, memory addresses, and binary data representation in computing. It provides a more concise and human-readable way to represent binary values, especially when dealing with large or complex bit patterns.</p>"},{"location":"computer_science/digit_representations/#endianness","title":"Endianness","text":"<p>Endianness refers to the order in which bytes are stored in computer memory.</p> <p>It determines how a multi-byte data type, such as a 16-bit or 32-bit integer, is represented in memory. There are two common types of endianness: big-endian and little-endian.</p> <p>The choice of endianness is important when data is transferred between systems with different endianness or when data is stored persistently and needs to be read on a different platform.</p> <p>Different computer architectures and processors may use different endianness, so it's crucial to be aware of and account for it in situations where binary data is exchanged between systems.</p> <p>Fun fact</p> <p>The terms \"big-endian\" and \"little-endian\" originate from Jonathan Swift's \"Gulliver's Travels,\" where two factions of beings disagreed on whether to start eating boiled eggs from the big end or the little end. The analogy is used in computer science to describe byte-ordering conventions.</p> <ul> <li>Endianness swap</li> <li>Robust endianness conversion</li> </ul>"},{"location":"computer_science/digit_representations/#big-endian","title":"Big Endian","text":"<ul> <li>In a big-endian system, the most significant byte (the one with the highest address) is stored at the lowest memory address.</li> <li>The least significant byte is stored at the highest memory address.</li> </ul> <p>Example with a 32-bit integer <code>0x12345678</code>:    <pre><code>Address:  0x1000  0x1001  0x1002  0x1003\nData:     0x12    0x34    0x56    0x78\n</code></pre></p>"},{"location":"computer_science/digit_representations/#little-endian","title":"Little Endian","text":"<ul> <li>In a little-endian system, the least significant byte is stored at the lowest memory address.</li> <li>The most significant byte is stored at the highest memory address.</li> </ul> <p>Example with the same 32-bit integer <code>0x12345678</code>:    <pre><code>Address:  0x1000  0x1001  0x1002  0x1003\nData:     0x78    0x56    0x34    0x12\n</code></pre></p>"},{"location":"computer_science/digit_representations/#code-example","title":"Code example","text":"<p>Swap endianness of an integer type:</p> <pre><code>#include &lt;cstdint&gt;\n#include &lt;cstdio&gt;\n\n// optimized by the compiler in one bswap instruction\ntemplate &lt;typename T&gt;\nvoid SwapEndian(T &amp;val) {\n    union U {\n        T val;\n        std::array&lt;std::uint8_t, sizeof(T)raw;\n    } src, dst;\n\n    src.val = val;\n    std::reverse_copy(src.raw.begin(), src.raw.end(), dst.raw.begin());\n    val = dst.val;\n}\n\nvoid SwapEndian(std::uint16_t &amp;value) {\n    value = (value &gt;8) | (value &lt;&lt; 8);\n}\n\ntemplate&lt;&gt;\nvoid SwapEndian&lt;std::uint32_t&gt;(std::uint32_t &amp;value) {\n    std::uint32_t tmp = ((value &lt;&lt; 8) &amp; 0xFF00FF00) | ((value &gt;8) &amp; 0xFF00FF);\n    value = (tmp &lt;&lt; 16) | (tmp &gt;16);\n}\n\nvoid SwapEndian(std::uint64_t &amp;value) {\n    value = ((value &amp; 0x00000000FFFFFFFFull) &lt;&lt; 32) | ((value &amp; 0xFFFFFFFF00000000ull) &gt;32);\n    value = ((value &amp; 0x0000FFFF0000FFFFull) &lt;&lt; 16) | ((value &amp; 0xFFFF0000FFFF0000ull) &gt;16);\n    value = ((value &amp; 0x00FF00FF00FF00FFull) &lt;&lt; 8)  | ((value &amp; 0xFF00FF00FF00FF00ull) &gt;8);\n}\n\n\nint main() {\n    uint32_t originalValue = 0x12345678;\n    uint32_t swappedValue = SwapEndian(originalValue);\n\n    // Output the results\n    printf(\"Original value: 0x%08X\\n\", originalValue);\n    printf(\"Swapped value : 0x%08X\\n\", swappedValue);\n\n    return 0;\n}\n</code></pre>"},{"location":"computer_science/digit_representations/#twos-complement","title":"Twos complement","text":"<ol> <li>Identify the Sign Bit:</li> <li>In a two's complement representation, the leftmost bit (most significant bit) is the sign bit.</li> <li> <p>If the sign bit is 0, the number is positive. If it's 1, the number is negative.</p> </li> <li> <p>Positive Numbers:</p> </li> <li> <p>If the sign bit is 0, read the remaining bits as a standard binary representation of a positive number.</p> <p>Example: For the 8-bit binary number <code>01011010</code>, the sign bit is 0, so the number is positive. Reading the remaining bits (<code>1011010</code>) as standard binary gives the decimal value.</p> </li> <li> <p>Negative Numbers:</p> </li> <li>If the sign bit is 1, interpret the remaining bits as the two's complement of the positive value.</li> <li> <p>Invert all the bits (change 0s to 1s and vice versa) and then add 1 to the result to get the positive value.</p> <p>Example: For the 8-bit binary number <code>11001101</code>, the sign bit is 1, indicating a negative number. Inverting the bits (<code>00110010</code>) and adding 1 gives the positive value.</p> </li> </ol> <p>In an n-bit two's complement representation, the range is from -2^(n-1) to 2^(n-1) - 1. For example, in an 8-bit system, the range is from -128 to 127.</p>"},{"location":"computer_science/digit_representations/#integer","title":"Integer","text":""},{"location":"computer_science/digit_representations/#floating-point","title":"Floating-Point","text":""},{"location":"computer_science/digit_representations/#ieee-754","title":"IEEE 754","text":"<p>Quote</p> <ul> <li>IEEE precision</li> </ul> <p>Quote</p> <ul> <li>Wikipedia article</li> </ul> Precision Signe (bits) Biased exponent (bits) Mantisse (bits) Total (bits) simple 1 8 (range from -126 to 127) 23 32 double 1 11 (range from -1024 to 1023) 52 64"},{"location":"computer_science/digit_representations/#ibm","title":"IBM","text":"<p>Quote</p> <ul> <li>Wikipedia article</li> </ul> Precision Signe (bits) Biased exponent (bits) Mantisse (bits) Total (bits) simple 1 7 (range from -126 to 127) 24 32 double 1 8 (range from ) 55 64"},{"location":"computer_science/digit_representations/#bcd-binary-code-decimal","title":"BCD (Binary Code Decimal)","text":"<p>TODO</p>"},{"location":"computer_science/digit_representations/#ascii-and-extended-ascii-american-standard-code-for-information-interchange","title":"ASCII and extended ASCII (American Standard Code for Information Interchange)","text":"<p>TODO</p>"},{"location":"computer_science/digit_representations/#unicode","title":"Unicode","text":"<p>TODO</p>"},{"location":"computer_science/digit_representations/#utf-8-unicode-transformation-format-8-bits","title":"UTF-8 (Unicode Transformation Format 8-bits)","text":"<p>TODO</p>"},{"location":"computer_science/digit_representations/#utf-16-unicode-transformation-format-8-bits","title":"UTF-16 (Unicode Transformation Format 8-bits)","text":"<p>TODO</p>"},{"location":"computer_science/digit_representations/#utf-32-unicode-transformation-format-8-bits","title":"UTF-32 (Unicode Transformation Format 8-bits)","text":"<p>TODO</p>"},{"location":"computer_science/digit_representations/#ebcdic-extended-binary-coded-decimal-interchange-code","title":"EBCDIC (Extended Binary Coded Decimal Interchange Code)","text":"<p>TODO</p>"},{"location":"computer_science/algorithms/simulated_annealing/","title":"Simulated Annealing","text":""},{"location":"computer_science/algorithms/simulated_annealing/#links","title":"Links","text":"<p>Quote</p> <p>7.5 Simulated Annealing | Advanced Statistical Computing (bookdown.org)</p>"},{"location":"computer_science/algorithms/simulated_annealing/#theory","title":"Theory","text":"<p>Simulated annealing is a techniaue for minimizing functions using Markov Chain Monte Carlo (MCMC) samplers. It is very usefull for wiggly functions that classic Newton-style optimizers can not handle.</p> <p>Let $h(\\theta)$ be the function for which we want to find the minimum. Let $\\theta$ be the vector of parameters in the space $S$.</p> <p>The idea is to build successive approximations of the target density $\\pi(\\theta)$ until it is very close to the final one.</p> <p>Let the uniform distribution over all the global minimizers be such that: $$ S\\star = { \\theta \\in S : h(\\theta) = min_{\\theta}( h(\\theta)) } $$ and define $$ \\left{     \\begin{array}{11}         \\pi(\\theta) \\propto 1 &amp;&amp; \\forall \\theta \\in S \\star \\         \\pi(\\theta) = 0 &amp;&amp;\\forall \\theta \\notin S \\star     \\end{array} \\right. $$ The uttimate goal is to find a way to sample from ${\\pi(\\theta)}$.</p> <p>First begin to build am approximate density called $\\pi_{T} (\\theta)$ where  $$ \\pi_{T}(\\theta) \\propto exp{\\left( \\frac{-h(\\theta)}{T} \\right)} $$ T is the temperature.</p> <ol> <li>As $T \\rightarrow \\infty$, $\\pi(T)$ approaches to unifrom density</li> <li>As $T \\rightarrow 0$, $\\pi(T) \\rightarrow \\pi(\\theta)$</li> </ol> <p>The aim is to draw many samples from\u00a0$\\pi_{T}(\\theta)$ initially with a large value of\u00a0$T$, and to lower\u00a0$T$\u00a0towards\u00a0$0$\u00a0slowly. As we lower\u00a0$T$, the density\u00a0$\\pi_{T}(\\theta)$\u00a0will become more and more concentrated around the minima of\u00a0$h(\\theta)$.</p> <p>The general stategy is to start with a large temperature to explore the whole sample space and then decrease slowly $T$ until the solution converges to a minima.</p> <p>The sample preocedure is the following: Choose a symmetric proposal density $q(. \\mid \\theta)$, then for the iteration $n$ with state $\\theta _{n}$:</p> <ol> <li>Sample $\\quad \\theta \\star \\sim q(\\theta \\mid \\theta_{n})$</li> <li>Sample $\\quad U \\sim \\mathcal{U}(0, 1)$</li> <li>Compute  $$ \\alpha(\\theta \\star \\mid \\theta_{n}) = min \\left( \\frac{exp(-h(\\theta \\star)/T)}{exp(-h(\\theta_{n})/T)}, 1 \\right) = min \\left( exp \\left( \\frac{-(h(\\theta \\star - h(\\theta_{n})}{T} \\right), 1 \\right) $$</li> <li>Accept $\\theta \\star$ as the next state if $\\quad U \\leq \\alpha (\\theta \\star \\mid \\theta_{n})$</li> <li>Decrease the temperature T</li> </ol> <p>If $h(\\theta \\star) \\leq h(\\theta_{n})$ then the proposal is always accepted so that the solution converges to the minimum. If $h(\\theta \\star) \\geq h(\\theta_{n})$ then the proposal $\\theta \\star$ has still a chance to be accepted (even if this solution is greater and we want to find the minima). This allows to avoid getting stuck in a local minima. As T decreses it becomes less likely that an uphill proposal is accepted (in order to converge to a minima).</p> <p>A cooling schedule for T has to be choosen, and in general: $$ T_{n} = \\frac{a}{log(n+b)} \\quad \\forall a, b &gt; 0  $$ This make simulated annealing a very slow algorithm to converge.</p>"},{"location":"computer_science/languages/bash/bash_basics/","title":"Bash basics","text":""},{"location":"computer_science/languages/bash/bash_basics/#about","title":"About","text":"<p>Bash (Bourne Again SHell) is a widely used shell and command language in Unix-like operating systems. It is the default shell for most Linux distributions and macOS.</p>"},{"location":"computer_science/languages/bash/bash_basics/#the-language","title":"The language","text":""},{"location":"computer_science/languages/bash/bash_basics/#shell-prompt","title":"Shell prompt","text":"<p>Opening a terminal shows the prompt. It typically ends</p> <ul> <li>with a dollar sign (<code>$</code>) for regular users</li> <li>with a hash (<code>#</code>) for the root user.</li> </ul>"},{"location":"computer_science/languages/bash/bash_basics/#text-editors-for-creating-and-modifying-files","title":"Text editors for creating and modifying files","text":"<p>To open text files, integrated editors can be used, such as <code>nano</code> or <code>vim</code>:</p> <pre><code>nano filename\n</code></pre> <pre><code>vim filename\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#asking-for-help","title":"Asking for help","text":"<pre><code>man command\n</code></pre> <pre><code>command --help\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#running-scripts","title":"Running Scripts","text":"<p>Each <code>.sh</code> script have to begin with a <code>shebang</code>.</p> <pre><code>#!/bin/bash\n</code></pre> <p>And can be executed as follows:</p> <pre><code>./myscript.sh\n# or\nsh myscript.sh\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#how-bash-works","title":"How bash works","text":"<p>Each time bash is executed, it runs one of the following scripts</p> <ul> <li><code>/etc/profile</code></li> <li><code>/etc/bash.bashrc</code> provided its existence.</li> </ul> <p>Then it searches:</p> <ul> <li><code>~/.bash_login</code></li> <li><code>~/.bash_profile</code></li> <li><code>~/.profile</code> (only in non interactive shells without login)</li> </ul> <p>When bash is exited, it runs <code>~/.bash_logout</code></p>"},{"location":"computer_science/languages/bash/bash_basics/#good-practices","title":"Good practices","text":"<p>Enclose variables into quotes</p> <p>This practice will prevent from raising errors where the variable might be empty or contains spaces. Just use <code>if [ -z \"$VENV_NAME\" ] || [ -z \"$VENV_PATH\" ]; then</code> instead of <code>if [ -z $VENV_NAME ] || [ -z $VENV_PATH ]; then</code>.</p>"},{"location":"computer_science/languages/bash/bash_basics/#environment-variables","title":"Environment variables","text":""},{"location":"computer_science/languages/bash/bash_basics/#home-directory-for-the-current-user","title":"Home directory for the current user","text":"<pre><code>echo $HOME\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#current-username","title":"Current username","text":"<pre><code>echo $USER\n# or\necho $LOGNAME\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#present-working-directory-pwd","title":"Present Working Directory (PWD)","text":"<pre><code>echo $PWD\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#path","title":"PATH","text":"<p>List of directories where the shell looks for executables as a colon-separated list of directories.</p> <pre><code>echo $PATH\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#path-of-the-current-shell","title":"Path of the current shell","text":"<pre><code>echo $SHELL\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#terminal-type","title":"Terminal type","text":"<pre><code>echo $TERM\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#primary-prompt-string","title":"Primary prompt string","text":"<p>Is the text displayed before each command.</p> <pre><code>echo $PS1\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#hostname-of-the-computer","title":"Hostname of the computer","text":"<pre><code>echo $HOSTNAME\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#operating-system-type","title":"Operating System Type","text":"<pre><code>echo $OSTYPE\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#language-and-local-settings","title":"Language and local settings","text":"<pre><code>echo $LANG\necho $LC_COLLATE\n# ... and others\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#user-id-and-effective-user-id-for-the-current-user","title":"User ID and effective user ID for the current user","text":"<pre><code>echo $UID\necho $EUID\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#version-number-of-bash","title":"Version number of bash","text":"<pre><code>echo $BASH_VERSION\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#random-number","title":"Random number","text":"<p>Gets a random number between 0 and 32767.</p> <pre><code>echo $RANDOM\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#exploring-and-editing-the-files","title":"Exploring and editing the files","text":""},{"location":"computer_science/languages/bash/bash_basics/#change-directory","title":"Change directory","text":"<pre><code>cd /path/to/directory\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#list-files-and-directories","title":"List files and directories","text":"<pre><code>ls\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#copy-files-and-directories","title":"Copy files and directories","text":"<pre><code>cp file1 file2\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#move-or-rename-files-or-directories","title":"Move or rename files or directories","text":"<pre><code>mv oldfile newfile\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#delete-files","title":"Delete files","text":"<pre><code>rm filename\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#create-a-new-directory","title":"Create a new directory","text":"<pre><code>mkdir new_directory\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#get-the-location-of-a-file","title":"Get the location of a file","text":"<pre><code># on git bash\nwhere file_or_executable_append_to_path\n\n#or \n# on ubuntu\n\nwhereis file_or_executable_append_to_path)\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#flux-redirection","title":"Flux redirection","text":""},{"location":"computer_science/languages/bash/bash_basics/#redirect-output-to-a-file","title":"Redirect output to a file","text":"<pre><code>echo \"Hello, world!\" output.txt\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#redirect-output-to-a-variable","title":"Redirect output to a variable","text":"<pre><code># Store the current date in the 'current_date' variable using command substitution\ncurrent_date=$(date)\n\n# Display the result\necho \"Current date is: $current_date\"\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#append-output-to-a-file","title":"Append output to a file","text":"<pre><code>echo \"More text\" &gt; output.txt\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#pipe-the-output-of-one-command-as-the-input-to-another","title":"Pipe the output of one command as the input to another","text":"<pre><code>command1 | command2\n</code></pre> <p>This procedure can be useful to chain operations.</p>"},{"location":"computer_science/languages/bash/bash_basics/#silence-the-output-of-a-command","title":"Silence the output of a command","text":"<p>Both <code>stdout</code> and <code>stderr</code> (resp. standard output and standard error) can be redirected to <code>/dev/null</code> which is a file that discards data.</p>"},{"location":"computer_science/languages/bash/bash_basics/#redirect-both-stdout-and-stderr-to-devnull","title":"Redirect Both <code>stdout</code> and <code>stderr</code> to <code>/dev/null</code>","text":"<pre><code>command /dev/null 2&gt;&amp;1\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#redirect-only-stdout-to-devnull","title":"Redirect only <code>stdout</code> to <code>/dev/null</code>","text":"<pre><code>command /dev/null\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#matching-strings","title":"Matching strings","text":""},{"location":"computer_science/languages/bash/bash_basics/#matches-any-sequence-of-characters","title":"Matches any sequence of characters","text":"<pre><code>ls *.txt\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#matches-any-single-character","title":"Matches any single character","text":"<pre><code>ls file?.txt\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#displaying-some-stuff","title":"Displaying some stuff","text":""},{"location":"computer_science/languages/bash/bash_basics/#displaying-variables","title":"Displaying variables","text":"<pre><code>echo variable\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#display-the-content-of-a-file","title":"Display the content of a file","text":"<pre><code>cat filename\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#permissions-and-ownership","title":"Permissions and ownership","text":""},{"location":"computer_science/languages/bash/bash_basics/#change-file-permissions","title":"Change file permissions","text":"<pre><code>chmod +x script.sh\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#change-file-ownership","title":"Change file ownership.","text":"<pre><code>chown user:group filename\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#objects","title":"Objects","text":""},{"location":"computer_science/languages/bash/bash_basics/#variables","title":"Variables","text":"<pre><code>variable_name=\"value\"\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#arrays","title":"Arrays","text":""},{"location":"computer_science/languages/bash/bash_basics/#creation","title":"Creation","text":"<pre><code># Method 1\narray=(\"value1\" \"value2\" \"value3\")\n\n# Method 2\narray[0]=\"value1\"\narray[1]=\"value2\"\narray[2]=\"value3\"\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#accessing","title":"Accessing","text":"<pre><code>echo ${array[0]}   # prints \"value1\"\necho ${array[1]}   # prints \"value2\"\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#iterating","title":"Iterating","text":"<pre><code>array=(\"value1\" \"value2\" \"value3\")\n\nfor element in \"${array[@]}\"; do\n    echo $element\ndone\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#array-length","title":"Array length","text":"<pre><code>array=(\"value1\" \"value2\" \"value3\")\nlength=${#array[@]}\necho \"Array length: $length\"\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#appending","title":"Appending","text":"<pre><code>array=(\"value1\" \"value2\")\narray+=( \"value3\" \"value4\" )\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#searching","title":"Searching","text":"<pre><code>array=(\"apple\" \"orange\" \"banana\")\n\nsearch_element=\"orange\"\nfor element in \"${array[@]}\"; do\n    if [ \"$element\" == \"$search_element\" ]; then\n        echo \"Element found: $search_element\"\n        break\n    fi\ndone\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#removing","title":"Removing","text":"<pre><code>array=(\"apple\" \"orange\" \"banana\")\nelement_to_remove=\"orange\"\n\narray=(\"${array[@]/$element_to_remove}\")\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#functions","title":"Functions","text":"<pre><code>function_name() {\n    # Code for the function\n}\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#operators","title":"Operators","text":""},{"location":"computer_science/languages/bash/bash_basics/#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>-eq</code>: Equal to</li> <li><code>-ne</code>: Not equal to</li> <li><code>-lt</code>: Less than</li> <li><code>-le</code>: Less than or equal to</li> <li><code>-gt</code>: Greater than</li> <li><code>-ge</code>: Greater than or equal to</li> </ul>"},{"location":"computer_science/languages/bash/bash_basics/#logical-operators","title":"Logical Operators:","text":"<ul> <li><code>&amp;&amp;</code>: Logical AND</li> <li><code>||</code>: Logical OR</li> <li><code>!</code>: Logical NOT</li> </ul>"},{"location":"computer_science/languages/bash/bash_basics/#statements","title":"Statements","text":""},{"location":"computer_science/languages/bash/bash_basics/#conditional-statements","title":"Conditional statements","text":""},{"location":"computer_science/languages/bash/bash_basics/#if","title":"If","text":"<pre><code>if [ $a -gt $b ]; then\n    echo \"a is greater than b\"\nelif [ $a -lt $b ]; then\n    echo \"a is less than b\"\nelse\n    echo \"a is equal to b\"\nfi\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#case","title":"case","text":"<pre><code>case $fruit in\n    \"apple\")\n        echo \"It's an apple\"\n        ;;\n    \"orange\" | \"mandarin\")\n        echo \"It's an orange or mandarin\"\n        ;;\n    *)\n        echo \"Unknown fruit\"\n        ;;\nesac\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#loops","title":"Loops","text":""},{"location":"computer_science/languages/bash/bash_basics/#for","title":"For","text":"<pre><code>for i in {1..5}; do\n    echo $i\ndone\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#while","title":"While","text":"<pre><code>count=1\nwhile [ $count -le 5 ]; do\n    echo $count\n    ((count++))\ndone\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#until","title":"Until","text":"<pre><code>count=1\nuntil [ $count -gt 5 ]; do\n    echo $count\n    ((count++))\ndone\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#foreach","title":"Foreach","text":"<pre><code>fruits=(\"apple\" \"orange\" \"banana\")\n\nfor fruit in \"${fruits[@]}\"; do\n    echo $fruit\ndone\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#break-and-continue","title":"Break and continue","text":"<p>Exit a loop prematurely using <code>break</code>:</p> <pre><code>for i in {1..10}; do\n    if [ $i -eq 5 ]; then\n        break\n    fi\n    echo $i\ndone\n</code></pre> <p>Skip the rest of the loop code to the next iteration using <code>continue</code>:</p> <pre><code>for i in {1..5}; do\n    if [ $i -eq 3 ]; then\n        continue\n    fi\n    echo $i\ndone\n</code></pre>"},{"location":"computer_science/languages/bash/bash_basics/#input-flags-handling","title":"Input flags handling","text":""},{"location":"computer_science/languages/bash/bash_basics/#positional-arguments","title":"Positional arguments","text":"<p>TODO</p>"},{"location":"computer_science/languages/bash/bash_basics/#conditional-arguments","title":"Conditional arguments","text":"<p>TODO</p>"},{"location":"computer_science/languages/bash/bash_basics/#script-examples","title":"Script examples","text":"<p>[[Configure and build a CMake solution]] [[Delete a folder properly]] [[Run doxygen on a project]]</p>"},{"location":"computer_science/languages/bash/scripts/confgure_and_build_cmake_solution/","title":"Configure and build a CMake solution","text":"<pre><code>#!/bin/bash\n\n# tell the user the current working directory\necho \"Working in the directory $(pwd)\"\n\n# get the relative path of the script given the location at which it is executed\n# and change directory to the script location\nRELATIVE_EXEC_PATH=\"$( dirname \"${BASH_SOURCE[0]}\" )\"\necho \"Relative path of the script relative to the execution path: ${RELATIVE_EXEC_PATH}\"\ncd \"${RELATIVE_EXEC_PATH}\"\n\n# get the absolute path of the script\nSCRIPT_DIR=$(pwd)\necho \"Directory of the script: ${SCRIPT_DIR}\"\n\n# set the root directory\nROOT_DIR=\"${SCRIPT_DIR}/..\"\n\n# set the build folder to be created relatively to the location of the script\nBUILD_DIR=\"${ROOT_DIR}/build\"\n\nCMAKE_EXEC_NAME=\"cmake\"\n# Check if cmake is installed and added to the PATH\nif ! command -v \"${CMAKE_EXEC_NAME}\" &amp;&gt; /dev/null; then\n    echo \"Error: CMake is not installed. Please install CMake before running this script or add it to your PATH.\"\n    exit 1\nelse\n    CMAKE_EXEC_PATH=$(where \"${CMAKE_EXEC_NAME}\")\n    CMAKE_VERSION=$(\"${CMAKE_EXEC_NAME}\" --version)\n    echo \"CMake version ${CMAKE_VERSION} executable found at path ${CMAKE_EXEC_PATH}\"\nfi\n\n# if the build directory does not exist, then create it and otherwise just use it for cmake\nif [ -d \"${BUILD_DIR}\" ]; then\n    echo \"Found an existing build directory at the path ${BUILD_DIR}, proceeding\"\nelse\n    echo \"Creating the build directory in ${BUILD_DIR}\"\n    mkdir \"${BUILD_DIR}\"\n    echo \"Successfully created the build directory in ${BUILD_DIR}\"\nfi\n\ncd \"${ROOT_DIR}\"\ncmake -B \"${BUILD_DIR}\"\necho \"CMake configuration done, building the solution...\"\n\nTHREADS_NO=4\ncmake --build \"${BUILD_DIR}\" --config Release -j ${THREADS_NO}\necho \"Generating done, build artifacts has been created in ${BUILD_DIR}\"\n</code></pre>"},{"location":"computer_science/languages/bash/scripts/configure_python_environment/","title":"Configure a Python environment","text":"<p>Refs</p> <ul> <li>Oracle</li> <li>RedHat</li> </ul> <pre><code>#!/bin/bash\n\n###########################################################################################\n\n# detect the installed python version added to the path\n# should also consider the different names for python i.e. python, python3 \n# mutliple python versions may be installed\n\n# define a script version here\nSCRIPT_VERSION=\"1.0.0\"\n\nPY_LAUNCHER_EXE=\"py\"\nCOMMON_PY_LAUNCHER_LOC=\"C:\\Windows\\py.exe\" # TODO add this check\nPYTHON_REQUIRED_VERSION=\"3.9\"\nINSTALL_TOKEN=\"&lt;token_here&gt;\"\nREQUIRED_PACKAGES=(\n    \"matplotlib==3.4.3\"\n    \"numpy&gt;=1.20.3\"\n    \"scipy==1.7.3\"\n    \"tqdm==4.64.1\"\n    \"segysak==0.4\"\n    \"ebcdic==1.1.1\"\n    \"PyQt5==5.15.7\"\n    \"numba==0.57.0\"\n    \"pandas==2.0.3\"\n    \"xlsxwriter==3.0.3\"\n    \"netcdf4==1.5.7\"\n    \"xarray==2023.6.0\"\n    \"seg2_files==0.0.1\"\n    \"obspy==1.4.0\"\n    \"cython==3.0.0\"\n    \"spyder-kernels\"\n    )\n\n############################################################\n# Quick helper function to display script version.         #\n############################################################\ndisplay_script_version()\n{\n    echo \"Version $SCRIPT_VERSION\"\n}\n\n############################################################\n# Help                                                     #\n############################################################\ndisplay_help()\n{\n    echo \"#################################################################################################################################################\"\n    echo \"SCRIPT MANUAL\"\n    echo\n    echo \"&gt;&gt;&gt; This script is meant to be used to install a python virtual environment\n    echo \"\"\n    echo \"WHAT IS A VENV ?\"\n    echo \"|  A Python virtual environment, often referred to as venv (short for \"virtual environment\"), is a self-contained directory that contains \"\n    echo \"|  a Python interpreter and a set of additional tools and libraries. The purpose of using a virtual environment is to isolate dependencies \"\n    echo \"|  and packages for a specific project, preventing conflicts between different projects that may require different versions of the same package.\"\n    echo \"\"\n    echo \"Syntax is: script_name.sh [-h|help|v|version|venv]\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"|\"\n    echo \"|  -h                                Display help for the script and exit\"\n    echo \"|  -v                                Print software version and exit\"\n    echo \"|  -d &lt;venv_dir&gt; -n &lt;venv_name&gt;      Create a virtual environment for the monitoring team\"\n    echo \"|                                      argument 1: &lt;venv_dir&gt; is the path where you want to create your venv (to a folder)\"\n    echo \"|                                      argument 2: &lt;venv_name&gt; is the name of the venv that will be created for you.\"\n    echo \"|                                    NOTE: You need to activate your venv afterwards\"\n    echo \"|  -b                                Install the librairies on the base python interpreter instead of the virtual environment\"\n    echo \"\"\n    echo \"Packages that will be installed are:\"\n    echo \n    for package in \"${REQUIRED_PACKAGES[@]}\"; do\n        echo \"| $@ | $package\"\n    done\n    echo \"################################################################################################################################\"\n}\n\n############################################################\n# Quick helper function to display the detected arguments. #\n############################################################\ndisplay_args()\n{\n    # Check provided arguments\n    echo \"Detected the following arguments:\"\n    for arg in \"$@\"; do\n        echo \"| $arg\"\n    done\n}\n\n############################################################\n# Determines if a folder exists                            #\n############################################################\nfolder_exists()\n{\n    local folder_path=\"$1\"\n\n    if [ -z \"$folder_path\" ]; then\n        echo \"Error: The folder path \"${folder_path}\" does not exist in your files, double check it...\"\n        return 1\n    fi\n\n    if [ -d \"$folder_path\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n############################################################\n# Determines if a file exists                              #\n############################################################\nfile_exists()\n{\n    local file_path=\"$1\"\n\n    if [ -z \"$file_path\" ]; then\n        echo \"Error: The file path \"${file_path}\" does not exist in your files, double check it...\"\n        return 1\n    fi\n\n    if [ -d \"$file_path\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nfile_exists()\n{\n    local file_path=\"$1\"\n\n    if [ -z \"$file_path\" ]; then\n        echo \"Error: The file path \"${file_path}\" does not exist in your files, double check it...\"\n        return 1\n    fi\n\n    if [ -d \"$file_path\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n############################################################\n# Main program.                                            #\n############################################################\nUSE_VENV=0\n\nOPTSTRING=\"hvn:d:b\"\nwhile getopts \"$OPTSTRING\" option; do\n    case $option in\n        h)\n            display_help\n            exit 0\n            ;;\n        v)\n            display_script_version\n            exit 0\n            ;;\n        n)\n            VENV_NAME=$OPTARG\n            USE_VENV=1\n            ;;\n        d)\n            VENV_DIR=$OPTARG\n            USE_VENV=1\n            ;;\n        b) \n            USE_VENV=0\n            ;;\n        ?) # handle invalid options here\n            echo\n            echo \"&gt;&gt;&gt; Invalid option ${option}, printing usage &lt;&lt;&lt;\"\n            echo\n            display_help\n            exit 0\n            ;;\n   esac\ndone\n\nif [ -z \"$@\" ]; then\n    echo \"No argument detected, please provite an argument to run the script...\"\n    display_help\n    exit 1\nfi\n\nif [ $USE_VENV -eq 1 ]; then\n    # Check if both path and name options are provided\n    if [ -z \"$VENV_NAME\" ] || [ -z \"$VENV_DIR\" ]; then\n        echo \"Both path and name arguments have to be passed to the script in order to create the virtual environment...\"\n        echo \n        display_help\n        exit 1\n    fi\n\n    # Check if both paths exist\n    if folder_exists \"$VENV_DIR\"; then\n        echo \"Install folder &lt;\"$VENV_DIR\"&gt; has been found...\"\n    else\n        echo \"Error, the folder &lt;$VENV_DIR&gt; specified to install the virtual environment does not exist...\"\n        exit 1\n    fi\n\n    # Build the venv path\n    VENV_PATH=\"${VENV_DIR}/${VENV_NAME}\"\nfi\n\n# Prepare the installation of the environment\necho \"Preparing the installation for the python requirements of the Monitoring Team...\"\necho \"Checking the available Python versions on the system...\"\nif command -v \"${PY_LAUNCHER_EXE}\" &gt;/dev/null 2&gt;&amp;1; then\n    PY_LAUNCHER_PATH=$(where \"${PY_LAUNCHER_EXE}\")\n    echo \"The launcher py has been detected at path ${PY_LAUNCHER_PATH}, proceeding...\"\nelse\n    echo \"The launcher py was not found, please install python with the py launcher to be able to proceed...\"\n    echo \"Download python here: https://www.python.org/downloads/windows/ and check 'dowload the py launcher' during installation...\"\n    read -p \"Press Enter to close this window...\"\n    exit 1\nfi\n\necho \"Checking if python ${PYTHON_REQUIRED_VERSION} is installed on the system...\"\necho \"Detected the following ${PY_LAUNCHER_EXE} versions:\"\nAVAILABLE_PYTHON_VERSIONS=\"$(${PY_LAUNCHER_EXE} --list)\"\necho \"${AVAILABLE_PYTHON_VERSIONS}\"\n\nif echo \"${AVAILABLE_PYTHON_VERSIONS}\" | grep -q \"${PYTHON_REQUIRED_VERSION}\"; then\n    PYTHON_CALL=\"${PY_LAUNCHER_EXE} -${PYTHON_REQUIRED_VERSION}\"\n    PYTHON_INSTALLED_VERSION=$(${PYTHON_CALL} --version)\n    echo \"Python version ${PYTHON_INSTALLED_VERSION} found...\"\nelse\n    echo \"Python version ${PYTHON_REQUIRED_VERSION}.* not found in the available versions, please install a valid python version...\"\n    echo \"Download python here: https://www.python.org/downloads/windows/\"\n    read -p \"Press Enter to close this window...\"\n    exit 1\nfi\n\nif [ $USE_VENV -eq 1 ]; then\n    # Create and activate the python environment to install the packages\n    # Check if the venv files exist\n    ${PYTHON_CALL} -m venv ${VENV_PATH}\n    if folder_exists \"${VENV_PATH}\"; then\n        echo \"Virtual environment ${VENV_PATH} has been successfully built...\"\n    else\n        echo \"Error: The virtual environment ${VENV_PATH} has not been built correctly...\"\n        exit 1\n    fi\n    source \"${VENV_PATH}/Scripts/activate\"\n    echo \"Virtual environment activated, ready to install packages\"\nfi\n\necho \"Installing Custom lib...\"\nif [ $USE_VENV -eq 1 ]; then\n    pip install ${INSTALL_TOKEN} &gt; /dev/null 2&gt;&amp;1\nelse\n    ${PYTHON_CALL} -m pip install ${INSTALL_TOKEN} &gt; /dev/null 2&gt;&amp;1\nfi\nCUSTOM_LIB_INSTALL_EXIT_CODE=$?\n\nif [ ${CUSTOM_LIB_INSTALL_EXIT_CODE} -eq 0 ]; then\n    echo \"Successfully installed custom lib on the base Python environment with exit code ${CUSTOM_LIB_INSTALL_EXIT_CODE}\"\nelse\n    echo \"Failed to install custom lib with exit code ${CUSTOM_LIB_INSTALL_EXIT_CODE}, call a dev...\"\n    read -p \"Press Enter to close this window...\"\n    exit 1\nfi\n\nfor package in \"${REQUIRED_PACKAGES[@]}\"; do\n    if [ $USE_VENV -eq 0 ]; then\n        ${PYTHON_CALL} -m pip install ${package} &gt; /dev/null 2&gt;&amp;1\n    else\n        pip install ${package} &gt; /dev/null 2&gt;&amp;1\n    fi\n    EXIT_CODE=$?\n    if [ $EXIT_CODE -eq 0 ]; then\n        echo \"Successfully installed ${package} on the Python environment with exit code ${EXIT_CODE}\"\n    else\n        echo \"Could not install ${package} on the Python environment with exit code ${EXIT_CODE}\"\n    fi\ndone\n\nif [ $USE_VENV -eq 1 ]; then\n    # deactivate the Python venv after having installed the packages\n    echo \"Deactivating the virtual environment\"\n    deactivate\nfi\n\necho \"Finished installing the requirements on the base Python environment...\"\n\necho \"The packages installed on the base Python environment are:\"\nINSTALLED_PACKAGES=\"$(${PYTHON_CALL} -m pip list)\"\necho \"${INSTALLED_PACKAGES}\"\n\necho \"Python ${PYTHON_INSTALLED_VERSION} is now configured\"\n\nread -p \"Press Enter to close this window...\"\n\nexit 0\n</code></pre>"},{"location":"computer_science/languages/bash/scripts/delete_folder/","title":"Delete a folder properly","text":"<pre><code>#!/bin/bash\n\n# tell the user the current working directory\necho \"Working in the directory $(pwd)\"\n\n# get the relative path of the script given the location at which it is executed\n# and change directory to the script location\nRELATIVE_EXEC_PATH=\"$( dirname \"${BASH_SOURCE[0]}\" )\"\necho \"Relative path of the script relative to the execution path: ${RELATIVE_EXEC_PATH}\"\ncd ${RELATIVE_EXEC_PATH}\n\n# get the absolute path of the script\nSCRIPT_DIR=$(pwd)\necho \"Directory of the script: ${SCRIPT_DIR}\"\n\n# set the folder to be deleted relatively to the location of the script\nBUILD_DIR=\"${SCRIPT_DIR}/../build\"\n\n# check if the folder exists and if so, delete it\nif [ -d \"${BUILD_DIR}\" ]; then\n    rm -rf \"${BUILD_DIR}\"\n    echo \"Folder ${BUILD_DIR} successfully deleted. Solution has been cleared.\"\nelse\n    echo \"Folder ${BUILD_DIR} not found (not deleted). Solution may already be cleared.\"\nfi\n</code></pre>"},{"location":"computer_science/languages/bash/scripts/run_doxygen/","title":"Run doxygen on a C++ project","text":"<p>Warning</p> <p>The source code directory must be relative from where the code is executed If the source code starts <code>..</code> from the documentation folder, then the source code directory is <code>../</code></p> <p>Warning</p> <p>The <code>OUTPUT_DIRECTORY</code> variable must be set to none (no input) Otherwise, the output path is built from the executable path. It ensures that the doc is in the same folder no matter where doxygen is executed.</p> <pre><code>#!/bin/bash\n\n# tell the user the current working directory\necho \"Working in the directory $(pwd)\"\n\n# get the relative path of the script given the location at which it is executed\n# and change directory to the script location\nRELATIVE_EXEC_PATH=\"$( dirname \"${BASH_SOURCE[0]}\" )\"\necho \"Relative path of the script relative to the execution path: ${RELATIVE_EXEC_PATH}\"\ncd \"${RELATIVE_EXEC_PATH}\"\n\n# get the absolute path of the script\nSCRIPT_DIR=$(pwd)\necho \"Directory of the script: ${SCRIPT_DIR}\"\n\n# set the root directory\nROOT_DIR=\"${SCRIPT_DIR}/..\"\n\n# set the documentation folder relatively to the location of the script and create the path to the Doxyfile\nDOC_DIR=\"${ROOT_DIR}/doc\"\nDOXYFILE_ABS_PATH=\"${DOC_DIR}/Doxyfile\"\n\nDOXYGEN_EXEC_NAME=\"doxygen\"\n# Check if Doxygen is installed and added to the PATH\nif ! command -v \"${DOXYGEN_EXEC_NAME}\" &amp;/dev/null; then\n    echo \"Error: Doxygen is not installed. Please install Doxygen before running this script or add it to your PATH.\"\n    exit 1\nelse\n    DOXYGEN_EXEC_PATH=$(where \"${DOXYGEN_EXEC_NAME}\")\n    DOXYGEN_VERSION=$(\"${DOXYGEN_EXEC_NAME}\" -v)\n    echo \"Doxygen version ${DOXYGEN_VERSION} executable found at path ${DOXYGEN_EXEC_PATH}\"\nfi\n\n# Check if the documentation exists\nif [ ! -d \"${DOC_DIR}\" ]; then\n    echo \"Error: Documentation directory not found at ${DOC_DIR}. Please check if the directory exists.\"\n    exit 1\nfi\n\n# Check if the Doxyfile exists\nif [ ! -f \"${DOXYFILE_ABS_PATH}\" ]; then\n    echo \"Error: Doxyfile not found at ${DOXYFILE_ABS_PATH}. Please check if the text file exists in the documentation directory at ${DOC_DIR}\"\n    exit 1\nfi\n\n# Execute Doxygen with the specified Doxyfile\ncd \"${DOC_DIR}\"\necho \"Changing directory to the root of the project: $(pwd)\"\necho \"Running doxygen on the file ${DOXYFILE_ABS_PATH}\"\ndoxygen \"${DOXYFILE_ABS_PATH}\"\nDOXYGEN_EXIT_CODE=$?\n\n# Generated doc path\nOUTPUT_DOC_NAME=\"SpotDemigDoc\"\nOUTPUT_DOC_PATH=\"${DOC_DIR}/${OUTPUT_DOC_NAME}/index.html\"\n\nif [ $DOXYGEN_EXIT_CODE -eq 0 ]; then\n    echo \"Doxygen executed successfully, articafts are in ${DOC_DIR}/${OUTPUT_DOC_NAME} exit code ${DOXYGEN_EXIT_CODE}.\"\nelse\n    echo \"Doxygen encountered an error, exit code ${DOXYGEN_EXIT_CODE}.\"\n    exit 1\nfi\n\nif [ ! -f $OUTPUT_DOC_PATH ]; then\n    echo \"Error, the output doxygen index html index at $OUTPUT_DOC_PATH can not be open because the path is incorrect\"\n    exit 1\nfi\n\n# Check the operating system and open the index.html from the generated doc\ncase \"$(uname -s)\" in\n    Linux*)                         # Linux\n        xdg-open $OUTPUT_DOC_PATH\n        ;;\n    Darwin*)                        # macOS\n        open $OUTPUT_DOC_PATH\n        ;;\n    CYGWIN*|MINGW*)                 # Windows (Cygwin and MSYS2)\n        start $OUTPUT_DOC_PATH\n        ;;\n    *)\n        echo \"Unsupported operating system\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"computer_science/languages/cpp/cppcon_2022_back_to_basics_cpp_api_design/","title":"CppCon 2022 - Back to Basics C++ API Design - Jason Turner","text":"<p>Cite</p> <ul> <li>GutHub CppCon</li> <li>Youtube</li> </ul>"},{"location":"computer_science/languages/cpp/cppcon_2022_back_to_basics_cpp_api_design/#summary","title":"Summary","text":"<p>Illustrates which are the bad and the good habits while writing a C++ API</p>"},{"location":"computer_science/languages/cpp/cppcon_2022_back_to_basics_cpp_api_design/#conclusion","title":"Conclusion","text":"<p>Its all about making your API hard to use wrong</p> <p>Its all about making your API hard to use wrong by: - Trying to use your API incorrectly - Using better naming - Use <code>[[nodiscard]]</code> liberally - Never return a ray pointer, instead prefer references or better: smart pointers - Use <code>noexcept</code> to indicate that a function does not raise errors - Provide consistent and IMPOSSIBLE to ignore error handling (avoid returning error codes for instance and prefer throwing errors) - Use strong types (that can not be constructed with cast / different inputs) and avoid implicit conversions. For instance, std::filesystem is a weak type since it can be constructed with a string, a const char*, etc... Prevent conversions by using <code>delete</code> on the relevant constructors and functions (sparingly). - Avoid passing raw pointers except for optional and unique arguments - Limit API visibility to the required on no more - Use <code>constexpr</code> unless there is a good reason</p>"},{"location":"computer_science/languages/cpp/pybind11_basics/","title":"Pybind 11 basics","text":"<p>What is this?</p> <p>Pybind11 is a lightweight, open-source library designed to create Python bindings for C++ code. It enables seamless integration of C++ code into Python programs by allowing Python to call C++ functions, classes, and methods as if they were native Python objects.</p> <p>Cite</p> <ul> <li>GitHub</li> <li>Official documentation</li> </ul>"},{"location":"computer_science/languages/cpp/pybind11_basics/#bindings-for-custom-types","title":"Bindings for custom types","text":"<pre><code>struct Pet {\n    Pet(const std::string &amp;name) : name(name) { }\n    void setName(const std::string &amp;name_) { name = name_; }\n    const std::string &amp;getName() const { return name; }\n\n    std::string name;\n};\n\n#include &lt;pybind11/pybind11.h&gt;\n\nnamespace py = pybind11;\n\nPYBIND11_MODULE(example, m) {\n    py::class_&lt;Pet&gt;(m, \"Pet\")\n        .def(py::init&lt;const std::string &amp;&gt;())\n        .def(\"setName\", &amp;Pet::setName)\n        .def(\"getName\", &amp;Pet::getName);\n}\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#instance-and-static-fields","title":"Instance and static fields","text":"<p>Define a read and write binding for a class attribute of a static field: </p> <pre><code>.def_readwrite(\"name\", &amp;Pet::name)\n.def_readonly(\"name\", &amp;Pet::name)\n</code></pre> <pre><code>&gt;&gt;&gt; p = example.Pet(\"Molly\")\n&gt;&gt;&gt; p.name\n'Molly'\n&gt;&gt;&gt; p.name = \"Charly\"\n&gt;&gt;&gt; p.name\n'Charly'\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#dynamic-attributes","title":"Dynamic attributes","text":"<pre><code>py::class_&lt;Pet&gt;(m, \"Pet\", py::dynamic_attr())\n    .def(py::init&lt;&gt;())\n    .def_readwrite(\"name\", &amp;Pet::name);\n</code></pre> <pre><code>&gt;&gt;&gt; p = example.Pet()\n&gt;&gt;&gt; p.name = \"Charly\"  # OK, overwrite value in C++\n&gt;&gt;&gt; p.age = 2  # OK, dynamically add a new attribute\n&gt;&gt;&gt; p.__dict__  # just like a native Python class\n{'age': 2}\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#inheritance","title":"Inheritance","text":"<pre><code>struct Pet {\n    Pet(const std::string &amp;name) : name(name) { }\n    std::string name;\n};\n\nstruct Dog : Pet {\n    Dog(const std::string &amp;name) : Pet(name) { }\n    std::string bark() const { return \"woof!\"; }\n};\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#using-the-c-base-class-as-an-extra-template-parameter-of-the-class_","title":"Using the C++ base class as an extra template parameter of the\u00a0class_","text":"<pre><code>py::class_&lt;Pet&gt;(m, \"Pet\")\n   .def(py::init&lt;const std::string &amp;&gt;())\n   .def_readwrite(\"name\", &amp;Pet::name);\n\n// Method 1: template parameter:\npy::class_&lt;Dog, Pet /* &lt;- specify C++ parent type */&gt;(m, \"Dog\")\n    .def(py::init&lt;const std::string &amp;&gt;())\n    .def(\"bark\", &amp;Dog::bark);\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#assign-a-name-to-the-parent-class-and-reference-it","title":"Assign a name to the parent class and reference it","text":"<pre><code>py::class_&lt;Pet&gt; pet(m, \"Pet\");\npet.def(py::init&lt;const std::string &amp;&gt;())\n   .def_readwrite(\"name\", &amp;Pet::name);\n\n// Method 2: pass parent class_ object:\npy::class_&lt;Dog&gt;(m, \"Dog\", pet /* &lt;- specify Python parent type */)\n    .def(py::init&lt;const std::string &amp;&gt;())\n    .def(\"bark\", &amp;Dog::bark);\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#polymorphic-types","title":"Polymorphic types","text":"<p>Pybind recognizes polymorphic types automatically if there is at least one virtual function</p> <p>Therefore, if a virutal method is defined, then downcasting is authorized:</p> <pre><code>struct PolymorphicPet {\n    virtual ~PolymorphicPet() = default;\n};\n\nstruct PolymorphicDog : PolymorphicPet {\n    std::string bark() const { return \"woof!\"; }\n};\n\n// Same binding code\npy::class_&lt;PolymorphicPet&gt;(m, \"PolymorphicPet\");\npy::class_&lt;PolymorphicDog, PolymorphicPet&gt;(m, \"PolymorphicDog\")\n    .def(py::init&lt;&gt;())\n    .def(\"bark\", &amp;PolymorphicDog::bark);\n\n// Again, return a base pointer to a derived instance\nm.def(\"pet_store2\", []() { return std::unique_ptr&lt;PolymorphicPet&gt;(new PolymorphicDog); });\n</code></pre> <pre><code>&gt;&gt;&gt; p = example.pet_store2()\n&gt;&gt;&gt; type(p)\nPolymorphicDog  # automatically downcast\n&gt;&gt;&gt; p.bark()\n'woof!'\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#overloading-methods","title":"Overloading methods","text":"<pre><code>struct Pet {\n    Pet(const std::string &amp;name, int age) : name(name), age(age) { }\n\n    void set(int age_) { age = age_; }\n    void set(const std::string &amp;name_) { name = name_; }\n\n    std::string name;\n    int age;\n};\n\n// C++ &lt; 14\npy::class_&lt;Pet&gt;(m, \"Pet\")\n   .def(py::init&lt;const std::string &amp;, int&gt;())\n   .def(\"set\", static_cast&lt;void (Pet::*)(int)&gt;(&amp;Pet::set), \"Set the pet's age\")\n   .def(\"set\", static_cast&lt;void (Pet::*)(const std::string &amp;)&gt;(&amp;Pet::set), \"Set the pet's name\");\n\n// C++ &gt;= 14\npy::class_&lt;Pet&gt;(m, \"Pet\")\n    .def(\"set\", py::overload_cast&lt;int&gt;(&amp;Pet::set), \"Set the pet's age\")\n    .def(\"set\", py::overload_cast&lt;const std::string &amp;&gt;(&amp;Pet::set), \"Set the pet's name\");\n</code></pre> <p>Defining multiple overloads is possible: python will try every signature to get the right one</p> <p>If a function is overloaded based on constness, the\u00a0<code>py::const_</code>\u00a0tag should be used</p>"},{"location":"computer_science/languages/cpp/pybind11_basics/#for-const-members","title":"For const members","text":"<pre><code>struct Widget {\n    int foo(int x, float y);\n    int foo(int x, float y) const;\n};\n\npy::class_&lt;Widget&gt;(m, \"Widget\")\n   .def(\"foo_mutable\", py::overload_cast&lt;int, float&gt;(&amp;Widget::foo))\n   .def(\"foo_const\",   py::overload_cast&lt;int, float&gt;(&amp;Widget::foo, py::const_));\n</code></pre> <p>There is another way, but this one is fine.</p>"},{"location":"computer_science/languages/cpp/pybind11_basics/#enums-and-internal-types","title":"Enums and internal types","text":"<pre><code>struct Pet {\n    enum Kind {\n        Dog = 0,\n        Cat\n    };\n\n    struct Attributes {\n        float age = 0;\n    };\n\n    Pet(const std::string &amp;name, Kind type) : name(name), type(type) { }\n\n    std::string name;\n    Kind type;\n    Attributes attr;\n};\n</code></pre> <pre><code>py::class_&lt;Pet&gt; pet(m, \"Pet\");\n\npet.def(py::init&lt;const std::string &amp;, Pet::Kind&gt;())\n    .def_readwrite(\"name\", &amp;Pet::name)\n    .def_readwrite(\"type\", &amp;Pet::type)\n    .def_readwrite(\"attr\", &amp;Pet::attr);\n\n// enum definition is done through py::enum_\npy::enum_&lt;Pet::Kind&gt;(pet, \"Kind\")\n    .value(\"Dog\", Pet::Kind::Dog)\n    .value(\"Cat\", Pet::Kind::Cat)\n    .export_values();\n\n// class definition is done through py::class_\npy::class_&lt;Pet::Attributes&gt;(pet, \"Attributes\")\n    .def(py::init&lt;&gt;())\n    .def_readwrite(\"age\", &amp;Pet::Attributes::age);\n</code></pre> <p>When the special tag\u00a0py::arithmetic()\u00a0is specified to the\u00a0enum_\u00a0constructor, pybind11 creates an enumeration that also supports rudimentary arithmetic and bit-level operations like comparisons, and, or, xor, negation, etc.</p> <pre><code>py::enum_&lt;Pet::Kind&gt;(pet, \"Kind\", py::arithmetic())\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#return-value-policy","title":"Return value policy","text":"<p>If custom smart pointers are used, it eliminates the need to use return value policies.</p> <p>Python and C++ will handle the pointer reference count and the object will be deleted once there is no more reference for this pointer.</p>"},{"location":"computer_science/languages/cpp/pybind11_basics/#call-policies","title":"Call policies","text":""},{"location":"computer_science/languages/cpp/pybind11_basics/#keep-alive","title":"Keep alive","text":""},{"location":"computer_science/languages/cpp/pybind11_basics/#call-guard","title":"Call guard","text":""},{"location":"computer_science/languages/cpp/pybind11_basics/#python-object-as-arguments","title":"Python object as arguments","text":""},{"location":"computer_science/languages/cpp/pybind11_basics/#args-and-kwargs","title":"*args and *kwargs","text":"<p>*args derive from a tuple and *kwargs from a dictionnary</p>"},{"location":"computer_science/languages/cpp/pybind11_basics/#specify-that-an-argument-is-keyword-only","title":"Specify that an argument is keyword only","text":"<pre><code>m.def(\"f\", [](int a, int b) { /* ... */ },\n      py::arg(\"a\"), py::kw_only(), py::arg(\"b\"));\n</code></pre> <p>Since v2.6, using py::arg uses py::kw_only</p> <p>Therefore it is not useful to specify it.</p>"},{"location":"computer_science/languages/cpp/pybind11_basics/#specify-that-an-argument-is-positional-only","title":"Specify that an argument is positional only","text":"<pre><code>m.def(\"f\", [](int a, int b) { /* ... */ },\n       py::arg(\"a\"), py::pos_only(), py::arg(\"b\"));\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#default-values","title":"Default values","text":"<p>When using <code>nullptr</code> as a default argument: <code>static_cast</code> it to the needed type before</p> <pre><code>py::class_&lt;MyClass&gt;(\"MyClass\")\n    .def(\"myFunction\", py::arg(\"arg\") = static_cast&lt;SomeType *&gt;(nullptr));\n</code></pre>"},{"location":"computer_science/languages/cpp/pybind11_basics/#force-non-conversions-between-types","title":"Force non-conversions between types","text":"<p>Sometimes we do not want to convert arguments. For instance if a function takes a float and we do not want to use any other type like integer, then we can add <code>.noconvert()</code> specifier.</p> <pre><code>m.def(\"floats_only\", [](double f) { return 0.5 * f; }, py::arg(\"f\").noconvert());\nm.def(\"floats_preferred\", [](double f) { return 0.5 * f; }, py::arg(\"f\"));\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/","title":"Java basics","text":"<p>Cite</p> <ul> <li>Oracle official website</li> </ul>"},{"location":"computer_science/languages/java/java_basics/#variables","title":"Variables","text":""},{"location":"computer_science/languages/java/java_basics/#scopes","title":"Scopes","text":"<p>The Java programming language defines the following kinds of variables:</p> <ul> <li>Instance Variables (Non-Static Fields): their values are unique to each\u00a0instance\u00a0of a class</li> <li>Member variables in a class\u2014these are called\u00a0fields.</li> <li>Variables in a method or block of code\u2014these are called\u00a0local variables.</li> <li>Variables in method declarations\u2014these are called\u00a0parameters.</li> </ul>"},{"location":"computer_science/languages/java/java_basics/#naming-conventions","title":"Naming conventions","text":"<p>In Java, it is a common convention to use uppercase letters for constant variables.</p>"},{"location":"computer_science/languages/java/java_basics/#primitive-data-types","title":"Primitive data types","text":"<p>The eight primitive data types supported by the Java programming language are:</p> <ul> <li>byte: The\u00a0<code>byte</code>\u00a0data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value of 127 (inclusive). The\u00a0<code>byte</code>\u00a0data type can be useful for saving memory in large\u00a0arrays, where the memory savings actually matters. They can also be used in place of\u00a0<code>int</code>\u00a0where their limits help to clarify your code; the fact that a variable's range is limited can serve as a form of documentation.</li> <li>short: The\u00a0<code>short</code>\u00a0data type is a 16-bit signed two's complement integer. It has a minimum value of -32,768 and a maximum value of 32,767 (inclusive). As with\u00a0<code>byte</code>, the same guidelines apply: you can use a\u00a0<code>short</code>\u00a0to save memory in large arrays, in situations where the memory savings actually matters.</li> <li>int: By default, the\u00a0<code>int</code>\u00a0data type is a 32-bit signed two's complement integer, which has a minimum value of -231\u00a0and a maximum value of 231-1. In Java SE 8 and later, you can use the\u00a0<code>int</code>\u00a0data type to represent an unsigned 32-bit integer, which has a minimum value of 0 and a maximum value of 232-1. Use the Integer class to use\u00a0<code>int</code>\u00a0data type as an unsigned integer. See the section The Number Classes for more information. Static methods like\u00a0<code>compareUnsigned</code>,\u00a0<code>divideUnsigned</code>\u00a0etc have been added to the\u00a0<code>Integer</code>\u00a0class to support the arithmetic operations for unsigned integers.</li> <li>long: The\u00a0<code>long</code>\u00a0data type is a 64-bit two's complement integer. The signed long has a minimum value of -263\u00a0and a maximum value of 263-1. In Java SE 8 and later, you can use the\u00a0<code>long</code>\u00a0data type to represent an unsigned 64-bit long, which has a minimum value of 0 and a maximum value of 264-1. Use this data type when you need a range of values wider than those provided by\u00a0<code>int</code>. The\u00a0<code>Long</code>\u00a0class also contains methods like\u00a0<code>compareUnsigned</code>,\u00a0<code>divideUnsigned</code>\u00a0etc to support arithmetic operations for unsigned long.</li> <li>float: The\u00a0<code>float</code>\u00a0data type is a single-precision 32-bit IEEE 754 floating point. Its range of values is beyond the scope of this discussion, but is specified in the\u00a0Floating-Point Types, Formats, and Values\u00a0section of the Java Language Specification. As with the recommendations for\u00a0<code>byte</code>\u00a0and\u00a0<code>short</code>, use a\u00a0<code>float</code>\u00a0(instead of\u00a0<code>double</code>) if you need to save memory in large arrays of floating point numbers. This data type should never be used for precise values, such as currency. For that, you will need to use the\u00a0java.math.BigDecimal\u00a0class instead.\u00a0Numbers and Strings\u00a0covers\u00a0<code>BigDecimal</code>\u00a0and other useful classes provided by the Java platform.</li> <li>double: The\u00a0<code>double</code>\u00a0data type is a double-precision 64-bit IEEE 754 floating point. Its range of values is beyond the scope of this discussion, but is specified in the\u00a0Floating-Point Types, Formats, and Values\u00a0section of the Java Language Specification. For decimal values, this data type is generally the default choice. As mentioned above, this data type should never be used for precise values, such as currency.</li> <li>boolean: The\u00a0<code>boolean</code>\u00a0data type has only two possible values:\u00a0<code>true</code>\u00a0and\u00a0<code>false</code>. Use this data type for simple flags that track true/false conditions. This data type represents one bit of information, but its \"size\" isn't something that's precisely defined. </li> <li>char: The\u00a0<code>char</code>\u00a0data type is a single 16-bit Unicode character. It has a minimum value of\u00a0<code>'\\u0000'</code>\u00a0(or 0) and a maximum value of\u00a0<code>'\\uffff'</code>\u00a0(or 65,535 inclusive).</li> </ul>"},{"location":"computer_science/languages/java/java_basics/#literals","title":"Literals","text":""},{"location":"computer_science/languages/java/java_basics/#integer-literals","title":"Integer literals","text":"<pre><code>// The number 26, in decimal\nint decVal = 26;\n//  The number 26, in hexadecimal\nint hexVal = 0x1a;\n// The number 26, in binary\nint binVal = 0b11010;\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#floating-point-literals","title":"Floating-point literals","text":"<pre><code>double d1 = 123.4;\n// same value as d1, but in scientific notation\ndouble d2 = 1.234e2;\nfloat f1  = 123.4f;\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#character-and-string-literals","title":"Character and string literals","text":"<p>Always use 'single quotes' for\u00a0<code>char</code>\u00a0literals and \"double quotes\" for\u00a0<code>String</code>\u00a0literals. The Java programming language also supports a few special escape sequences for\u00a0<code>char</code>\u00a0and\u00a0<code>String</code>\u00a0literals:</p> <ul> <li><code>\\b</code>\u00a0(backspace)</li> <li><code>\\t</code>\u00a0(tab)</li> <li><code>\\n</code>\u00a0(line feed)</li> <li><code>\\f</code>\u00a0(form feed)</li> <li><code>\\r</code>\u00a0(carriage return)</li> <li><code>\\\"</code>\u00a0(double quote)</li> <li><code>\\'</code>\u00a0(single quote)</li> <li><code>\\\\</code>\u00a0(backslash)</li> </ul>"},{"location":"computer_science/languages/java/java_basics/#null-literal","title":"Null literal","text":"<p>There's also a special\u00a0<code>null</code>\u00a0literal that can be used as a value for any reference type.\u00a0<code>null</code>\u00a0may be assigned to any variable, except variables of primitive types. There's little you can do with a\u00a0<code>null</code>\u00a0value beyond testing for its presence. Therefore,\u00a0<code>null</code>\u00a0is often used in programs as a marker to indicate that some object is unavailable.</p>"},{"location":"computer_science/languages/java/java_basics/#using-underscore-characters-in-numeric-literals","title":"Using Underscore Characters in Numeric Literals","text":"<p>The following example shows other ways you can use the underscore in numeric literals:</p> <pre><code>long creditCardNumber = 1234_5678_9012_3456L;\nlong socialSecurityNumber = 999_99_9999L;\nfloat pi =  3.14_15F;\nlong hexBytes = 0xFF_EC_DE_5E;\nlong hexWords = 0xCAFE_BABE;\nlong maxLong = 0x7fff_ffff_ffff_ffffL;\nbyte nybbles = 0b0010_0101;\nlong bytes = 0b11010010_01101001_10010100_10010010;\n</code></pre> <p>You can place underscores only between digits; you cannot place underscores in the following places:</p> <ul> <li>At the beginning or end of a number</li> <li>Adjacent to a decimal point in a floating point literal</li> <li>Prior to an\u00a0<code>F</code>\u00a0or\u00a0<code>L</code>\u00a0suffix</li> <li>In positions where a string of digits is expected</li> </ul> <p>The following examples demonstrate valid and invalid underscore placements (which are highlighted) in numeric literals:</p> <pre><code>// **Invalid: cannot put underscores**\n// **adjacent to a decimal point**\nfloat pi1 = 3_.1415F;\n// **Invalid: cannot put underscores** \n// **adjacent to a decimal point**\nfloat pi2 = 3._1415F;\n// **Invalid: cannot put underscores** \n// **prior to an L suffix**\nlong socialSecurityNumber1 = 999_99_9999_L;\n\n// OK (decimal literal)\nint x1 = 5_2;\n// **Invalid: cannot put underscores**\n// **At the end of a literal**\nint x2 = 52_;\n// OK (decimal literal)\nint x3 = 5_______2;\n\n// **Invalid: cannot put underscores**\n// **in the 0x radix prefix**\nint x4 = 0_x52;\n// **Invalid: cannot put underscores**\n// **at the beginning of a number**\nint x5 = 0x_52;\n// OK (hexadecimal literal)\nint x6 = 0x5_2; \n// **Invalid: cannot put underscores**\n// **at the end of a number**\nint x7 = 0x52_;\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#derived-types","title":"Derived types","text":""},{"location":"computer_science/languages/java/java_basics/#strings","title":"Strings","text":"<p>In addition to the eight primitive data types listed above, the Java programming language also provides special support for character strings via the\u00a0java.lang.String\u00a0class. Enclosing your character string within double quotes will automatically create a new\u00a0<code>String</code>\u00a0object; for example,\u00a0<code>String s = \"this is a string\";</code>.\u00a0<code>String</code>\u00a0objects are\u00a0immutable, which means that once created, their values cannot be changed. The\u00a0<code>String</code>\u00a0class is not technically a primitive data type, but considering the special support given to it by the language, you'll probably tend to think of it as such.</p>"},{"location":"computer_science/languages/java/java_basics/#arrays","title":"Arrays","text":""},{"location":"computer_science/languages/java/java_basics/#declaration","title":"Declaration","text":"<pre><code>// declares an array of integers\nint[] anArray;\nbyte[] anArrayOfBytes;\nshort[] anArrayOfShorts;\nlong[] anArrayOfLongs;\nfloat[] anArrayOfFloats;\ndouble[] anArrayOfDoubles;\nboolean[] anArrayOfBooleans;\nchar[] anArrayOfChars;\nString[] anArrayOfStrings;\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#creating-initializing-and-accessing-an-array","title":"Creating, initializing and accessing an array","text":"<pre><code>// create an array of integers\nanArray = new int[10];\nanArray[0] = 100; // initialize first element\nanArray[1] = 200; // initialize second element\nanArray[2] = 300; // and so forth\nSystem.out.println(\"Element 1 at index 0: \" + anArray[0]);\nSystem.out.println(\"Element 2 at index 1: \" + anArray[1]);\nSystem.out.println(\"Element 3 at index 2: \" + anArray[2]);\nSystem.out.println(anArray.length); // print array length\n</code></pre> <p>Alternatively, you can use the shortcut syntax to create and initialize an array:</p> <pre><code>int[] anArray = { \n    100, 200, 300,\n    400, 500, 600, \n    700, 800, 900, 1000\n};\n</code></pre> <p>Multidimensional arrays can be created as follows:</p> <pre><code>String[][] names = {\n            {\"Mr. \", \"Mrs. \", \"Ms. \"},\n            {\"Smith\", \"Jones\"}\n        };\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#copying-arrays","title":"Copying arrays","text":"<p>The\u00a0<code>System</code>\u00a0class has an\u00a0<code>arraycopy</code>\u00a0method that you can use to efficiently copy data from one array into another:</p> <pre><code>public static void arraycopy(Object src, int srcPos,\n                             Object dest, int destPos, int length)\n</code></pre> <p>Either manually:</p> <pre><code>public static void main(String[] args) {\n        String[] copyFrom = {\n            \"Affogato\", \"Americano\", \"Cappuccino\", \"Corretto\", \"Cortado\",   \n            \"Doppio\", \"Espresso\", \"Frappucino\", \"Freddo\", \"Lungo\", \"Macchiato\",      \n            \"Marocchino\", \"Ristretto\" };\n\n        String[] copyTo = new String[7];\n        System.arraycopy(copyFrom, 2, copyTo, 0, 7);\n        for (String coffee : copyTo) {\n            System.out.print(coffee + \" \");           \n        }\n    }\n</code></pre> <p>Or using the <code>java.utils.Arrays</code> class:</p> <pre><code>public static void main(String[] args) {\n        String[] copyFrom = {\n            \"Affogato\", \"Americano\", \"Cappuccino\", \"Corretto\", \"Cortado\",   \n            \"Doppio\", \"Espresso\", \"Frappucino\", \"Freddo\", \"Lungo\", \"Macchiato\",      \n            \"Marocchino\", \"Ristretto\" };\n\n        String[] copyTo = java.util.Arrays.copyOfRange(copyFrom, 2, 9);        \n        for (String coffee : copyTo) {\n            System.out.print(coffee + \" \");           \n        }            \n    }\n</code></pre> <p>Some other useful operations provided by methods in the\u00a0<code>java.util.Arrays</code>\u00a0class are:</p> <ul> <li>Searching an array for a specific value to get the index at which it is placed (the\u00a0<code>binarySearch</code>\u00a0method).</li> <li>Comparing two arrays to determine if they are equal or not (the\u00a0<code>equals</code>\u00a0method).</li> <li>Filling an array to place a specific value at each index (the\u00a0<code>fill</code>\u00a0method).</li> <li>Sorting an array into ascending order. This can be done either sequentially, using the\u00a0<code>sort</code>\u00a0method, or concurrently, using the\u00a0<code>parallelSort</code>\u00a0method introduced in Java SE 8. Parallel sorting of large arrays on multiprocessor systems is faster than sequential array sorting.</li> <li> <p>Creating a stream that uses an array as its source (the\u00a0<code>stream</code>\u00a0method). For example, the following statement prints the contents of the\u00a0<code>copyTo</code>\u00a0array in the same way as in the previous example: java.util.Arrays.stream(copyTo).map(coffee -&gt; coffee + \" \").forEach(System.out::print); See\u00a0Aggregate Operations\u00a0for more information about streams.</p> </li> <li> <p>Converting an array to a string. The\u00a0<code>toString</code>\u00a0method converts each element of the array to a string, separates them with commas, then surrounds them with brackets. For example, the following statement converts the\u00a0<code>copyTo</code>\u00a0array to a string and prints it: <code>System.out.println(java.util.Arrays.toString(copyTo));</code> This statement prints the following: <code>[Cappuccino, Corretto, Cortado, Doppio, Espresso, Frappucino, Freddo]</code></p> </li> </ul>"},{"location":"computer_science/languages/java/java_basics/#operators","title":"Operators","text":""},{"location":"computer_science/languages/java/java_basics/#operator-precedence","title":"Operator precedence","text":"Operators Precedence postfix <code>_expr_++\u00a0_expr_--</code> unary <code>++_expr_\u00a0--_expr_\u00a0+_expr_\u00a0-_expr_\u00a0~ !</code> multiplicative <code>* / %</code> additive <code>+ -</code> shift <code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code> relational <code>&lt; &gt; &lt;= &gt;= instanceof</code> equality <code>== !=</code> bitwise AND <code>&amp;</code> bitwise exclusive OR <code>^</code> bitwise inclusive OR <code>\\|</code> logical AND <code>&amp;&amp;</code> logical OR <code>\\|</code> ternary <code>? :</code> assignment <code>= += -= *= /= %= &amp;= ^= \\|= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</code>"},{"location":"computer_science/languages/java/java_basics/#arithmetic-operators","title":"Arithmetic operators","text":"Operator Description <code>+</code> Additive operator (also used for String concatenation) <code>-</code> Subtraction operator <code>*</code> Multiplication operator <code>/</code> Division operator <code>%</code> Remainder operator"},{"location":"computer_science/languages/java/java_basics/#unary-operators","title":"Unary operators","text":"Operator Description <code>+</code> Unary plus operator; indicates positive value (numbers are positive without this, however) <code>-</code> Unary minus operator; negates an expression <code>++</code> Increment operator; increments a value by 1 <code>--</code> Decrement operator; decrements a value by 1 <code>!</code> Logical complement operator; inverts the value of a boolean"},{"location":"computer_science/languages/java/java_basics/#equality-and-relational-operators","title":"Equality and Relational Operators","text":"<p>Same as C and C++.</p>"},{"location":"computer_science/languages/java/java_basics/#conditional-operators","title":"Conditional operators","text":"<p>Same as C and C++.`</p>"},{"location":"computer_science/languages/java/java_basics/#type-comparison-operator-instanceof","title":"Type Comparison Operator <code>instanceof</code>","text":"<pre><code>Parent obj1 = new Parent();\nParent obj2 = new Child();\n\nSystem.out.println(\"obj1 instanceof Parent: \" + (obj1 instanceof Parent));\nSystem.out.println(\"obj1 instanceof Child: \" + (obj1 instanceof Child));\nSystem.out.println(\"obj1 instanceof MyInterface: \" + (obj1 instanceof MyInterface));\nSystem.out.println(\"obj2 instanceof Parent: \" + (obj2 instanceof Parent));\nSystem.out.println(\"obj2 instanceof Child: \" + (obj2 instanceof Child));\nSystem.out.println(\"obj2 instanceof MyInterface: \" + (obj2 instanceof MyInterface));\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#bitwise-and-bitshift-operators","title":"Bitwise and bitshift operators","text":"<p>Same as C and C++.</p> <pre><code>public static void main(String[] args) {\n    int bitmask = 0x000F;\n    int val = 0x2222;\n    // prints \"2\"\n    System.out.println(val &amp; bitmask);\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#expressions-statements-and-blocks","title":"Expressions, Statements, and Blocks","text":""},{"location":"computer_science/languages/java/java_basics/#expressions","title":"Expressions","text":"<p>[!info] An\u00a0expression\u00a0is a construct made up of variables, operators, and method invocations, which are constructed according to the syntax of the language, that evaluates to a single value.</p>"},{"location":"computer_science/languages/java/java_basics/#regular-expression","title":"Regular expression","text":"<pre><code>x + 1\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#compound-expression","title":"Compound expression","text":"<pre><code>(x + y) / 100\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#statements","title":"Statements","text":"<p>Statements are roughly equivalent to sentences in natural languages. A\u00a0statement\u00a0forms a complete unit of execution.</p>"},{"location":"computer_science/languages/java/java_basics/#expression-statements","title":"Expression statements","text":"<ul> <li>Assignments</li> <li>Increments operators</li> <li>Method invocation</li> <li>Object creation expression</li> </ul> <pre><code>// assignment statement\naValue = 8933.234;\n// increment statement\naValue++;\n// method invocation statement\nSystem.out.println(\"Hello World!\");\n// object creation statement\nBicycle myBike = new Bicycle();\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#declaration-statement","title":"Declaration statement","text":"<p>Declares a variable.</p> <pre><code>// declaration statement\ndouble aValue = 8933.234;\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#control-flow-statements","title":"Control flow statements","text":"<p>Controls the order in which the statements get executed.</p>"},{"location":"computer_science/languages/java/java_basics/#blocks","title":"Blocks","text":"<p>[!info] A\u00a0block\u00a0is a group of zero or more statements between balanced braces and can be used anywhere a single statement is allowed.</p> <pre><code>class BlockDemo {\n     public static void main(String[] args) {\n          boolean condition = true;\n          if (condition) { **// begin block 1**\n               System.out.println(\"Condition is true.\");\n          } **// end block one**\n          else { **// begin block 2**\n               System.out.println(\"Condition is false.\");\n          } **// end block 2**\n     }\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#control-flow-statements_1","title":"Control flow statements","text":""},{"location":"computer_science/languages/java/java_basics/#if-else-statement","title":"If-else statement","text":"<p>Just like C and C++.</p> <pre><code>if (isMoving)\n     currentSpeed--;\n</code></pre> <pre><code>if (isMoving) {\n    currentSpeed--;\n} else {\n    currentSpeed++;\n}\n</code></pre> <pre><code>if (testscore &gt;= 90) {\n    grade = 'A';\n} else if (testscore &gt;= 80) {\n    grade = 'B';\n} else if (testscore &gt;= 70) {\n    grade = 'C';\n} else if (testscore &gt;= 60) {\n    grade = 'D'\n} else {\n    grade = 'F';\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#switch-statement","title":"Switch statement","text":"<p>Just like C and C++.</p> <pre><code> switch (month) {\n    case 1:  monthString = \"January\";\n        break;\n    case 2:  monthString = \"February\";\n        break;\n    case 3:  monthString = \"March\";\n        break;\n    default: monthString = \"Invalid month\";\n        break;\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#while-and-do-while-statements","title":"While and do-while statements","text":""},{"location":"computer_science/languages/java/java_basics/#while-statements","title":"While statements","text":"<pre><code>while (count &lt; 11) {\n    System.out.println(\"Count is: \" + count);\n    count++;\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#do-while-statements","title":"Do-while statements","text":"<pre><code>do {\n    System.out.println(\"Count is: \" + count);\n    count++;\n} while (count &lt; 11);\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#for-statements","title":"For statements","text":"<pre><code>for(int i=1; i&lt;11; i++){\n    System.out.println(\"Count is: \" + i);\n}\n</code></pre> <pre><code>// infinite loop\nfor ( ; ; ) {\n\n    // your code goes here\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#break-continue-and-return-statement","title":"Break, continue and return statement","text":"<p>An unlabeled\u00a0<code>break</code>\u00a0statement terminates the innermost\u00a0<code>switch</code>,\u00a0<code>for</code>,\u00a0<code>while</code>, or\u00a0<code>do-while</code>\u00a0statement, but a labeled\u00a0<code>break</code>\u00a0terminates an outer statement.</p>"},{"location":"computer_science/languages/java/java_basics/#break-statements","title":"Break statements","text":""},{"location":"computer_science/languages/java/java_basics/#unlabeled-break-statement","title":"Unlabeled <code>break</code> statement","text":"<pre><code>for (i = 0; i &lt; arrayOfInts.length; i++) {\n    if (arrayOfInts[i] == searchfor) {\n        foundIt = true;\n            **break;**\n    }\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#labeled-break-statement","title":"Labeled <code>break</code> statement","text":"<pre><code>search:\n    for (i = 0; i &lt; arrayOfInts.length; i++) {\n        for (j = 0; j &lt; arrayOfInts[i].length; j++) {\n            if (arrayOfInts[i][j] == searchfor) {\n                foundIt = true;\n                break search;\n            }\n        }\n    }\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#continue-statement","title":"Continue statement","text":"<p>The\u00a0<code>continue</code>\u00a0statement skips the current iteration of a\u00a0<code>for</code>,\u00a0<code>while</code>\u00a0, or\u00a0<code>do-while</code>\u00a0loop. The unlabeled form skips to the end of the innermost loop's body and evaluates the\u00a0<code>boolean</code>\u00a0expression that controls the loop.</p>"},{"location":"computer_science/languages/java/java_basics/#unlabeled-continue-statement","title":"Unlabeled continue statement","text":"<pre><code>for (int i = 0; i &lt; max; i++) {\n    // interested only in p's\n    if (searchMe.charAt(i) != 'p')\n        continue; // skips the current iteration during the loop\n    // process p's\n    numPs++;\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#labeled-continue-statement","title":"Labeled continue statement","text":"<pre><code>test:\n    for (int i = 0; i &lt;= max; i++) {\n        int n = substring.length();\n        int j = i;\n        int k = 0;\n        while (n-- != 0) {\n            if (searchMe.charAt(j++) != substring.charAt(k++)) {\n                continue test; // skip an iteration in the outer loop\n            }\n        }\n        foundIt = true;\n            break test; // ends the outermost for loop\n        }\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#labeled-continue-statement_1","title":"Labeled continue statement","text":""},{"location":"computer_science/languages/java/java_basics/#return-statement","title":"Return statement","text":"<p>The\u00a0<code>return</code>\u00a0statement exits from the current method, and control flow returns to where the method was invoked. The\u00a0<code>return</code>\u00a0statement has two forms: one that returns a value, and one that doesn't.</p> <pre><code>return;\n</code></pre> <pre><code>return ++count;\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#classes","title":"Classes","text":""},{"location":"computer_science/languages/java/java_basics/#defining-fields","title":"Defining fields","text":"<p>In general, class declarations can include these components, in order:</p> <ol> <li>Modifiers such as\u00a0public,\u00a0private, and a number of others (However, note that the\u00a0private\u00a0modifier can only be applied to\u00a0Nested Classes.)<ul> <li><code>public</code>\u00a0modifier\u2014the field is accessible from all classes.</li> <li><code>private</code>\u00a0modifier\u2014the field is accessible only within its own class.</li> </ul> </li> <li>The class name, with the initial letter capitalized by convention.</li> <li>The name of the class's parent (super-class), if any, preceded by the keyword\u00a0extends. A class can only\u00a0extend\u00a0(subclass) one parent.</li> <li>A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword\u00a0implements. A class can\u00a0implement\u00a0more than one interface.</li> <li>The class body, surrounded by braces, {}.</li> </ol> <pre><code>public int cadence;\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#defining-methods","title":"Defining methods","text":"<p>More generally, method declarations have six components, in order:</p> <ol> <li>Modifiers such as\u00a0<code>public</code>,\u00a0<code>private</code></li> <li>The return type\u2014the data type of the value returned by the method, or\u00a0<code>void</code>\u00a0if the method does not return a value.</li> <li>The method name\u2014the rules for field names apply to method names as well, but the convention is a little different.</li> <li>The parameter list in parenthesis\u2014a comma-delimited list of input parameters, preceded by their data types, enclosed by parentheses,\u00a0<code>()</code>. If there are no parameters, you must use empty parentheses.</li> <li>An exception list.</li> <li>The method body, enclosed between braces\u2014the method's code, including the declaration of local variables, goes here.</li> </ol> <pre><code>public double calculateAnswer(double wingSpan, int numberOfEngines, double length, double grossTons) {\n    //do the calculation here\n}\n</code></pre> <p>Methods can be overloaded using different signatures</p> <pre><code>public class DataArtist {\n    ...\n    public void draw(String s) {\n        ...\n    }\n    public void draw(int i) {\n        ...\n    }\n    public void draw(double f) {\n        ...\n    }\n    public void draw(int i, double f) {\n        ...\n    }\n}\n</code></pre> <p>You can use a construct called\u00a0varargs\u00a0to pass an arbitrary number of values to a method. You use varargs when you don't know how many of a particular type of argument will be passed to the method. It's a shortcut to creating an array manually</p> <pre><code>public Polygon polygonFrom(Point... corners) {\n    int numberOfSides = corners.length;\n    double squareOfSide1, lengthOfSide1;\n    squareOfSide1 = (corners[1].x - corners[0].x)\n                     * (corners[1].x - corners[0].x) \n                     + (corners[1].y - corners[0].y)\n                     * (corners[1].y - corners[0].y);\n    lengthOfSide1 = Math.sqrt(squareOfSide1);\n\n    // more method body code follows that creates and returns a \n    // polygon connecting the Points\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#providing-constructors-for-the-class","title":"Providing constructors for the class","text":"<p>A class contains constructors that are invoked to create objects from the class blueprint. Constructor declarations look like method declarations\u2014except that they use the name of the class and have no return type.</p> <pre><code>public Bicycle(int startCadence, int startSpeed, int startGear) {\n    gear = startGear;\n    cadence = startCadence;\n    speed = startSpeed;\n}\n</code></pre> <p>Default constructors can also be implemented:</p> <pre><code>public Bicycle() {\n    gear = 1;\n    cadence = 10;\n    speed = 0;\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#examples","title":"Examples","text":"<pre><code>public class Bicycle {\n\n    // **the Bicycle class has**\n    // **three _fields_**\n    public int cadence;\n    public int gear;\n    public int speed;\n\n    // **the Bicycle class has**\n    // **one _constructor_**\n    public Bicycle(int startCadence, int startSpeed, int startGear) {\n        gear = startGear;\n        cadence = startCadence;\n        speed = startSpeed;\n    }\n\n    // **the Bicycle class has**\n    // **four _methods_**\n    public void setCadence(int newValue) {\n        cadence = newValue;\n    }\n\n    public void setGear(int newValue) {\n        gear = newValue;\n    }\n\n    public void applyBrake(int decrement) {\n        speed -= decrement;\n    }\n\n    public void speedUp(int increment) {\n        speed += increment;\n    }\n\n}\n</code></pre> <pre><code>public class MountainBike extends Bicycle {\n\n    // **the MountainBike subclass has**\n    // **one _field_**\n    public int seatHeight;\n\n    // **the MountainBike subclass has**\n    // **one _constructor_**\n    public MountainBike(int startHeight, int startCadence, int startSpeed, int startGear) {\n        super(startCadence, startSpeed, startGear); // build the parent oject\n        seatHeight = startHeight;\n    }   \n\n    // **the MountainBike subclass has**\n    // **one _method_**\n    public void setHeight(int newValue) {\n        seatHeight = newValue;\n    }   \n\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#objects","title":"Objects","text":""},{"location":"computer_science/languages/java/java_basics/#creating-objects","title":"Creating objects","text":"<pre><code>Point originOne = new Point(23, 94);\nRectangle rectOne = new Rectangle(originOne, 100, 200);\nRectangle rectTwo = new Rectangle(50, 100);\n</code></pre> <p>Each of these statements has three parts (discussed in detail below):</p> <ol> <li>Declaration: The code that is left to the <code>=</code> operator\u00a0are variable declarations that associate a variable name with an object type.</li> <li>Instantiation: The\u00a0new\u00a0keyword is a Java operator that creates the object.</li> <li>Initialization: The\u00a0new\u00a0operator is followed by a call to a constructor, which initializes the new object.</li> </ol>"},{"location":"computer_science/languages/java/java_basics/#using-objects","title":"Using objects","text":""},{"location":"computer_science/languages/java/java_basics/#referencing-an-onjects-field","title":"Referencing an onject's field","text":"<pre><code>objectReference.fieldName\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#calling-an-objects-method","title":"Calling an object's method","text":"<pre><code>objectReference.methodName(argumentList);\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#garbage-collector","title":"Garbage collector","text":"<p>Some object-oriented languages require that you keep track of all the objects you create and that you explicitly destroy them when they are no longer needed.</p> <p>Managing memory explicitly is tedious and error-prone. The Java platform allows you to create as many objects as you want (limited, of course, by what your system can handle), and you don't have to worry about destroying them. The Java runtime environment deletes objects when it determines that they are no longer being used. This process is called\u00a0garbage collection.</p>"},{"location":"computer_science/languages/java/java_basics/#this-keyword","title":"This keyword","text":"<p>Within an instance method or a constructor,\u00a0<code>this</code>\u00a0is a reference to the\u00a0current object\u00a0\u2014 the object whose method or constructor is being called. You can refer to any member of the current object from within an instance method or a constructor by using\u00a0<code>this</code>.</p>"},{"location":"computer_science/languages/java/java_basics/#using-this-outside-of-a-constructor","title":"Using this outside of a constructor","text":"<p>Using this keyword inside of class's methods is optional.</p> <pre><code>public class Point {\n    public int x = 0;\n    public int y = 0;\n\n    //constructor\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n</code></pre> <pre><code>public class Point {\n    public int x = 0;\n    public int y = 0;\n\n    //constructor\n    public Point(int a, int b) {\n        x = a;\n        y = b;\n    }\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#using-this-with-a-constructor","title":"Using this with a constructor","text":"<pre><code>public Rectangle() {\n    this(0, 0, 1, 1);\n}\npublic Rectangle(int width, int height) {\n    this(0, 0, width, height);\n    }\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#controlling-access-to-members-of-a-class","title":"Controlling access to members of a class","text":"<p>Access level modifiers determine whether other classes can use a particular field or invoke a particular method.</p> <p>There are two levels of access control: - At the top level, <code>public</code> - At the member level <code>public</code>, <code>private</code>, <code>protected</code></p> <p>Access level</p> <p>If other programmers use your class, you want to ensure that errors from misuse cannot happen. Access levels can help you do this. - Use the most restrictive access level that makes sense for a particular member. Use\u00a0<code>private</code>\u00a0unless you have a good reason not to. - Avoid\u00a0<code>public</code>\u00a0fields except for constants</p> <p>The following table shows the access to members permitted by each modifier:</p> Modifier Class Package Subclass World <code>public</code> Y Y Y Y <code>protected</code> Y Y Y N no modifier Y Y N N <code>private</code> Y N N N"},{"location":"computer_science/languages/java/java_basics/#example","title":"Example","text":"<p>Say:</p> <ul> <li>Package one contains two classes: <code>Alpha</code> and <code>Beta</code>.</li> <li>Package two contains two other classes: <code>AlphaStub</code> and <code>Gamma</code>.</li> <li><code>Alphastub</code> is derived from <code>Alpha</code> class. The following table\u00a0shows where the members of the <code>Alpha</code> class are visible for each of the access modifiers that can be applied to them.</li> </ul> Modifier Alpha Beta Alphasub Gamma <code>public</code> Y Y Y Y <code>protected</code> Y Y Y N no modifier Y Y N N <code>private</code> Y N N N"},{"location":"computer_science/languages/java/java_basics/#class-members-static","title":"Class members - static","text":"<p>To access or call a class member, use the class name followed by the dot operator without going through instanciation.</p>"},{"location":"computer_science/languages/java/java_basics/#class-variable-static-variable","title":"Class variable - static variable","text":"<pre><code>public class Bicycle {\n\n    private int cadence;\n    private int gear;\n    private int speed;\n    private int id;\n\n    private static int numberOfBicycles = 0;\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#class-methods-static-methods","title":"Class methods - static methods","text":"<pre><code>public static int getNumberOfBicycles() {\n    return numberOfBicycles;\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#final-keyword","title":"Final keyword","text":"<p>The\u00a0<code>static</code>\u00a0modifier, in combination with the\u00a0<code>final</code>\u00a0modifier, is also used to define constants. The\u00a0<code>final</code>\u00a0modifier indicates that the value of this field cannot change.</p> <pre><code>static final double PI = 3.141592653589793;\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#full-example","title":"Full example","text":"<pre><code>public class Bicycle {\n\n    private int cadence;\n    private int gear;\n    private int speed;\n\n    private int id;\n\n    private static int numberOfBicycles = 0;\n\n\n    public Bicycle(int startCadence,\n                   int startSpeed,\n                   int startGear) {\n        gear = startGear;\n        cadence = startCadence;\n        speed = startSpeed;\n\n        id = ++numberOfBicycles;\n    }\n\n    public int getID() {\n        return id;\n    }\n\n    public static int getNumberOfBicycles() {\n        return numberOfBicycles;\n    }\n\n    public int getCadence() {\n        return cadence;\n    }\n\n    public void setCadence(int newValue) {\n        cadence = newValue;\n    }\n\n    public int getGear(){\n        return gear;\n    }\n\n    public void setGear(int newValue) {\n        gear = newValue;\n    }\n\n    public int getSpeed() {\n        return speed;\n    }\n\n    public void applyBrake(int decrement) {\n        speed -= decrement;\n    }\n\n    public void speedUp(int increment) {\n        speed += increment;\n    }\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#static-initialization-block","title":"Static initialization block","text":"<p>A\u00a0static initialization block\u00a0is a normal block of code enclosed in braces,\u00a0<code>{ }</code>, and preceded by the\u00a0<code>static</code>\u00a0keyword.</p> <p>A class can have any number of static initialization blocks, and they can appear anywhere in the class body. The runtime system guarantees that static initialization blocks are called in the order that they appear in the source code.</p>"},{"location":"computer_science/languages/java/java_basics/#using-static-initialization-block","title":"Using static initialization block","text":"<pre><code>static {\n    // whatever code is needed for initialization goes here\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#using-a-private-static-method","title":"Using a private static method","text":"<pre><code>class Whatever {\n    public static varType myVar = initializeClassVariable();\n\n    private static varType initializeClassVariable() {\n        // initialization code goes here\n    }\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#initializing-instance-members","title":"initializing instance members","text":""},{"location":"computer_science/languages/java/java_basics/#using-initializer-blocks","title":"Using initializer blocks","text":"<p>Initializer blocks for instance variables look just like static initializer blocks, but without the\u00a0<code>static</code>\u00a0keyword:</p> <pre><code>{\n    // whatever code is needed for initialization goes here\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#using-final-method","title":"Using final method","text":"<pre><code>class Whatever {\n    private varType myVar = initializeInstanceVariable();\n\n    protected final varType initializeInstanceVariable() {\n        // initialization code goes here\n        // final method can not be overriden in the subclass\n        // protected statement ensure that its use is kept to the current class and not to derived ones\n    }\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#nested-classes","title":"Nested classes","text":"<p> Why use nested classes ?</p> <ul> <li>Its a way of logically grouping classes that are logically grouped in one place.</li> <li>Increases encapsulation.</li> <li>Lead to more readable and maintainable code.</li> </ul>"},{"location":"computer_science/languages/java/java_basics/#inner-classes","title":"Inner classes","text":"<p>As with instance methods and variables, an inner class is associated with an instance of its enclosing class and has direct access to that object's methods and fields.</p> <p>Also, because an inner class is associated with an instance, it cannot define any static members itself.</p> <pre><code>class OuterClass {\n    class InnerClass {\n    }\n}\n</code></pre> <p>To instantiate an inner class, you must first instantiate the outer class. Then, create the inner object within the outer object with this syntax:</p> <pre><code>OuterClass outerObject = new OuterClass(); // create the outer class\nOuterClass.InnerClass innerObject = outerObject.new InnerClass(); // create the nested object inside the outer class \n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#static-nested-classes","title":"Static nested classes","text":"<p>A static nested class interacts with the instance members of its outer class (and other classes) just like any other top-level class. In effect, a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.</p> <p>A static nested class is instantiated the same way as a top-level class.</p>"},{"location":"computer_science/languages/java/java_basics/#shadowing","title":"Shadowing","text":"<p>If a declaration of a type (such as a member variable or a parameter name) in a particular scope (such as an inner class or a method definition) has the same name as another declaration in the enclosing scope, then the declaration\u00a0shadows\u00a0the declaration of the enclosing scope.</p> <p>You cannot refer to a shadowed declaration by its name alone. Using the class name or this keyword will help to have a defined scope.</p>"},{"location":"computer_science/languages/java/java_basics/#example_1","title":"Example","text":"<pre><code>public class OuterClass {\n\n    String outerField = \"Outer field\";\n    static String staticOuterField = \"Static outer field\";\n\n    class InnerClass {\n        void accessMembers() {\n            System.out.println(outerField);\n            System.out.println(staticOuterField);\n        }\n    }\n\n    static class StaticNestedClass {\n        void accessMembers(OuterClass outer) {\n            // Compiler error: Cannot make a static reference to the non-static\n            //     field outerField\n            // System.out.println(outerField);\n            System.out.println(outer.outerField);\n            System.out.println(staticOuterField);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Inner class:\");\n        System.out.println(\"------------\");\n        OuterClass outerObject = new OuterClass();\n        OuterClass.InnerClass innerObject = outerObject.new InnerClass();\n        innerObject.accessMembers();\n\n        System.out.println(\"\\nStatic nested class:\");\n        System.out.println(\"--------------------\");\n        StaticNestedClass staticNestedObject = new StaticNestedClass();        \n        staticNestedObject.accessMembers(outerObject);\n\n        System.out.println(\"\\nTop-level class:\");\n        System.out.println(\"--------------------\");\n        TopLevelClass topLevelObject = new TopLevelClass();        \n        topLevelObject.accessMembers(outerObject);                \n    }\n}\n</code></pre>"},{"location":"computer_science/languages/java/java_basics/#interfaces","title":"Interfaces","text":"<p>TODO</p>"},{"location":"computer_science/languages/markdown/markdown_basics/","title":"Markdown basics","text":""},{"location":"computer_science/languages/markdown/markdown_basics/#ressources","title":"Ressources","text":"<p>Emojis list</p> <p>The full list of the supported Markdown emojis can be found here.</p> <p>Adomitions</p> <ul> <li>For Mkdocs</li> </ul>"},{"location":"computer_science/languages/python/about_init_files/","title":"<code>__init__.py</code>","text":"<p>Key Takeaways</p> <ul> <li><code>__init__.py</code> is required to treat directories as packages (in Python 3.3+, it can be empty, but it\u2019s often useful for defining imports).</li> <li>It\u2019s a central file to manage package-level exports and initialization.</li> <li>Properly structuring <code>__init__.py</code> helps keep packages modular, readable, and easy to import.</li> </ul> <p>These tips are linked to python wheels.</p> <p>Here's a breakdown of its purpose and behavior in the context of creating a Python package.</p>"},{"location":"computer_science/languages/python/about_init_files/#1-defining-a-package","title":"1. Defining a Package","text":"<p>Any directory containing a file named <code>__init__.py</code> is treated as a Python package.  This file signals to Python that the directory should be treated as a package, making it possible to import modules and sub-packages within that directory.</p>"},{"location":"computer_science/languages/python/about_init_files/#2-setting-up-imports-and-namespaces","title":"2. Setting Up Imports and Namespaces","text":"<p>The <code>__init__.py</code> file allows you to control what\u2019s exposed when someone imports the package. For example:</p> <pre><code># mypackage/__init__.py\nfrom .module1 import MyClass\nfrom .module2 import my_function\n</code></pre> <p>With this setup, importing the package (<code>import mypackage</code>) will expose <code>MyClass</code> and <code>my_function</code> directly under <code>mypackage</code>. You can also use <code>__all__</code> to define the public API of the package, which restricts what\u2019s available when using <code>from package import *</code>.</p>"},{"location":"computer_science/languages/python/about_init_files/#3-code-execution","title":"3. Code Execution","text":"<p>The <code>__init__.py</code> file can contain executable code. This means you can initialize variables, configure logging, or perform setup when the package is imported.</p> <p>Be careful with heavy computations or I/O in <code>__init__.py</code>, as it can slow down imports.</p>"},{"location":"computer_science/languages/python/about_init_files/#4-organizing-sub-packages","title":"4. Organizing Sub-packages","text":"<p>Packages can be nested within other packages. By using <code>__init__.py</code> files in sub-directories, you can create hierarchical structures, such as <code>mypackage.subpackage.module</code>. Each level in the hierarchy requires its own <code>__init__.py</code> file to be considered part of the package structure.</p>"},{"location":"computer_science/languages/python/about_init_files/#example-structure","title":"Example Structure","text":"<p>Here's an example of a package structure with <code>__init__.py</code> files:</p> <pre><code>mypackage/\n\u2502\n\u251c\u2500\u2500 __init__.py       # Initializes the package\n\u251c\u2500\u2500 module1.py        # Contains some classes or functions\n\u251c\u2500\u2500 module2.py\n\u2514\u2500\u2500 subpackage/\n    \u251c\u2500\u2500 __init__.py   # Initializes the subpackage\n    \u2514\u2500\u2500 submodule.py\n</code></pre> <p>In the above structure, each <code>__init__.py</code> file can be tailored to set up the imports, initialize values, and control the public API for each package or sub-package.</p> <p>Here\u2019s a more detailed look.</p>"},{"location":"computer_science/languages/python/about_init_files/#content-of-mypackage__init__py","title":"Content of <code>mypackage/__init__.py</code>","text":"<p>This file serves as the entry point for the <code>mypackage</code> package, allowing control over what is available to users when they import <code>mypackage</code>.</p> <p>Here\u2019s an example of what <code>mypackage/__init__.py</code> might look like:</p> <pre><code># Import specific functions or classes from modules within the package\nfrom .module1 import MyClass\nfrom .module2 import my_function\n\n# Import specific functions or classes from subpackage\nfrom .subpackage.submodule import SubClass, sub_function\n# Optionnally from .subpackage.submodule import * imports every component defined in the submodule subpackage (no need to repeat function names)\n\n# Optionally define an __all__ variable to control what\u2019s accessible when using `from mypackage import *`\n__all__ = [\"MyClass\", \"my_function\"]\n\n# You could also add some package-level variables or configuration settings if needed\nVERSION = \"1.0.0\"\n</code></pre> <p>With this setup:</p> <ul> <li><code>from mypackage import MyClass</code> or <code>from mypackage import my_function</code> works directly, without needing to specify the individual module.</li> <li><code>__all__</code> restricts what is exported during a <code>from mypackage import *</code> operation, so only <code>MyClass</code> and <code>my_function</code> would be imported.</li> <li><code>VERSION</code> is a package-level constant that can be accessed with <code>mypackage.VERSION</code>.</li> </ul>"},{"location":"computer_science/languages/python/about_init_files/#content-of-mypackagesubpackage__init__py","title":"Content of <code>mypackage/subpackage/__init__.py</code>","text":"<p>This file initializes <code>mypackage.subpackage</code>, potentially exposing elements within the sub-package to make them available directly through <code>subpackage</code>.</p> <p>Here\u2019s an example of <code>mypackage/subpackage/__init__.py</code>:</p> <pre><code># Import elements from submodule\nfrom .submodule import SubClass, sub_function\n\n# Control what\u2019s accessible when using `from mypackage.subpackage import *`\n__all__ = [\"SubClass\", \"sub_function\"]\n</code></pre> <p>With this setup:</p> <ul> <li>Users can import directly from <code>mypackage.subpackage</code> without specifying the submodule: <code>from mypackage.subpackage import SubClass</code>.</li> <li><code>__all__</code> controls what is accessible in case of wildcard imports (<code>*</code>).</li> </ul>"},{"location":"computer_science/languages/python/about_init_files/#sample-content-of-mypackagemodule1py-module2py-and-subpackagesubmodulepy","title":"Sample Content of <code>mypackage/module1.py</code>, <code>module2.py</code>, and <code>subpackage/submodule.py</code>","text":"<p>For completeness, here\u2019s a quick idea of what the individual modules might contain:</p> <p><code>mypackage/module1.py</code></p> <pre><code>class MyClass:\n    def __init__(self):\n        print(\"MyClass initialized\")\n\ndef helper_function():\n    print(\"Helper function in module1\")\n</code></pre> <p><code>mypackage/module2.py</code></p> <pre><code>def my_function():\n    print(\"Function in module2\")\n</code></pre> <p><code>mypackage/subpackage/submodule.py</code></p> <pre><code>class SubClass:\n    def __init__(self):\n        print(\"SubClass initialized\")\n\ndef sub_function():\n    print(\"Function in submodule\")\n</code></pre>"},{"location":"computer_science/languages/python/about_init_files/#usage-example","title":"Usage Example","text":"<p>Once structured, the package can be imported and used as follows:</p> <pre><code># Import from the main package ()\n# Good for users, since they do not have to know the structure of the library\nfrom mypackage import MyClass, my_function\n\n# Import from the sub-package (recommended for internal imports)\n# Users may not have to know the package strucure of the library\nfrom mypackage.subpackage import SubClass, sub_function\n\n# Import every symbol (not recommended because it can cause undefined behaviors with shadowed names)\nfrom mypackage import *\n\n# Import the library in a namespace\n# Recommended because it specifies the namespace and avoids name conflicts\n# Functions has to be called with mp. before function / class names\nimport mypackage as mp\n\n# Using the imports\ninstance = (mp.)MyClass()\nmy_function()\n\nsub_instance = (mp.)SubClass()\nsub_function()\n</code></pre>"},{"location":"computer_science/languages/python/about_init_files/#refs","title":"Refs","text":"<p>Refs</p> <p>Python Packaging User Guide</p>"},{"location":"computer_science/languages/python/environments/","title":"Python environment","text":""},{"location":"computer_science/languages/python/environments/#introduction","title":"Introduction","text":"<p>Python is an [[#Interpreted languages]], meaning it needs an environment to work properly. Other programming languages can require a compilation phase to transform the code in binary instructions for the computer. Theses are called the [[#Compiled languages]]. There are also other programming languages execution methods that will not be detailed here (JIT, semi-interpreted, ...).</p> <p>There are mainly 3 ways to create an environment for Python:</p> <ul> <li>Using the base (global) environment</li> <li>Using a virtual environment</li> <li>Using an anaconda environment</li> </ul> <p>Each methods has its features and drawbacks, which will be detailed below. The choice depends largely on the use case.</p>"},{"location":"computer_science/languages/python/environments/#executing-python-code","title":"Executing Python code","text":"<p>Python files are simply text files with a <code>.py</code> extension. They can be executed in a terminal / shell / console called [[#Command-Line Interface (CLI)]] on your system.</p> <p>There are several command-line interfaces to be aware of:</p> <p>For windows:</p> <ol> <li>Command Prompt (cmd): The traditional Windows command-line interface.</li> <li>PowerShell: A more powerful and modern shell with scripting capabilities.</li> <li>Windows Subsystem for Linux (WSL): Allows running a Linux distribution alongside Windows. Once installed, you can use Linux terminals like <code>bash</code>.</li> </ol> <p>For Linux:</p> <ol> <li>Bash: The default shell for most Linux distributions.</li> <li>GNOME Terminal: Commonly used on systems running the GNOME desktop environment.</li> <li>Konsole: The default terminal emulator for the KDE desktop environment.</li> <li>xterm: A simple and widely used terminal emulator in X Window System.</li> </ol> <p>For macOS</p> <ol> <li>Terminal: The default terminal emulator for macOS, which uses the Bash shell by default.</li> <li>iTerm2: A popular alternative to the default Terminal app, providing additional features and customization options.</li> <li>Zsh (with Oh My Zsh): Zsh is an alternative shell to Bash and can be used with macOS. Many users enhance it further using the Oh My Zsh framework.</li> </ol> <p>Code can also be executed in an  (Spyder, PyCharm, VSCode, ...).</p> <p>In any of these scenarios, you need an [[#Integrated Development Environment (IDE)]] to be able to execute Python code.</p>"},{"location":"computer_science/languages/python/environments/#how-to-call-python","title":"How to call Python ?","text":"<p>The Python base environment is the one that comes installed with your Python distribution.</p> <ul> <li>You can find the different Python versions on the official website.</li> <li>You can install multiple versions of Python on your system and be able to use them only if its a different major version. (3.9.1 can not be installed if 3.9.4 is already installed, but 3.11 can).</li> </ul> <p>Installing a Python version will lead to a clean, empty from libraries environment. Therefore you can not use any external librairies (numpy, scipy, matplotlib, ...). You need first to install librairies.</p> <p>Python can only be called from the console if</p> <ol> <li>You specify the absolute path</li> <li>You add Python executable to the PATH variables of your computer</li> </ol> <p>How to call Python ?</p> <p>An example to get the Python version.</p> <ul> <li>If you have a single Python version installed, use:</li> <li><code>python --version</code> (often)</li> <li><code>python3 --version</code> (if <code>python</code> is not found)</li> <li>if <code>python</code> is still not found, it means that it is not installed on your system or that you have not added it to the PATH</li> <li>If you have multiple Python distributions installed, use the [[#py launcher]] (must be installed):</li> <li><code>py -3.9 -m --version</code> (you can specify the version you need with a minus before and only two numbers)</li> </ul>"},{"location":"computer_science/languages/python/environments/#python-base-environment","title":"Python base environment","text":"<p>Using the Python base environment typically means working with the global Python installation on your system without creating a virtual environment. Here are the general steps for using the Python base environment:</p>"},{"location":"computer_science/languages/python/environments/#1-check-python-installation","title":"1. Check Python Installation","text":"<p>Ensure that Python is installed on your system. Open a terminal or command prompt and type:</p> <pre><code>python --version\n</code></pre> <p>This should display the version number of the installed Python interpreter.</p>"},{"location":"computer_science/languages/python/environments/#2-create-and-navigate-to-your-project-directory","title":"2. Create and Navigate to Your Project Directory","text":"<p>Create a directory for your project and navigate to it using the <code>cd</code> command:</p> <pre><code>mkdir my_project\ncd my_project\n</code></pre>"},{"location":"computer_science/languages/python/environments/#3-write-your-python-code","title":"3. Write Your Python Code","text":"<p>Create a Python script or write your Python code directly in a file within the project directory. You can use any text editor or integrated development environment (IDE) of your choice.</p> <p>For example, create a file named <code>my_script.py</code> and add the following code:</p> <pre><code>print(\"Hello, Python base environment!\")\n</code></pre>"},{"location":"computer_science/languages/python/environments/#4-run-your-python-script","title":"4. Run Your Python Script","text":"<p>Run your Python script from the terminal or command prompt:</p> <pre><code>python my_script.py\n</code></pre> <p>This will execute your Python script, and you should see the output.</p>"},{"location":"computer_science/languages/python/environments/#important-notes","title":"Important Notes","text":"<p>Warning</p> <ul> <li>When working with the Python base environment, you are using the global Python installation on your system. Any packages you install using <code>pip</code> will be installed globally.</li> <li>It's recommended to use virtual environments for project-specific dependencies to avoid conflicts and ensure better isolation between projects.</li> <li>The commands used (<code>python</code> and <code>pip</code>) refer to the global Python installation. If you have multiple Python versions installed, you may need to specify the version (e.g., <code>python3</code>, <code>pip3</code>) to ensure you're using the desired interpreter.</li> <li>Keep in mind that installing packages globally may require administrative (sudo) permissions on Linux/macOS systems.</li> </ul> <p>Note</p> <p>While using the Python base environment is straightforward, virtual environments are generally preferred for Python development to manage dependencies on a per-project basis. Virtual environments provide better isolation and avoid potential conflicts between different projects or system-wide Python installations.</p>"},{"location":"computer_science/languages/python/environments/#python-virtual-environment","title":"Python virtual environment","text":"<p>Using a Python virtual environment is a good practice for managing project-specific dependencies. Here are the general steps for creating and using a virtual environment in Python:</p>"},{"location":"computer_science/languages/python/environments/#1-install-virtualenv-if-not-already-installed","title":"1. Install <code>virtualenv</code> (if not already installed)","text":"<p>If you don't have the <code>virtualenv</code> package installed, you can install it using the following command:</p> <pre><code>pip install virtualenv\n</code></pre>"},{"location":"computer_science/languages/python/environments/#2-create-a-virtual-environment","title":"2. Create a Virtual Environment","text":"<p>Navigate to your project directory in the terminal or command prompt and run the following command to create a virtual environment named \"venv_spotfunk\":</p>"},{"location":"computer_science/languages/python/environments/#for-windows","title":"For Windows","text":"<pre><code>python -m venv venv_spotfunk\n</code></pre>"},{"location":"computer_science/languages/python/environments/#for-linuxmacos","title":"For Linux/macOS","text":"<pre><code>python3 -m venv venv_spotfunk\n</code></pre>"},{"location":"computer_science/languages/python/environments/#3-activate-the-virtual-environment","title":"3. Activate the Virtual Environment","text":"<p>Activate the virtual environment. The activation commands differ based on the operating system:</p>"},{"location":"computer_science/languages/python/environments/#for-windows_1","title":"For Windows","text":"<pre><code>./venv_spotfunk/Scripts/activate\n</code></pre>"},{"location":"computer_science/languages/python/environments/#for-linuxmacos_1","title":"For Linux/macOS","text":"<pre><code>source venv_spotfunk/bin/activate\n</code></pre> <p>After activation, your command prompt or terminal prompt should change, indicating that you are now working within the virtual environment.</p>"},{"location":"computer_science/languages/python/environments/#4-use-python-and-install-packages","title":"4. Use Python and Install Packages","text":"<p>Now that you are in the virtual environment, any Python-related commands and package installations will be isolated to this environment. For example:</p> <ul> <li> <p>Run Python:</p> <pre><code>python\n</code></pre> </li> <li> <p>Install packages using <code>pip</code>:</p> <pre><code>pip install package_name\n</code></pre> </li> </ul>"},{"location":"computer_science/languages/python/environments/#5-deactivate-the-virtual-environment","title":"5. Deactivate the Virtual Environment","text":"<p>When you're done working in the virtual environment, you can deactivate it:</p> <pre><code>deactivate\n</code></pre>"},{"location":"computer_science/languages/python/environments/#important-notes_1","title":"Important Notes","text":"<p>Warning</p> <ul> <li>Always activate the virtual environment before working on your project to ensure you're using the isolated environment.</li> <li>Include the virtual environment directory (<code>venv</code> in this case) in your project's <code>.gitignore</code> file or equivalent, so you don't accidentally commit it to version control.</li> <li>Each project should have its own virtual environment to avoid conflicts between different projects.</li> <li>The virtual environment needs to be reactivated each time you start a new terminal or command prompt session.</li> </ul> <p>Note</p> <p>Using virtual environments is a standard practice in Python development to manage dependencies and ensure project-specific consistency. It helps keep your project isolated and reduces potential conflicts between different projects or system-wide Python installations.</p>"},{"location":"computer_science/languages/python/environments/#anaconda-environment","title":"Anaconda environment","text":"<p>Anaconda is a popular distribution for Python and other programming languages commonly used in data science and scientific computing. It includes many pre-installed libraries and tools to simplify the setup for data-related tasks. Here are the steps to use Anaconda with Python:</p>"},{"location":"computer_science/languages/python/environments/#1-install-anaconda","title":"1. Install Anaconda","text":"<p>Visit the Anaconda website and download the Anaconda distribution suitable for your operating system (Windows, macOS, or Linux). Follow the installation instructions provided on the website.</p>"},{"location":"computer_science/languages/python/environments/#2-open-anaconda-navigator-optional","title":"2. Open Anaconda Navigator (Optional)","text":"<p>Anaconda Navigator is a graphical interface that comes with the Anaconda distribution. You can use it to manage environments, install packages, and launch applications. After installation, you can open Anaconda Navigator from the Start menu (Windows) or the Applications folder (macOS).</p>"},{"location":"computer_science/languages/python/environments/#3-create-and-manage-environments","title":"3. Create and Manage Environments","text":"<p>One of the key features of Anaconda is the ability to create and manage isolated environments. Environments allow you to install specific packages for different projects without interfering with each other. You can create a new environment using the following command in the terminal or command prompt:</p> <pre><code>conda create --name myenv\n</code></pre> <p>Replace <code>myenv</code> with the desired name for your environment. You can also specify the Python version and additional packages during the environment creation.</p> <p>Activate the environment:</p> <ul> <li>On Windows:   <pre><code>conda activate myenv\n</code></pre></li> <li>On macOS/Linux:   <pre><code>source activate myenv\n</code></pre></li> </ul>"},{"location":"computer_science/languages/python/environments/#4-install-packages","title":"4. Install Packages","text":"<p>Once you have activated your environment, you can use <code>conda install</code> to install packages. For example, to install a package named <code>numpy</code>, you can run:</p> <pre><code>conda install numpy\n</code></pre>"},{"location":"computer_science/languages/python/environments/#5-use-jupyter-notebooks-optional","title":"5. Use Jupyter Notebooks (Optional)","text":"<p>Anaconda comes with Jupyter Notebooks, a popular interactive computing environment. You can launch Jupyter Notebooks from the Anaconda Navigator or directly from the terminal:</p> <pre><code>jupyter notebook\n</code></pre> <p>This will open a web browser with the Jupyter Notebook interface, allowing you to create and run Python notebooks.</p>"},{"location":"computer_science/languages/python/environments/#6-update-anaconda-and-packages","title":"6. Update Anaconda and Packages","text":"<p>Regularly update Anaconda and the installed packages to benefit from the latest features and bug fixes. You can use the following commands:</p> <pre><code>conda update conda\nconda update anaconda\n</code></pre> <p>To update a specific package:</p> <pre><code>conda update package_name\n</code></pre>"},{"location":"computer_science/languages/python/environments/#7-deactivate-the-environment","title":"7. Deactivate the Environment","text":"<p>When you're done working in an environment, deactivate it using the following command:</p> <ul> <li>On Windows:   <pre><code>conda deactivate\n</code></pre></li> <li>On macOS/Linux:   <pre><code>source deactivate\n</code></pre></li> </ul> <p>These are the basic steps to get started with Anaconda and Python. Anaconda provides a convenient environment for data science and scientific computing, making it easier to manage dependencies and create reproducible environments for your projects.</p>"},{"location":"computer_science/languages/python/environments/#other-environments","title":"Other environments","text":"<p>Apart from the base Python environment, virtual environments, and Anaconda environments, there are other environments or tools that developers and data scientists use for managing Python environments. Some of them include:</p>"},{"location":"computer_science/languages/python/environments/#1-pipenv","title":"1. Pipenv:","text":"<p>Pipenv is a tool for managing Python environments, dependencies, and packaging in a single file. It aims to bring the best of all packaging worlds (bundled, required, and development) to the Python world.</p>"},{"location":"computer_science/languages/python/environments/#2-poetry","title":"2. Poetry:","text":"<p>Poetry is a modern dependency management and packaging tool for Python. It simplifies and centralizes the configuration of your projects, including dependency management, packaging, and publishing.</p>"},{"location":"computer_science/languages/python/environments/#5-pyenv","title":"5. pyenv:","text":"<p>pyenv allows you to easily install and switch between multiple versions of Python. It's particularly useful for managing different Python versions on your system.</p>"},{"location":"computer_science/languages/python/environments/#6-pip-package-installer","title":"6. pip (package installer):","text":"<p>While not an environment management tool itself, the <code>pip</code> package installer can be used with <code>requirements.txt</code> files to specify and install dependencies for a project. Tools like <code>pip-tools</code> can help manage dependencies more efficiently.</p> <p>These tools offer various features and approaches to creating, managing, and isolating Python environments. The choice of which one to use depends on your specific needs and preferences. Some developers prefer the simplicity of <code>venv</code>, while others may choose more feature-rich tools like <code>Pipenv</code> or <code>Poetry</code> for managing dependencies and packaging. Conda is often favored in data science and scientific computing due to its ability to handle non-Python libraries and its cross-platform support.</p>"},{"location":"computer_science/languages/python/environments/#definitions","title":"Definitions","text":""},{"location":"computer_science/languages/python/environments/#interpreted-languages","title":"Interpreted languages","text":"<p>Info</p> <p>An interpreted language is a type of programming language in which the source code is not directly translated into machine code before execution. Instead, an interpreter reads and executes the code line by line or statement by statement at runtime. This means that the source code is translated and executed on the fly, without the need for a separate compilation step. In an interpreted language, the interpreter interprets the code and executes the instructions directly, which can make the development process more flexible and interactive. Developers can write and test code quickly without the need to compile the entire program before running it. However, interpreted languages may have slightly slower execution compared to languages that are compiled to machine code.  Examples of interpreted languages include Python, JavaScript, Ruby, and PHP. These languages are often used for scripting, rapid prototyping, and applications where development speed and ease of use are prioritized over raw performance.</p>"},{"location":"computer_science/languages/python/environments/#compiled-languages","title":"Compiled languages","text":"<p>Info</p> <p>A compiled language is a type of programming language where the source code is translated into machine code or an intermediate code by a compiler before execution. The compiler analyzes the entire source code and translates it into a form that can be executed by the computer's hardware. Unlike interpreted languages, compiled languages undergo a separate compilation step before running the program. This compilation process generates an executable file or another form of code that is specific to the target machine's architecture. Once the compilation is complete, the resulting binary file can be executed without the need for the original source code or the presence of the compiler. Compiled languages often provide better performance at runtime compared to interpreted languages because the code has already been translated into machine code optimized for the target platform. Examples of compiled languages include C, C++, Java (which is compiled to bytecode and then interpreted by the Java Virtual Machine), and Rust. These languages are often used for system-level programming, application development, and scenarios where performance is a critical factor.</p>"},{"location":"computer_science/languages/python/environments/#command-line-interface-cli","title":"Command-Line Interface (CLI)","text":"<p>!!! info Command-Line Interface (CLI) A Command-Line Interface (CLI) is a text-based interface used for interacting with software and computer systems by entering commands into a text terminal or console. Users interact with the system by typing commands, and the system responds with textual output. CLI is an alternative to Graphical User Interfaces (GUIs), which use graphical elements like buttons and windows for user interaction. Key characteristics of command-line interfaces include</p> <ol> <li>Text Commands: Users input commands by typing text-based instructions. Commands often consist of a command name followed by parameters or options.</li> <li>Scripting: CLIs are conducive to scripting, allowing users to automate repetitive tasks by creating scripts that execute sequences of commands.</li> <li>Resource Efficiency: CLIs typically use fewer system resources than GUIs, making them suitable for use on servers, embedded systems, and environments where resource efficiency is crucial.</li> <li>Scriptable and Automatable: CLIs are scriptable, meaning users can create scripts to automate tasks and perform complex operations.</li> <li>Remote Access: CLIs are well-suited for remote access and administration, allowing users to connect to a remote system over a network and execute commands.</li> <li>Learning Curve: For some users, CLIs may have a steeper learning curve compared to GUIs, as users need to memorize commands and their syntax. However, they often provide more control and efficiency once mastered.</li> </ol> <p>Examples of command-line interfaces include:</p> <ul> <li>Command Prompt (cmd): Found on Windows systems, it provides a text-based interface for entering commands.</li> <li>Terminal: Found on Unix-like systems (Linux and macOS), it allows users to interact with the shell and execute commands.</li> <li>PowerShell: On Windows, it is a more advanced and scriptable shell and command language.</li> <li>Bash: The default shell on many Unix-like systems, including Linux and macOS.</li> </ul> <p>Users can perform various tasks through the command line, such as file manipulation, system configuration, software installation, and more. CLIs remain popular in many technical fields, including software development, system administration, and networking, where precise control and automation are essential.</p>"},{"location":"computer_science/languages/python/environments/#integrated-development-environment-ide","title":"Integrated Development Environment (IDE)","text":"<p>!!! info Integrated Development Environment (IDE) An IDE, or Integrated Development Environment, is a software application that provides comprehensive facilities to programmers for software development. It typically combines a code editor, a debugger, and a build automation tool, along with other features such as version control integration, project management, and collaboration tools. The primary purpose of an IDE is to streamline and enhance the process of writing, testing, and debugging code. Key components of an IDE include:</p> <ol> <li>Code Editor: A text editor specifically designed for writing and editing source code. It often includes features like syntax highlighting, code completion, and error checking.</li> <li>Debugger: A tool for inspecting and debugging code. It allows developers to set breakpoints, step through code execution, and examine variable values during runtime.</li> <li>Compiler/Interpreter: Some IDEs include built-in support for compiling and running code. For interpreted languages, they may include an interpreter or provide seamless integration with an external interpreter.</li> <li>Build Automation: Facilities for automating the process of building and compiling code into executable files or deployable artifacts.</li> <li>Version Control Integration: Integration with version control systems (e.g., Git, SVN) to manage source code changes and collaboration among developers.</li> <li>Project Management: Tools for organizing and managing project files, dependencies, and configurations.</li> <li>User Interface: A user-friendly interface that brings together all the development tools and features into a cohesive environment.</li> </ol> <p>Popular IDEs include:</p> <ul> <li>Visual Studio (Visual Studio Code): Developed by Microsoft, Visual Studio is a comprehensive IDE for various languages, and Visual Studio Code is a lightweight, extensible code editor.</li> <li>Eclipse: An open-source IDE primarily used for Java development but supports various languages through plugins.</li> <li>IntelliJ IDEA: A popular Java IDE developed by JetBrains, with support for other languages through plugins.</li> <li>PyCharm: A Python-specific IDE developed by JetBrains.</li> <li>Xcode: Apple's IDE for macOS and iOS development.</li> </ul> <p>IDEs significantly enhance productivity by providing a centralized and efficient environment for software development, allowing developers to manage various aspects of the development lifecycle within a single application.</p>"},{"location":"computer_science/languages/python/environments/#py-launcher","title":"py launcher","text":"<p>Info</p> <p>The <code>py</code> launcher is a tool that allows you to manage and launch Python versions on Windows. If it's installed, you can use it from the command prompt or PowerShell to run Python scripts or interact with different Python versions. Here's how you can call the <code>py</code> launcher:</p> <ol> <li> <p>Open the Command Prompt or PowerShell on your Windows system.</p> </li> <li> <p>To run a Python script using the default Python version, you can simply use:</p> <pre><code>py script.py\n</code></pre> </li> </ol> <p>Replace <code>script.py</code> with the name of your Python script.</p> <ol> <li> <p>If you want to specify a particular Python version, you can use the <code>-X</code> option followed by the version number, like this:</p> <pre><code>py -X.Y script.py\n</code></pre> </li> </ol> <p>Replace <code>X.Y</code> with the desired Python version, such as <code>3.8</code>.</p> <p>If the <code>py</code> launcher is not installed or not available, you can still run Python scripts by using the full path to the Python executable. The default installation path for Python on Windows is usually something like:</p> <pre><code>C:\\Users\\YourUsername\\AppData\\Local\\Programs\\Python\\Python3X\\python.exe\n</code></pre> <p>Replace <code>YourUsername</code> with your actual username, and <code>X</code> with the specific Python version number.</p> <p>Alternatively, you can add the Python installation directory to the system's PATH environment variable, which allows you to run <code>python</code> directly from the command prompt without specifying the full path. Once added to the PATH, you can use:</p> <pre><code>python script.py\n</code></pre> <p>Make sure to adjust the commands based on your Python version and script filename.</p> <p>To check if the <code>py</code> launcher is installed, you can try running <code>py --version</code> from the command prompt or PowerShell. If it's not installed, you can install it by downloading and installing the latest version of Python from the official Python website (https://www.python.org/downloads/), making sure to check the option that says \"Add Python to PATH\" during installation.</p>"},{"location":"computer_science/languages/python/wheels/","title":"Wheels","text":""},{"location":"computer_science/languages/python/wheels/#overview","title":"Overview","text":"<p>What is this?</p> <p>Wheels are a component of the Python ecosystem that helps to make package installs\u00a0just work.    They allow for faster installations and more stability in the package distribution process.   It is a type of built distribution (it comes in a ready to install form).</p> <p>Strengths</p> <ul> <li>Faster <code>pip install</code> installation process  <ul> <li>Smaller in size than source distributions</li> <li>Avoids the intermediate step of building packages off the source distribution   </li> </ul> </li> <li>Avoids missing headers errors since building source distributions requires OpenSSL development headers installed</li> <li>No need for a compiler</li> <li>Provide consistency</li> <li>Can be used inside other repositories when the package is private or unreleased as dependencies in <code>requirements.txt</code>, therefore allowing to build the dependent software.</li> <li>Provides a fixed snapshot of the Python library in time.</li> </ul> <p>Weaknesses</p> <ul> <li>Must be built for each platform by the developer: each package will provide a source and / or a wheel distribution (per platform) of the package.</li> <li>If broken, then a full source build is required</li> <li>Only for deployment</li> </ul>"},{"location":"computer_science/languages/python/wheels/#how-wheel-is-working","title":"How wheel is working","text":""},{"location":"computer_science/languages/python/wheels/#what-is-python-wheel","title":"What is Python wheel ?","text":"<p>Python wheel is a <code>.zip</code> file containing the built source code for a python package.</p>"},{"location":"computer_science/languages/python/wheels/#naming-conventions","title":"Naming conventions","text":"<p>Info</p> <p>Packages names follows the rule <code>{dist}-{version}(-{build})?-{python}-{abi}-{platform}.whl</code></p> <p>Where:</p> <ul> <li><code>dist</code> is the package name</li> <li><code>version</code> is the installed package version <code>X.Y.Z</code></li> <li><code>python</code> is the python tag, denoting the python implementation</li> <li><code>abi</code> is the ABI tag (Application Binary Interface)</li> <li><code>platform</code> is the platform tag, containing the operating system, the SDK and the instruction set of architectures</li> </ul> <p><code>Universal wheel</code> are often pure python packages that does not require a specific ABI or specific CPU architecture and support Python 2 and 3 versions. <code>Pure python wheels</code> support a specific major Python version.</p> <p>Universal Wheel</p> <p>In the following wheel name:</p> <pre><code>chardet-3.0.4-py2.py3-none-any.whl\n</code></pre> <p>The package is called <code>chardet</code> version <code>3.0.4</code>. It supports both python 2 and 3, does not require an Application Binary Interface and supports any platform.   It is a <code>universal wheel</code> since any Python version is supported.</p> <p>Pure Wheel</p> <p>In the following wheel name:</p> <pre><code>Jinja2-3.0.0a1-py3-none-any.whl\n</code></pre> <p>The package is called <code>Jinja2</code> version <code>3.0.0a1</code>. It only supports python 3, does not require an Application Binary Interface and supports any platform.   It is a <code>pure wheel</code> since only one Python version is supported.</p> <p>Platform Wheel: manylinux tag</p> <p>In the following wheel name:</p> <pre><code>pandas-1.0.3-cp37-cp37m-manylinux1_x86_64.whl\npandas-1.0.3-cp37-cp37m-manylinux1_i686.whl\n</code></pre> <p>The package is called <code>pandas</code> version <code>1.0.3</code>. It only supports C Python 3.7, require an Application Binary Interface (for linux distributions) and supports <code>x86-64</code> and <code>i686</code> architectures.   <code>manylinux</code> distributions use docker images to build sources for each linux distribution.    There are multiple variants: <code>manylinux1</code>, <code>manylinux2010</code>, <code>manylinux2024</code> supporting different linux distros.</p>"},{"location":"computer_science/languages/python/wheels/#pip-commands","title":"PIP Commands","text":""},{"location":"computer_science/languages/python/wheels/#install-only-using-source-distribution","title":"Install only using source distribution","text":"<p>To force the use of a source distribution, use the flag <code>python -m pip install --no-binary=:all: cryptography</code>. Using <code>:all:</code> will enable this feature for all the dependencies of the project.</p>"},{"location":"computer_science/languages/python/wheels/#install-only-using-the-binary-wheel-distribution","title":"Install only using the binary / wheel distribution","text":"<p>To force the use of the wheel distributions, use the flag <code>python -m pip install -only-binary=cryprography cryptography</code>. Using the package name will only force the use of a wheel for the <code>cryptography</code> package.</p>"},{"location":"computer_science/languages/python/wheels/#do-not-install-or-download-a-cached-version","title":"Do not install or download a cached version","text":"<p><code>pip download -no-cache numba</code> will download the version from the remote automatically.</p>"},{"location":"computer_science/languages/python/wheels/#building-a-pure-python-wheel","title":"Building a pure Python wheel","text":"<ol> <li>Make sure to have <code>setuptools</code> and <code>wheel</code> installed on a given python version</li> <li>Build a pure python wheel using <code>python setup.py sdist bdist_wheel</code>. It will create both a source distribution and a wheel distribution in the <code>dist</code> current directory.</li> </ol>"},{"location":"computer_science/languages/python/wheels/#building-a-platform-wheel","title":"Building a platform wheel","text":"<ol> <li>On mac OS, make sure to have command line dev tools available (<code>$ xcode-select --install</code>). On Windows, install the C++ build tools via Microsoft's website. On linux, make sure to have a compiler installed (gcc or g++).</li> <li>Clone the project and build it using <code>python setup.py bdist_wheel</code></li> <li>It compiles and builds</li> </ol>"},{"location":"computer_science/languages/python/wheels/#building-manylinux-wheel","title":"Building manylinux wheel","text":"<p>To make the built distribution valid across a range of Linux clients, build using manylinux tag.</p> <p>Two solutions here:</p> <ol> <li>Run docker and mound the drive containing the repo</li> <li>Use a CI/CD dev tool to build automatically the distribution</li> </ol> <p>Here are the steps for the docker build:</p> <ol> <li>Clone the project and cd into it</li> <li> <p>Define a few shell variables for the\u00a0<code>manylinux1</code>\u00a0Docker image</p> <pre><code>DOCKER_IMAGE='quay.io/pypa/manylinux1_x86_64'\nPLAT='manylinux1_x86_64'\n</code></pre> </li> <li> <p>Pull the Docker image and run the wheel-builder script within the container</p> <pre><code>docker pull \"$DOCKER_IMAGE\"\ndocker container run -t --rm \\\n      -e PLAT=$PLAT \\\n      -v \"$(pwd)\":/io \\\n      \"$DOCKER_IMAGE\" /io/travis/build-wheels.sh\n</code></pre> </li> </ol> <p>PyPA example repository on GitHub python-manylinux-demo</p>"},{"location":"computer_science/languages/python/wheels/#build-a-wheel-from-a-repository","title":"Build a wheel from a repository","text":"<ol> <li>Clone the repo</li> <li>Change directory to the root of the project</li> <li><code>python setup.py sdist bdist_wheel</code> (optionally specify where to place the distributions with the flag <code>--dist-dir</code> flag)</li> <li>Distributions will be inside the <code>dist</code> directory.</li> </ol> <p>Real life examples</p> <ol> <li><code>lxml</code>\u00a0uses a separate build script that\u2019s invoked from within the\u00a0<code>manylinux1</code>\u00a0Docker container.</li> <li><code>ultrajson</code>\u00a0does the same and uses GitHub Actions to call the build script.</li> </ol>"},{"location":"computer_science/languages/python/wheels/#integrate-a-wheel-inside-a-requirements-file","title":"Integrate a wheel inside a requirements file","text":"<p>Wheel files can be integrated inside the <code>requirements.txt</code>, that specifies the dependencies of the project as well as their versions. Simpy add a line, that points to the wheel in the repository.</p> <p>For instance:</p> requirements.txt<pre><code>spotfunk-1.7.2.3-py3-none-any.whl\npandas==2.2.0\npytest==8.0.2\nplotly~=5.20.0\nsetuptools~=72.1.0\nwheel~=0.44.0\n</code></pre> <ul> <li>The first line tells where the wheel is located in the project tree (here, at the root, aka. same level as the <code>requirements.txt</code> file).</li> <li>The next lines are classic requirements, specifying the versions of the packages</li> </ul> <p>Large (few Mb) wheel files may not be versioned to avoid plumbing git.</p>"},{"location":"computer_science/languages/python/wheels/#refs","title":"Refs","text":"<p>Refs</p> <ul> <li>Real Python</li> <li>Pythonwheels</li> </ul>"},{"location":"computer_science/languages/sql/sql_examples/","title":"SQL Examples","text":"<pre><code>/*\n\nPrix des programmations inf\u00e9rieurs \u00e0 40 euros\n\n*/\n\nselect prix from programation where prix &lt; 40;\n\n\n\n/*\n\nArtistes qui ne font pas de la vari\u00e9t\u00e9 fran\u00e7aise\n\n*/\n\nselect dinstinc nom\n\nfrom artiste\n\nwhere artiste.genre &lt;&gt; \"Sc\u00e8ne Fran\u00e7aise\";\n\n\n\n/*\n\nConcerts du mois de Mars 2021\n\n*/\n\nselect *\n\nfrom concert\n\nwhere concert.date like \"2021-03%\";\n\n\n\nselect *\n\nfrom concert\n\nwhere concert.date between \"2021-03-01\" and \"2021-03-31\";\n\n\n\n/*\n\nLes artistes qui font du rap\n\n*/\n\nselect distinct artiste\n\nfrom artiste\n\nwhere artiste.genre = \"Rap\";\n\n\n\n/*\n\nLes concerts en Mars 2021 \u00e0 Paris\n\n*/\n\nselect *\n\nfrom concert\n\nwhere (\n\nconcert.date like \"2021-03%\"\n\nand\n\nconcert.ville = \"Paris\"\n\n);\n\n\n\n/*\n\nLes artistes qui font de la vari\u00e9t\u00e9 fran\u00e7aise\n\n*/\n\nselect distinct nom\n\nfrom artiste\n\nwhere artiste.genre = \"Vari\u00e9t\u00e9 fran\u00e7aise\" or artiste.genre = \"Sc\u00e8ne fran\u00e7aise\";\n\n\n\n/*\n\nInformations des concerts et de leurs artistes\n\n*/\n\nselect concert.id, artiste, date, nom, genre\n\nfrom artiste, concert\n\nwhere concert.artiste = artiste.id;\n\n\n\n/*\n\nTrouver le nombre de concerts\n\n*/\n\nselect count *\n\nfrom concert;\n\n\n\n/*\n\nNombre de styles diff\u00e9rents dans la table artiste\n\n*/\n\nselect distinct count genre\n\nfrom artiste;\n\n\n\n/*\n\nPrix moyen des concerts\n\n*/\n\nselect avg(prix)\n\nfrom concert;\n\n\n\n/*\n\nPrix moyen des concerts \u00e0 Paris\n\n*/\n\nselect avg(prix)\n\nfrom concert\n\nwhere concert.ville = \"Paris\";\n\n\n\n/*\n\nPrix total de tous les concerts\n\n*/\n\nselect sum(prix)\n\nfrom concert;\n\n\n\n/*\n\nConcert le moins / plus cher\n\n*/\n\nselect min(prix)\n\nfrom concert;\n\n\n\nselect max(prix)\n\nfrom concert;\n\n\n\n/*\n\nPrix moyen des concerts par artiste\n\n*/\n\nselect avg(prix)\n\nfrom concert\n\ngroup by artiste;\n\n\n\n/*\n\nPrix moyen des concerts par artiste inf\u00e9rieur \u00e0 50 euros\n\n*/\n\nselect avg(prix)\n\nfrom concert\n\ngroup by artist\n\nhaving avg(prix) &lt; 50;\n\n\n\n/*\n\nDate des concerts de vari\u00e9t\u00e9 fran\u00e7aise\n\n*/\n\nselect date\n\nfrom concert\n\nwhere artiste.id in (\n\nselect id from artiste where artiste.genre = \"Vari\u00e9t\u00e9 fran\u00e7aise\"\n\n);\n\n\n\n/*\n\nInformations de l'artiste qui donne un concert le 27 octobre 2022\n\n*/\n\nselect *\n\nfrom artiste\n\nwhere artiste.id = (\n\nselect artiste from concert where concert.date = \"2022-10-27\"\n\n);\n\n\n\n/*\n\nDate des concerts qui se passent apr\u00e8s ceux de Stasbourg\n\n*/\n\nselect date\n\nfrom concert\n\nwhere concert.date &gt; (\n\nselect max(date) from concert where concert.ville = \"Strasbourg\"\n\n);\n\n\n\n/*\n\nCr\u00e9er une table\n\n*/\n\ncreate table concert (\n\nID int not null,\n\nARTISTE nvarchar(30),\n\nDATE date,\n\nVILLE nvarchar(30),\n\nPAYS nvarchar(30),\n\nSALLE nvarchar(30),\n\nPRIX float CHECK (PRIX &gt; 0),\n\nPRIMARY KEY (ID)\n\nFOREIGN KEY(ARTISTE),\n\nREFERENCES ARTISTE(ID)\n\n);\n\n\n\ncreate table concert(\n\nID int not null,\n\nSECONDARY_KEY int not null,\n\nPRIMARY KEY(ID, SECONDARY_KEY)\n\n);\n\n\n\n/*\n\nSupprimer une table\n\n*/\n\ndrop table concert;\n\n\n\n/*\n\nRenommer une table\n\n*/\n\nrename artiste to musicians;\n\n\n\n/*\n\nModifier une table\n\n*/\n\nalter table concert add nb_place int;\n\n\n\n/*\n\nIns\u00e9rer des donn\u00e9es\n\n*/\n\ninsert into concert values (\n\n...\n\n);\n\n\n\n/*\n\n* td sql database requests\n\n*/\n\n\n\n/*\n\nA. Noms et tarifs des artistes qui joueront en France en 2023\n\n*/\n\nselect artiste.nom, programmation.prix\n\nfrom artiste, concert\n\nwhere concert.artiste = artiste.id and concert.pays = 'France'\n\nand (programmation.date between '2023-01-01' and '2023-31-12');\n\n\n\n/*\n\nB. Noms et genres des artistes ayant particip\u00e9 au paris paradis\n\n*/\n\nselect artiste.nom, artiste.genre\n\nfrom programmation innerjoin artiste\n\non programmation.artiste = artiste.id innerjoin festival on programmation.festival = festival.id\n\nwhere festival.nom = \"Paris Paradis\";\n\n\n\n/*\n\nC. Nom et genre des artistes qui jouent \u00e0 Strasbourg et \u00e0 Raptown\n\n*/\n\nselect distinct artiste.nom, artiste.genre\n\nfrom programmation\n\ninnerjoin artiste on programmation.artiste = artiste.id\n\ninnerjoin festival on programmation.festival = festival.id\n\ninnerjoin concert on concert.artiste = artiste.id\n\nwhere programmation.ville is \"Strasbourg\" or festival.nom is \"Raptown\";\n\n\n\nselect nom, genre from artiste\n\nwhere id in\n\n(select dinstinc artiste from concert where ville = \"Strasbourg\")\n\nand id in\n\n(select distinct artiste from programmation where festival =\n\n(select id from festival where nom = \"Raptown\"))\n\n\n\n/*\n\nD. Nom et genre des artistes qui participent \u00e0 la fois \u00e0 la Paris Paradis et \u00e0 Raptown\n\n*/\n\nselect artiste.nom, artiste.genre\n\nwhere artiste.id in\n\n(select distinct artiste from programmation innerjoin festival on programmation.festival = festival.id\n\nwhere festival.nom = \"Raptown\"\n\nand id in\n\n(select distinct artist from programmation innerjoin festival on programation.festival - festival.id\n\nwhere festival.nom = \"Paris Paradis\"));\n\n\n\nselect artiste.nom, artiste.genre\n\nwhere artiste.id in\n\n(select distinct artiste from programmation where festival in\n\n(select festival.id from festival where festival.nom = \"Paris Paradis\" and festival.nom = \"Raptown\"))\n\n\n\n/*\n\nE. Nom des artistes dont le total des prix est sup\u00e9rieur \u00e0 100 euros\n\n*/\n\nselect artise.nom, artiste.genre\n\nfrom artiste innerjoin concert on concert.artiste = artiste.id\n\ngroup by artiste\n\nhaving sum(concert.prix) &gt; 100;\n\n\n\n/*\n\nF. Noms des artistes qui jouent \u00e0 Paris mais pas \u00e0 Strasbourg\n\n*/\n\nselect nom from artiste.Nom\n\nwhere artiste.id in (\n\n(select distinct artiste.id from concert where concert.ville = \"Paris\")\n\nand artiste.id not in\n\n(select distinct artiste.id from concert where concert.ville = \"Strasbourg\"));\n\n\n\n/*\n\nG. Nom des couples d'artistes dont le prix des concerts est toujours sup\u00e9rieur au prix des concerts du second\n\n*/\n\nselect first_table.nom as first, second_table.nom as second\n\nfrom artiste first_table, artiste second_table\n\nwhere (\n\n(select min(prix) from concert where artise = first.id)\n\n&gt;\n\n(select min(prix) from concert where artise = second.id)\n\n);\n\n\n\n/*\n\nH. Noms des artistes ayant particip\u00e9 \u00e0 tous les festivals\n\n*/\n\nselect artiste.nom as my_artiste\n\nfrom artiste\n\nwhere (\n\nselect count (distinct festival) from programation\n\ninnerjoin artist on artist.id = programation.artiste\n\nwhere artiste.nom = my_artiste)\n\n) = (select count (*) from festival);\n\n\n\n/*\n\nI. Nombre d'artiste ayant particip\u00e9 au Paris Paradise\n\n*/\n\nselect count (distinct artiste)\n\nfrom programation\n\nwhere programmation.festival = \"Paris Paradise\";\n\n\n\n/*\n\nJ. Moyenne des prix des concerts par ann\u00e9e\n\n*/\n\nselect datepart(yyyy, date), avg(prix) from concert group by datepart(yyyy, date);\n\n\n\n/*\n\nK. Ins\u00e9rer le tuple &lt;7, 1, \"2023-03-17\", \"Dijon\", \"France\", \"Zenith\", 41.8&gt;\n\n*/\n\ninsert into concert values (7, 1, \"2023-03-17\", \"Dijon\", \"France\", \"Zenith\", 41.8);\n\n\n\n/*\n\nL. Changer le prix du concert 2 pour 15 euros\n\n*/\n\nupdate concert set prix = 15 where id = 2;\n\n\n\n/*\n\nM. Supprimer les concerts o\u00f9 le prix est inf\u00e9rieur \u00e0 30 euros\n\n*/\n\ndelete * from concert where prix &lt; 30;\n</code></pre>"},{"location":"computer_science/software_architecture/design_patterns/","title":"Design Patterns","text":"<p>Ressources</p> <ul> <li>Refactoring &amp; Designs patterns</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/","title":"Software Architecture","text":""},{"location":"computer_science/software_architecture/software_architecture/#introduction-to-software-architecture","title":"Introduction to software architecture","text":"<p>The objectives of software design is to make the code:</p> <ul> <li>Flexible</li> <li>Reusable</li> <li>Maintainable</li> </ul> <p>What is the difference between software design and software architecture? It depends on the size of the company: both roles can be merged sometimes. Some say that it is the same problem at a different scale.</p> <p>Required skills:</p> <ul> <li>Problem understanding through:<ul> <li>Technical expertise (keep reading)</li> <li>Communication (with engineer, clients, developer, etc...)</li> </ul> </li> <li>Project planning</li> <li>Forward problem solution</li> <li>Creativity</li> </ul> <p>Design and architecture is important if you want to have a stable, long- lived system. Anybody can build a system that'll last a week or a month or a year,\u00a0but if you want to build something that is the basis of\u00a0other people's work and contribution over potentially a period of years or longer,\u00a0in some cases, you need to put some thought into it.\u00a0You need to have somebody whose job it is to look out for the long game and\u00a0make sure that you are not making suboptimal short term decisions.</p> <p>For small designs, it is just some brainstorming on a whiteboard. For larger projects, you want to write some fairly substantial documents where you explore the different use cases, flow variations and all the critical functional and nonfunctional requirements, stability, maintainability, etc...</p> <p>Some basic rules for software architects:</p> <ul> <li>Keep it simple:<ul> <li>If its simple, you have pretty good change to get it right.</li> <li>If its simple, you have easy knowledge transfer.</li> </ul> </li> <li>Work with people that are better than you are.</li> <li>Keep learning from your mistakes.</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#software-design","title":"Software design","text":"<p>The software designer role would be responsible for outlining a software solution to a specific problem by designing the details of individual components and their responsibilities (lower level).</p> <p>Software design is the process of turning\u00a0the wishes and requirements of a customer into\u00a0working code that is stable and maintainable in the long run, and can be evolved and can become part of a larger system.</p>"},{"location":"computer_science/software_architecture/software_architecture/#software-architecture_1","title":"Software architecture","text":"<p>A software architect role would be responsible for looking at the entire system and choosing appropriate frameworks,data storage, solutions and determining how components interact with each other (higher level).</p> <p>A software architect's job is to be the interface between the product and the customer and the engineering teams. And so for instance,\u00a0customers will express a requirement or a need hey have of the,\u00a0of the software and it's the architect's job to\u00a0then work with the customers and their representatives,\u00a0product managers and such,\u00a0to come up with the technical requirements of how we're going to solve the problem.</p>"},{"location":"computer_science/software_architecture/software_architecture/#objected-oriented-thinking","title":"Objected-Oriented thinking","text":"<p>Object oriented programming is based on the real world objects. Each object has its own properties, roles, self awareness, etc... Being capable of representing such entities in a codebase helps with clarity and flexibility.</p>"},{"location":"computer_science/software_architecture/software_architecture/#design-in-the-software-process","title":"Design in the software process","text":""},{"location":"computer_science/software_architecture/software_architecture/#software-requirements-conceptual-and-technical-designs","title":"Software requirements, conceptual and technical designs","text":"<p>Software design is an iterative process:</p> <ul> <li>Product backlog</li> <li>Sprint backlog</li> <li>Sprints (iterations)</li> <li>Potential product increment</li> </ul> <p>The most common cause of software development failure is poor design.</p> <p>Going straight into coding is bad...</p> <p>Designing a software is like going from high to low granularity: start large and approximative and get more precise.</p>"},{"location":"computer_science/software_architecture/software_architecture/#clarify-the-requirements","title":"Clarify the requirements","text":"<p>Clarify deeply the requirements for the project by asking questions, and reformulating the needs with the end user.</p>"},{"location":"computer_science/software_architecture/software_architecture/#build-a-conceptual-design","title":"Build a conceptual design","text":"<p>Conceptual design (sketch)</p> <ol> <li>Find each component (search page, search input, search button)</li> <li>Find connections (detailed specifications)</li> <li>Find responsibilities (search functionality)</li> </ol> <p>During this stage, the topics will be:</p> <ul> <li>requirements</li> <li>mock-ups</li> <li>trade-offs</li> </ul> <p>CRC cards are useful in this step ([[#Class responsibility collaborator (CRC)]]).</p>"},{"location":"computer_science/software_architecture/software_architecture/#build-a-technical-design","title":"Build a technical design","text":"<p>Technical design (describes how these responsibilities are met): UML</p> <ol> <li>Specify technical details of each component (split components in small enough pieces)</li> <li>Use technical descriptions for each component</li> <li>Describe how components work together</li> </ol> <p>UML class diagrams are useful in this step (see [[#Expressing designs structures in java &amp; UML class diagrams]])</p>"},{"location":"computer_science/software_architecture/software_architecture/#expressing-requirements-through-user-stories","title":"Expressing requirements through user stories","text":"<p>Once requirements are found, they can be expressed as a user story. User stories are one of many techniques to express some requirements for a software system. The goal is to formulate them using natural language.</p> <p>As a ... , i want to ... so that ...</p> <p>After having formulated the user story, apply object oriented thinking to identify further requirements. While nouns identify the objects, verbs highlight their responsibilities and connection.</p>"},{"location":"computer_science/software_architecture/software_architecture/#categories-of-objects-in-designs","title":"Categories of objects in designs","text":"<p>By breaking down big objects into smaller ones, some categories of objects will appear. There are three categories:</p> <ol> <li>Entity objects (the first ones to be identified, corresponds to real world objects like a chair)</li> <li>Boundary objects (any object dealing with another system like a user, external software, internet)</li> <li>Control objects (coordinates the other objects)</li> </ol>"},{"location":"computer_science/software_architecture/software_architecture/#design-for-quality-attributes-competing-qualities-and-trade-offs","title":"Design for quality attributes - competing qualities and trade-offs","text":"<p>Competing qualities influence software architecture:</p> <ul> <li>Usability</li> <li>Performance</li> <li>Scalability</li> <li>Security</li> <li>Code quality</li> </ul> <p>Architecture is about producing the best quality software given with constraints. Its often quality vs time to market.</p> <ul> <li>What is good enough?</li> <li>What are the trad-offs?</li> </ul> <p>Examples of trade-offs:</p> <ul> <li>Performance code is often less modular and maintainable</li> <li>Secure code has often low performance</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#functional-requirements","title":"Functional requirements","text":"<p>It's about identifying what the system is expected to do.</p>"},{"location":"computer_science/software_architecture/software_architecture/#non-functional-requirements","title":"Non-functional requirements","text":"<p>Describes how well the system does what it is supposed to do:</p> <ul> <li>performance</li> <li>security</li> <li>availability</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#class-responsibility-collaborator-crc","title":"Class responsibility collaborator (CRC)","text":"<p>CRC cards stands for Class, Responsibility and Collaborator (aka. Components, Connections and Responsibilities). This is a way of representing high level structure ([[#Build a conceptual design]]). It is useful to record, organize and refine the components of the system.</p> <p></p> <p>Example using a bank system:</p> <ul> <li>The bank customer is the class name</li> <li>The responsibilities are:<ul> <li>Inserting bank card</li> <li>Choosing operations</li> </ul> </li> <li> <p>The collaborators:</p> <ul> <li>The bank machine</li> </ul> </li> <li> <p>The bank machine is the class name</p> </li> <li>Its responsibilities are:<ul> <li>Authenticating customers</li> <li>Displaying task options</li> <li>Deposit and withdraw of money</li> <li>Check account balances</li> </ul> </li> <li>Its collaborators are:<ul> <li>Bank customer</li> </ul> </li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#creating-models-in-designs","title":"Creating Models in designs","text":"<p>Models are helpful to make a step back and analyze complex situations. In software design, this can be done through UML diagrams (Unified Modelling Language).</p>"},{"location":"computer_science/software_architecture/software_architecture/#language-evolution","title":"Language evolution","text":"<p>Languages started with COBOL and Fortran using the imperative paradigm. Then, procedural paradigm was developed, adding the support for abstract data types (user defined types). Objected oriented paradigm appeared later in the 1980s, using abstract data types using inheritance (cf. C++, C#, Java, etc...).</p> <p>Object oriented approach is not always the best approach for a piece of software.</p>"},{"location":"computer_science/software_architecture/software_architecture/#four-design-principles","title":"Four design principles","text":""},{"location":"computer_science/software_architecture/software_architecture/#abstraction","title":"Abstraction","text":"<p>Abstraction is the idea of simplifying a concept, hiding the details from the user (like in a class for instance).</p> <p>Abstractions have:</p> <ul> <li>attributes describing properties of the object</li> <li>responsibilities describing the behaviors of the object</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation is about bundling objects, exposing some data and restricting access to some fields.</p> <p>An interface can be provided through methods and their associated restriction. This concept is often referred to as black box thinking.</p>"},{"location":"computer_science/software_architecture/software_architecture/#decomposition","title":"Decomposition","text":"<p>Decomposition is about breaking a complex problem into pieces that are simpler to understand and solve.</p> <p>The number of pieces can be fixed or dynamic depending on the problem. Decomposed pieces can have varying lifetimes.</p> <p>For instance, a car have a fixed number of motor, wheels, etc... and a dynamic number of passengers. It has a frame lasting the whole life of the car and tires that can be replaced when worn out.</p>"},{"location":"computer_science/software_architecture/software_architecture/#generalization","title":"Generalization","text":"<p>Generalization helps reduce redundancy in a system by sharing the same common parts.</p> <p>Can be achieved using inheritance, templates, etc...</p> <p>The DRY rule: Don't repeat yourself !</p>"},{"location":"computer_science/software_architecture/software_architecture/#expressing-designs-structures-in-java-uml-class-diagrams","title":"Expressing designs structures in java &amp; UML class diagrams","text":""},{"location":"computer_science/software_architecture/software_architecture/#abstraction-in-java-and-uml","title":"Abstraction in Java and UML","text":"<p>Properties turn into variables and operations into members.</p> <p></p> <p>Translates into (without considering the exposition):</p> <pre><code>public class Food {\n    public String greceryID;\n    public String name;\n    public String manufacturer;\n    public String expiryDate;\n    public double price;\n\n    public bool isOnSale();\n}\n</code></pre>"},{"location":"computer_science/software_architecture/software_architecture/#encapsulation-in-java-and-uml","title":"Encapsulation in java and UML","text":"<p>To make the code clearer, some fields can be hided from the user. This can be done by using the <code>private</code> specifier and implementing getter and setter methods depending on the situation.</p>"},{"location":"computer_science/software_architecture/software_architecture/#decomposition-in-java-and-uml","title":"Decomposition in Java and UML","text":"<p>Decomposition is about taking a whole and dividing it up into different parts.</p> <p>There are 3 relationships involved in decomposition:</p> <ul> <li>Association</li> <li>Aggregation</li> <li>Composition</li> </ul> <p></p>"},{"location":"computer_science/software_architecture/software_architecture/#association","title":"Association","text":"<p>Objects may interact with other for some time.</p> <p>Its a loose relationship.</p> <p>For instance: a person can interact with a plane. Neither owns the other.</p>"},{"location":"computer_science/software_architecture/software_architecture/#aggregation","title":"Aggregation","text":"<p>Aggregation is a \"Has a...\" relationship. One object owns another but both can exist without another.</p> <p>This is a tighter coupling than association.</p>"},{"location":"computer_science/software_architecture/software_architecture/#composition","title":"Composition","text":"<p>Composition is a tight coupling relationship where an object owns another an cannot exist without the other.</p>"},{"location":"computer_science/software_architecture/software_architecture/#generalization-in-java-and-uml","title":"Generalization in Java and UML","text":"<ul> <li>Classes can implement one or\u00a0more interface at a time which allows them to have multiple types.\u00a0</li> <li>Interfaces enable you to describe behaviors without the need to\u00a0implement them, which allows you to reuse these abstractions.</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#using-inheritance","title":"Using inheritance","text":""},{"location":"computer_science/software_architecture/software_architecture/#implementation-inheritance","title":"Implementation inheritance","text":"<p>Inheritance is a way of abstracting objects into super-classes and sub-classes, reducing the code redundancy.</p> <p>Super-class can define some default behaviors that will be the one of every sub-class re-implementing it. It will also share the desired attributes.</p> <p>Implementation inheritance use only one super-class.</p>"},{"location":"computer_science/software_architecture/software_architecture/#multiple-inheritance","title":"Multiple inheritance","text":"<p>Multiple inheritance is when a sub-class has two or more super-classes.</p>"},{"location":"computer_science/software_architecture/software_architecture/#using-interfaces","title":"Using Interfaces","text":"<p>An interface only declares method signatures, no constructor, attribute or method bodies.</p> <p>It specifies the behaviors expected for an object. It is also a way to sub-type objects.</p>"},{"location":"computer_science/software_architecture/software_architecture/#design-principles","title":"Design principles","text":""},{"location":"computer_science/software_architecture/software_architecture/#coupling-and-cohesion","title":"Coupling and cohesion","text":"<p>Average people can only keep 7 informations in short term memory: keep modules simple and straight forward as much as possible.</p> <p>The metrics to use to evaluate a design complexity are:</p> <ul> <li>Coupling</li> <li>Cohesion</li> </ul> <p>Coupling and cohesion are a trade-off.</p>"},{"location":"computer_science/software_architecture/software_architecture/#coupling","title":"Coupling","text":"<p>Coupling focuses on complexity between a module and other modules. An analogy is:</p> <ul> <li>Lego allows for loose coupling: any lego can be bound to others</li> <li>Puzzle pieces allow for tight coupling: a piece can only be bound to one other, there is not much possibility here</li> </ul> <p>When evaluating the complexity of a design, consider:</p> <ul> <li>Degree (the number of connections between a module and others: the smaller the better)</li> <li>Ease (how obvious the connections are)</li> <li>Flexibility (how interchangeable the modules are)</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#cohesion","title":"Cohesion","text":"<p>Cohesion focuses on the clarity and complexity within a module.</p> <ul> <li>A lego has high cohesion since it has only one task: fit with another brick</li> <li>A puzzle piece has low cohesion since its role is unclear and depend on its position</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#separation-of-concerns","title":"Separation of concerns","text":"<p>A large problem with a lot of concerns can be divided into smaller parts, using separation of concerns: the code needs it to stay organized. It can be achieved through [[#Four design principles]]: [[#Abstraction]], [[#Encapsulation]], [[#Decomposition]] and [[#Generalization]].</p> <p>For instance, a dog can be analyzed by its behavior. It eats, but not alone and needs an owner for this. Therefore, concern of getting food is separated from the dog and given to the owner. Another example is the smartphone class. A smartphone have a camera and therefore we can create a separate class for the camera. This camera object will then be composed with the smartphone class.</p>"},{"location":"computer_science/software_architecture/software_architecture/#information-hiding","title":"Information hiding","text":"<p>Information hiding allows other developers to work with a codebase without knowing the implementation details of the modules. This concept is often associated / achieved through the [[#Encapsulation]] principle. It is a way to enforce a good use of an API.</p> <p>For instance, in [[Java]], there are multiple ways to enforce [[#Encapsulation]]:</p> <ul> <li>public methods</li> <li>protected methods</li> <li>default access modifier</li> <li>private methods</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#conceptual-integrity","title":"Conceptual integrity","text":"<p>Conceptual integrity (=consistency) is about creating a consistent or bullet-proof software, letting multiple users connect at once for instance.</p> <p>The following behaviors can help achieve the conceptual integrity:</p> <ul> <li>AGILE development</li> <li>coding conventions (naming conventions for example)</li> <li>code reviews (systematic examination of written code)</li> <li>Defining types through interfaces used in the code base (enforces the use of internal types and therefore the consistency)</li> <li>Restrict the group reviewing commits to the software to the minimum</li> </ul>"},{"location":"computer_science/software_architecture/software_architecture/#generalization-principles","title":"Generalization principles","text":""},{"location":"computer_science/software_architecture/software_architecture/#inheritance-issues","title":"Inheritance issues","text":"<p>As previously said, [[#Using inheritance]] is about answering the following questions:</p> <ul> <li>What attributes and behaviors do you need to model in a class through abstraction?</li> <li>How are these attributes and behaviors grouped together and\u00a0accessed through encapsulation?</li> <li>Can my classes be simplified into smaller parts using decomposition?</li> <li>Are there common things across my objects that can be generalized?</li> </ul> <p>How to know when we misuse inheritance in POO?</p> <ul> <li>When objects are really close from each other: Pizza and Pepperoni differ only in their content...</li> <li>Breaking the Liskov substitution principle: overriding some core base-class functionalities for instance...</li> </ul> <p>Liskov substitution principle</p> <p>States that a subclass can replace a super-class if and only if the subclass does not change the functionality of the super-class.</p>"},{"location":"computer_science/software_architecture/software_architecture/#modelling-behavior","title":"Modelling behavior","text":""},{"location":"computer_science/software_architecture/software_architecture/#uml-sequence-diagram","title":"UML sequence diagram","text":"<p>Sequence Diagrams are used to show your team how objects in your program interact with each other to complete tasks. This is a map of the conversations between the involved classes.</p> <p></p> <p></p>"},{"location":"computer_science/software_architecture/software_architecture/#uml-state-diagrams","title":"UML state diagrams","text":"<p>A UML state diagram describes how your system acts or behaves by showing states of the system as events occur. Think of a car: when it is in reverse, it can only achieve some specific actions, like parking. State diagrams helps finding bugs and stepping back from the source code.</p> <p>An activity describes the behavior of an object when in a certain state. There are 3 types of activities:</p> <ol> <li>Entry: actions occurring when the state is just entered from another state</li> <li>Exit: actions occurring when the state is exited</li> <li>Do: actions occurring only once or multiple times while an object is in a certain state</li> </ol> <p>Terminations represents an object being destroyed, or a process being complete, like returning the credit card at the bank machine.</p> <p></p> <p></p>"},{"location":"computer_science/software_architecture/software_architecture/#model-checking","title":"Model checking","text":"<p>How to make sure that the created model works? Model checking is a systematic check technique of system's state in all its possible variants. It happens after the code has been written and before deployment. Modelling the behavior of the software before is very important since a broken model lead to misbehavior of the model checking tool.</p> <p>One issue with model checking is the state's space explosion. A large code cannot be analyzed by a model checker since the possibilities are just too numerous. Selecting small parts of the code will help solving this issue.</p> <p>It can be achieved through a model checking software. It detects if there are violations, called deadlocks.</p> <p>There are 3 different phases to performing model checking:</p> <ol> <li>Modelling phase: sanity checks</li> <li>Running phase: running the model checker</li> <li>Analysis phase: check if the desired properties are satisfied, determining potential counter-examples</li> </ol>"},{"location":"computer_science/software_architecture/unified_modelling_language/","title":"Unified Modeling Language (UML)","text":""},{"location":"computer_science/tools/brew/","title":"Brew","text":"<p>Homebrew is a package manager for macOS, like vcpkg.</p> <p>It uses git and ruby.</p>"},{"location":"computer_science/tools/brew/#useful-links","title":"Useful links","text":"<ul> <li>Official website</li> <li>Github repository</li> </ul>"},{"location":"computer_science/tools/brew/#installation","title":"Installation","text":"<ul> <li>In bash, type:</li> </ul> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Installation location: homebrew installs packages into the <code>/user/local</code> folder.</p>"},{"location":"computer_science/tools/docker/","title":"Docker","text":"<p>Info</p> <p>Docker is a virtualization technique based on containers. It allows running very light and isolated containers.</p> <p>On Windows, docker uses the Hyper-V virtualization.</p> <p>Quote</p> <ul> <li>Develop inside a container using VSCode</li> <li>Docker documentation</li> <li>Docker Hub</li> <li>Play with Docker[target=_blank]</li> </ul>"},{"location":"computer_science/tools/docker/#preliminaries","title":"Preliminaries","text":""},{"location":"computer_science/tools/docker/#virtualization","title":"Virtualization","text":"<p>Info</p> <p>Virtualization is the emulation of a physical computer using a software called hypervisor. It allows to run multiple virtual computers on the same physical computer. The operating system (OS) already runs on a virtual computer, and have no way to make the difference between a physical and a virtual computer.</p> <p></p>"},{"location":"computer_science/tools/docker/#virtual-machine-vm","title":"Virtual Machine (VM)","text":"<p>VMs are base on virtualization.</p> <p>Benefits of VMs</p> <ul> <li>Low hardware cost</li> <li>Ease of installation</li> <li>Installation speed</li> </ul> <p>Drawbacks of VMs</p> <p>Needs:</p> <ul> <li>An OS</li> <li>Its libraries</li> <li>Its commands</li> <li>Its dedicated ressources</li> </ul> <p>Some VMs requires an OS on host machine:</p> <ul> <li>VMWare (paid)</li> <li>Virtualbox</li> <li>QEMU</li> <li>Virtual Server (paid)</li> </ul> <p>Some hypervisors do not require any OS to be installed on host machine (Bare Metal VMs):</p> <ul> <li>Xen</li> <li>VMWare ESX (paid)</li> <li>Hyper-V (commercial)</li> <li>Linux KVM</li> </ul> <p>Main VM cloud hosts are:</p> <ul> <li>AWS (Amazon)</li> <li>Azure (MS)</li> <li>Digital Ocean</li> </ul>"},{"location":"computer_science/tools/docker/#containers","title":"Containers","text":"<p>What is a container?</p> <p>Containers are lightweight, standalone, and executable packages that include everything needed to run a piece of software, such as the code, runtime, system tools, libraries, and settings.   They ensure that software runs consistently across different computing environments by isolating the application from its surroundings.</p> <p></p> <p>Benefits of containers</p> <ul> <li>Low CPU, RAM and disk usage</li> <li>More containers can be created given the low ressource usage</li> <li>Even lower hardware cost compared to VMs</li> <li>Very fast deployment and startup</li> </ul> <p>Containers are based on containers engines and also runs on a host machine. The main difference between containers and VMs is that a container is a process of the host machine, making it completely isolated from it.</p>"},{"location":"computer_science/tools/docker/#image","title":"Image","text":"<p>A container is created using an image.</p> <p>Using Oriented Object Programming the container would be the class and the image would be an instance of this class.</p> <p>An image is defined by its tag: it is fixed. On the other hand, the container is dynamic and can be used from this fixed image.</p>"},{"location":"computer_science/tools/docker/#layers","title":"Layers","text":"<p>An image is made from layers. Layers can be added or removed so that the image is relevant for our usage.</p>"},{"location":"computer_science/tools/docker/#docker-hub","title":"Docker hub","text":"<p>Docker Hub is the equivalent of GitHub. It stores Docker images from the community.</p> <p>Use verified and popular images!</p> <p>Everyone can upload images to Docker hub. Some can have security issues or may contain malwares.</p>"},{"location":"computer_science/tools/docker/#installation","title":"Installation","text":"<p>Cf official Docker documentation.</p>"},{"location":"computer_science/tools/docker/#docker-basics","title":"Docker Basics","text":"<p>One can fist analyze the following command:</p> Example: how to call Docker:<pre><code>docker run --rm bash echo Salut!\n</code></pre> <p>It gives the follwing result:</p> <pre><code>Unable to find image 'bash:latest' locally\nlatest: Pulling from library/bash\ne1517fbc9c07: Download complete\n467989b961c3: Download complete\n43c4264eed91: Download complete\nDigest: sha256:ce062497c248eb1cf4d32927f8c1780cce158d3ed0658c586a5be7308d583cbb\nStatus: Downloaded newer image for bash:latest\nSalut!\n</code></pre> <p>What happens is:</p> <ol> <li>Docker searches for a bash image and since we did not specified any tag, it takes the latest version.</li> <li>Docker pulls (downloads) bash image from DockerHub.</li> <li>Docker executes the command <code>echo Salut!</code>.</li> <li>Docker removes the container (not the image) since we used the flag <code>-rm</code>.</li> </ol>"},{"location":"computer_science/tools/docker/#view-downloaded-cached-images","title":"View downloaded (cached) images","text":"Listing cached images:<pre><code>docker images\n</code></pre> Result:<pre><code>REPOSITORY   TAG       IMAGE ID       CREATED       SIZE\nbash         latest    ce062497c248   6 weeks ago   21.8MB\n</code></pre> <p>After having launched a bash container, bash image is cached in the computer. Caching ensures that the following runs are much faster: there is no need to download the image again.</p> <p>Running again:</p> Specifying an image version / tag:<pre><code>docker run --rm bash:3.2 echo Salut!\n</code></pre> Result:<pre><code>REPOSITORY   TAG       IMAGE ID       CREATED       SIZE\nbash         latest    ce062497c248   6 weeks ago   21.8MB\nbash         3.2       79dd16db958d   5 months ago   17.4MB\n</code></pre> <p>Again, this is the goal of caching: the bash version 3.2 have to be dowloaded and appears in the table.</p>"},{"location":"computer_science/tools/docker/#running-interactive-docker","title":"Running interactive Docker","text":"<ul> <li><code>-t</code>: asks Docker to give a terminal access, plugging STDIN and STDOUT</li> <li><code>-i</code>: runs the container in interactive mode, giving access to the keyboard</li> <li><code>-ti</code>: combination of <code>-t</code> and <code>-i</code></li> </ul> After this command, Docker terminal appears inside out terminal:<pre><code>docker run -ti --rm bash:3.2 echo Salut!\n</code></pre> To exit the docker container console:<pre><code>exit\n</code></pre>"},{"location":"computer_science/tools/docker/#list-container-information","title":"List container information","text":"To print instanciated image info (containers) from inside the container:<pre><code>docker ps\n</code></pre>"},{"location":"computer_science/tools/docker/#ids","title":"IDs","text":"<p>Image and containers have unique IDs, that can be obtained using <code>docker images</code>. IDs can be used to:</p> <ul> <li>get images properties</li> <li>manipulate images</li> </ul>"},{"location":"computer_science/tools/docker/#print-history-layers-of-an-image","title":"Print history / layers of an image","text":"Print the layers used for a given image:<pre><code>docker history &lt;IMAGE_ID&gt;\n</code></pre> <p>Typing only the first unique digits of the ID is the same as copy-pasting the whole ID.</p> <p>TO BE CONTINUED...</p>"},{"location":"computer_science/tools/git/","title":"Git","text":""},{"location":"computer_science/tools/git/#git-modules","title":"Git modules","text":""},{"location":"computer_science/tools/git/#add-a-git-module","title":"Add a git module","text":"<pre><code>## initialize a git repository\ngit init\n\n## add a git module to project\ngit submodule add -b &lt;branch_name&gt; --name &lt;module_name&gt; &lt;url&gt; &lt;path&gt;\n</code></pre> <p>Example:</p> <pre><code>git submodule add -b docking --name imgui https://github.com/ocornut/imgui.git external/imgui\n</code></pre> <p>The former lines of code will clone the repository Imgui from the given URL in the folder <code>external/imgui</code> even if not already existing using the name imgui. A hidden .gitmodules file should appear alongside the .git folder and contains the newly added git modules:</p> <p>```text .gitmodules [submodule \"glfw\"]         path = external/glfw         url = https://github.com/glfw/glfw.git         branch = master <pre><code>Add some more gitmodules by repeating the process.\n\n### Clone a project having submodules\n\n#### Clone sudmodules with the project\n\n```bash\ngit clone --recursive &lt;URL&gt;\n</code></pre></p> <p>By using this command, every submodule of the project will be initialized during the cloning procedure of the main project.</p>"},{"location":"computer_science/tools/git/#clone-submodules-in-a-differed-way","title":"Clone submodules in a differed way","text":"<p>TODO</p>"},{"location":"computer_science/tools/git/#delete-a-module-from-the-git-repository","title":"Delete a module from the git repository","text":"<p>A very helpful github gist is available here</p> <pre><code>## Remove the submodule entry from .git/config\ngit submodule deinit -f path/to/submodule\n\n## Remove the submodule directory from the superproject's .git/modules directory\nrm -rf .git/modules/path/to/submodule\n\n## Remove the entry in .gitmodules and remove the submodule directory located at path/to/submodule\ngit rm -f path/to/submodule\n</code></pre>"},{"location":"computer_science/tools/screen/","title":"Screen (UNIX)","text":"<p>screen` is a powerful terminal multiplexer that allows you to manage multiple terminal sessions within a single window. This is particularly useful when you are working on a remote server or need to detach and reattach to sessions.</p>"},{"location":"computer_science/tools/screen/#1-installation","title":"1. Installation","text":"<p>If <code>screen</code> is not already installed on your Linux system, you can install it using the package manager for your distribution. For example:</p> <ul> <li> <p>On Ubuntu/Debian:</p> <pre><code>sudo apt-get update\nsudo apt-get install screen\n</code></pre> </li> <li> <p>On CentOS/RHEL:</p> <pre><code>sudo yum install screen\n</code></pre> </li> </ul>"},{"location":"computer_science/tools/screen/#2-starting-a-screen-session","title":"2. Starting a Screen Session:","text":"<p>To start a new <code>screen</code> session, open a terminal and type:</p> <pre><code>screen\n</code></pre>"},{"location":"computer_science/tools/screen/#3-working-within-the-screen-session","title":"3. Working within the Screen Session:","text":"<p>Once inside a <code>screen</code> session, you can use it like a regular terminal. Run your commands, open multiple windows, or split the screen.</p> <ul> <li> <p>Create a new window: Press <code>Ctrl-a</code> followed by <code>c</code>.</p> </li> <li> <p>Switch between windows: Press <code>Ctrl-a</code> followed by a number corresponding to the window number.</p> </li> <li> <p>Split the screen horizontally: Press <code>Ctrl-a</code> followed by <code>S</code>.</p> </li> <li> <p>Split the screen vertically: Press <code>Ctrl-a</code> followed by <code>|</code>.</p> </li> <li> <p>Navigate between split regions: Press <code>Ctrl-a</code> followed by <code>Tab</code>.</p> </li> </ul>"},{"location":"computer_science/tools/screen/#4-detach-from-a-screen-session","title":"4. Detach from a Screen Session:","text":"<p>To detach from a <code>screen</code> session and leave it running in the background, press:</p> <pre><code>Ctrl-a d\n</code></pre>"},{"location":"computer_science/tools/screen/#5-reattach-to-a-screen-session","title":"5. Reattach to a Screen Session:","text":"<p>To reattach to a detached <code>screen</code> session, list the available sessions:</p> <pre><code>screen -ls\n</code></pre> <p>You will see a list of detached sessions. Reattach to a session by specifying its ID:</p> <pre><code>screen -r &lt;session_id&gt;\n</code></pre>"},{"location":"computer_science/tools/screen/#6-exiting-a-screen-session","title":"6. Exiting a Screen Session:","text":"<p>To exit a <code>screen</code> session, simply exit all shells within it, and when the last shell is closed, the <code>screen</code> session will terminate.</p> <p>If you want to close a <code>screen</code> session even if there are multiple windows or shells running, press <code>Ctrl-a</code> followed by <code>:</code> to bring up the command prompt and type <code>quit</code> or <code>exit</code>.</p> <p>These are the basic commands to get started with <code>screen</code>. It's a versatile tool that provides a lot of functionality for managing terminal sessions, and you can customize it based on your needs.</p>"},{"location":"computer_science/tools/tar/","title":"TAR (UNIX)","text":""},{"location":"computer_science/tools/tar/#basics","title":"Basics","text":""},{"location":"computer_science/tools/tar/#compress-a-directory","title":"Compress a directory","text":"<pre><code>tar -czvf prod_env.tar.gz prod_env\n</code></pre>"},{"location":"computer_science/tools/tar/#decompress-an-archive","title":"Decompress an archive","text":"<pre><code>tar -xczvf prod_env.tar.gz prod_env\n</code></pre>"},{"location":"computer_science/tools/tar/#secure-with-a-password","title":"Secure with a password","text":"<p>Quote</p> <p>baeldung.com</p>"},{"location":"computer_science/tools/tar/#using-gpg-gnu-privacy-guard","title":"Using GPG (Gnu Privacy Guard)","text":""},{"location":"computer_science/tools/tar/#using-cccrypt","title":"Using cccrypt","text":""},{"location":"computer_science/tools/vcpkg/","title":"VCPKG","text":""},{"location":"computer_science/tools/vcpkg/#description","title":"Description","text":"<p>vcpkg is a C and C++ dependency manager from Microsoft.</p> <p>It works for all platforms, buildsystems and workflows. Works with CMake.</p>"},{"location":"computer_science/tools/vcpkg/#useful-links","title":"Useful links","text":"<ul> <li>Official website</li> <li>Github repository</li> </ul>"},{"location":"computer_science/tools/vcpkg/#how-to-install","title":"How to install","text":""},{"location":"computer_science/tools/vcpkg/#windows","title":"Windows","text":"<ul> <li>clone the repository</li> </ul> <pre><code>git clone https://github.com/microsoft/vcpkg\n</code></pre> <ul> <li>execute the cmd script</li> </ul> <pre><code>\\vcpkg\\bootstrap-vcpkg.bat\n</code></pre> <ul> <li>add vcpkg to the PATH: go to the environment variables and add vcpkg to PATH.</li> <li>to search for a specific package:</li> </ul> <pre><code>.\\vcpkg\\vcpkg search [search term]\n</code></pre> <ul> <li>to install a package; type:</li> </ul> <pre><code>.\\vcpkg\\vcpkg install [package name]:x64-windows\n</code></pre> <ul> <li>to use vcpkg with Visual Studio, run:</li> </ul> <pre><code>.\\vcpkg\\vcpkg integrate install\n</code></pre>"},{"location":"computer_science/tools/vcpkg/#list-of-useful-packages","title":"List of useful packages","text":"<ul> <li>ImGui</li> <li>GLFW</li> <li>Eigen</li> </ul>"}]}