{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Knowledge Database","text":"<p>This site is a collection of knowledge  and ideas .</p>"},{"location":"#why-i-built-this-database","title":"Why I Built This Database","text":"<p>This database is my way of:</p> <ul> <li>Organizing my thoughts  and knowledge  systematically.</li> <li>Keeping track of the key concepts and lessons  I encounter.</li> <li>Sharing useful information in case it can help others.</li> </ul> <p>Feel free to explore, and enjoy the journey!</p>"},{"location":"#feedback-and-contributions","title":"Feedback and Contributions","text":"<p>If you have suggestions or contributions, feel free to reach out or submit ideas through my contact page.</p>"},{"location":"contact/","title":"Get in Touch","text":"<p>Thank you for visiting my personal knowledge database!</p> <p>If you'd like to provide feedback, ask questions, or collaborate, feel free to reach out using the options below.</p>"},{"location":"contact/#email","title":"Email","text":"<p>The best way to contact me is via email:</p> <p>baptiste.penot.work@gmail.com</p>"},{"location":"contact/#social-media","title":"Social Media","text":"<p>You can also connect with me on my social media platforms:</p> <ul> <li> LinkedIn: linkedin.com/in/baptiste-penot-64131218a/</li> <li> GitHub Perso: github.com/Hardcode3</li> <li> GitHub Pro: github.com/spotbap</li> </ul>"},{"location":"contact/#disclaimer","title":"Disclaimer","text":"<p>This is a personal knowledge base intended primarily for my own use and learning. While I strive to keep it accurate, some content may reflect my personal interpretations or incomplete information.</p> <p> Always cross-reference important details! </p> <p>Thanks for reaching out, and happy learning! </p>"},{"location":"algorithms/algorithm_glossary/","title":"Algorithm Glossary","text":""},{"location":"algorithms/algorithm_glossary/#description","title":"Description","text":"<p>This file contains links and infos about important algorithms in different fields such as code, physics, mathematics, biology etc...</p>"},{"location":"algorithms/algorithm_glossary/#general","title":"General","text":"<ul> <li>Top 25 Algorithms Every Programmer Should Know</li> </ul>"},{"location":"algorithms/algorithm_glossary/#numerical-optimization","title":"Numerical optimization","text":"<ul> <li>Book for optimisation in computer sciences</li> </ul>"},{"location":"algorithms/algorithm_glossary/#statistical-physics","title":"Statistical Physics","text":"<ul> <li>Metropolis Hastings - FiveMinutsStats</li> <li>Metropolis Hastings - Wikipedia</li> </ul>"},{"location":"algorithms/algorithm_glossary/#maths","title":"Maths","text":"<ul> <li>Real Python: Draw the Mandelbrot Set in Python</li> </ul>"},{"location":"algorithms/big_0_notation/","title":"Big O Notation","text":""},{"location":"algorithms/big_0_notation/#explanation","title":"Explanation","text":"<ol> <li> <p>O(\\(1\\))</p> <p>This is the constant time notation. The runtime remains steady regardless of input size. For example, accessing an element in an array by index and inserting/deleting an element in a hash table.</p> </li> <li> <p>O(\\(n\\))</p> <p>Linear time notation. The runtime grows in direct proportion to the input size. For example, finding the max or min element in an unsorted array.</p> </li> <li> <p>O(\\(log(n)\\))</p> <p>Logarithmic time notation. The runtime increases slowly as the input grows. For example, a binary search on a sorted array and operations on balanced binary search trees.</p> </li> <li> <p>O(\\(n^2\\))</p> <p>Quadratic time notation. The runtime grows exponentially with input size. For example, simple sorting algorithms like bubble sort, insertion sort, and selection sort.</p> </li> <li> <p>O(\\(n^3\\))</p> <p>Cubic time notation. The runtime escalates rapidly as the input size increases. For example, multiplying two dense matrices using the naive algorithm.</p> </li> <li> <p>O(\\(n log(n)\\))</p> <p>Linearithmic time notation. This is a blend of linear and logarithmic growth. For example, efficient sorting algorithms like merge sort, quick sort, and heap sort</p> </li> <li> <p>O(\\(2n\\))</p> <p>Exponential time notation. The runtime doubles with each new input element. For example, recursive algorithms solve problems by dividing them into multiple subproblems.</p> </li> <li> <p>O(\\(n!\\))</p> <p>Factorial time notation. Runtime skyrockets with input size. For example, permutation-generation problems.</p> </li> <li> <p>O(\\(\\sqrt{n}\\))</p> <p>Square root time notation. Runtime increases relative to the input\u2019s square root. For example, searching within a range such as the Sieve of Eratosthenes for finding all primes up to n.</p> </li> </ol>"},{"location":"algorithms/inverse_problem_theory/","title":"Inverse Problem Theory","text":"<p>Inverse problems are opposed to direct problems.</p> <p>Here the theory is denoted by \\(g\\), the model by \\(\\vec{m}\\) and the data by \\(d\\).</p>"},{"location":"algorithms/inverse_problem_theory/#the-direct-problem","title":"The direct problem","text":"<p>In a direct problem:</p> \\[ set of\\ parameters \\rightarrow theory \\rightarrow prediction \\] <p>i.e. \\(\\(g(\\vec{m}) = d\\)\\) This means that a direct problem has a single solution.</p> <p>Example of direct problem: calculate the travel time of a P-wave.</p> \\[ t = t_{0} \\ + \\ \\frac{\\sqrt{(x_{s} - x_{r})^{2} + (z_{s} - z_{r})^{2} }}{V} \\]"},{"location":"algorithms/inverse_problem_theory/#the-inverse-problem","title":"The inverse problem","text":"<p>In an inverse problem:</p> \\[ observed\\ or\\ synthetic\\ data\\ \\rightarrow model \\] <p>i.e.</p> \\[\\vec{m}=g^{-1}(d)\\] This means that in an inverse problem, there can be multiple solutions. \\(g\\) is not bijective. <p>Over the Gaussian hypothesis, the description of a data having a density of probability \\(\\rho\\) is:</p> \\[ \\rho(d) = \\frac{1}{\\sigma \\sqrt{2\\pi}} exp \\left( \\frac{-(d - E(d))^{2}}{2 \\sigma^{2}} \\right) \\] <p>Knowing the model, it becomes:</p> \\[ \\rho(d \\mid \\vec{m}) = \\frac{1}{\\sigma \\sqrt{2\\pi}} exp \\left( \\frac{-(d - g(\\vec{m}))^{2}}{2 \\sigma^{2}} \\right) \\] <p>For multiple data sets:</p> \\[ \\rho(\\vec{d} \\mid \\vec{m}) = \\prod_{i=1}^N \\rho(d_i \\mid \\vec{m})= \\prod_{i=1}^N \\frac{1}{\\sigma_i \\sqrt{2\\pi}} exp \\left( \\frac{-(d_i - g_i(\\vec{m}))^{2}}{2 \\sigma_i^{2}} \\right) \\] <p>When \\(d=d_{obs}\\), this equation is also known as the likelyhood:</p> \\[ \\rho(\\vec{d_{obs}} \\mid \\vec{m}) = \\prod_{i=1}^N \\rho(d_{i, obs} \\mid \\vec{m})= \\prod_{i=1}^N \\frac{1}{\\sigma_i \\sqrt{2\\pi}} exp \\left( \\frac{-(d_{i, obs} - g_i(\\vec{m}))^{2}}{2 \\sigma_i^{2}} \\right) \\]"},{"location":"algorithms/inverse_problem_theory/#bayes-theorem-and-development","title":"Bayes theorem and development","text":"<p>The more general expression of an inverse problem is:</p> \\[ \\rho (\\vec{m} \\mid \\vec{d_{obs}}) = \\frac{\\rho(\\vec{m}) \\rho( \\vec{d_{obs}} \\mid \\vec{m})}{\\int\\ \\rho(\\vec{m}) \\rho( \\vec{d_{obs}} \\mid \\vec{m}) \\ d\\vec{m}} = \\mathcal{K} \\ \\rho(\\vec{m}) \\rho( \\vec{d_{obs}} \\mid \\vec{m}) \\] \\[ \\rho (\\vec{m} \\mid \\vec{d_{obs}}) = \\frac{\\mathcal{K} \\rho(\\vec{m})}{2}  \\left( \\prod_{i=0}^N \\frac{1}{\\sigma_i \\sqrt{2\\pi}} \\right) \\sum_{i=1}^N exp \\left( \\frac{-(d_{i, obs} - g_{i}(\\vec{m}))^2}{\\sigma_i^2} \\right) \\] <p>This defines \\(\\mathcal{X}(\\vec{m})\\):</p> \\[ \\mathcal{X}(\\vec{m}) = \\frac{(d_{i, obs} - g_{i}(\\vec{m}))^2}{\\sigma_i^2} \\] <p>Note that \\(\\mathcal{X}(\\vec{m})\\) can also be written using a matrix form:</p> \\[ \\mathcal{X}(\\vec{m}) =  (\\vec{d_{obs}} - \\vec{g}(\\vec{m}))^T \\begin{pmatrix} 1/\\sigma_i^2 &amp; 0 &amp; 0 \\\\ 0 &amp; 1/\\sigma_i^2 &amp; 0 \\\\ 0 &amp; 0 &amp; 1/\\sigma_i^2 \\end{pmatrix} (\\vec{d_{obs}} - \\vec{g}(\\vec{m})) \\] \\[ \\mathcal{X}(\\vec{m}) = (\\vec{d_{obs}} - \\vec{g}(\\vec{m}))^T \\ C_{d}^{-1} \\  (\\vec{d_{obs}} - \\vec{g}(\\vec{m})) \\] <p>\\(C_d^{-1}\\) is the covariance matrix of the data. If the data are independent, there are only diagonal coefficients, otherwise extradiagonal coefficients appear.</p> <p>And then:</p> \\[ \\rho (\\vec{m} \\mid \\vec{d_{obs}}) = \\frac{\\mathcal{K} \\rho(\\vec{m})}{2}  \\left( \\prod_{i=0}^N \\frac{1}{\\sigma_i \\sqrt{2\\pi}} \\right) \\sum_{i=1}^N exp \\left( - \\mathcal{X}(\\vec{m}) \\right) \\] <p>If only the covariance matrix \\(C_d^{-1}\\) is diagonal:</p> \\[ \\rho (\\vec{m} \\mid \\vec{d_{obs}}) = \\frac{\\mathcal{K} \\rho(\\vec{m})}{(2\\pi)^{\\frac{N}{2}} \\sqrt{det\\ C_d}} exp \\left( - \\frac{1}{2} (\\vec{d_{obs}} - \\vec{g}(\\vec{m}))^T \\ C_{d}^{-1} \\  (\\vec{d_{obs}} - \\vec{g}(\\vec{m})) \\right) \\] <p>There are now two approaches to solve the inverse problem if \\(\\sigma_i\\) is known:</p> <ol> <li>The determinist approach consisting in minimizing \\(\\mathcal{X}(\\vec{m})\\). The final result is a single model that is the closest to the input data \\(d_{i, obs}\\).</li> <li>The probabilistic approach consisting in exploring the space of models and to describe the shape of \\(\\mathcal{X}(\\vec{m})\\).</li> <li>The stochastic approach testing every set of parameters (inneficient)</li> </ol>"},{"location":"algorithms/markov_chain_monte_carlo/","title":"Markov Chain - Monte Carlo","text":"<p>Quote</p> <ul> <li>7.1 Background | Advanced Statistical Computing (bookdown.org)</li> </ul>"},{"location":"algorithms/markov_chain_monte_carlo/#theory","title":"Theory","text":"<p>A Markov chain is a stochastic process that evolves over time by transitioning into different states.</p> <p>The sequence of states is denoted by the collection \\(\\{X_{i}\\}\\). The Markov property tells that:</p> \\[ P(X_{t} \\mid X_{t-1}, X_{t-2}, ..., X_{0}) = P(X_{t} \\mid X_{t-1}) \\] <p>i.e. we can determine the distribution of the next value only knowing the distribution of the current value.</p> <p>The collection of states that theMarkov chain can visit is the state space.</p> <p>The quantity governing the probability that the chain moves from one state to another is the transition kernel or transition matrix \\(P_{ij}\\)</p> \\[ P(X_{n+1} = j \\mid X_{n} = i) = P_{ij} \\] <p>It is possible to get the probability distribution for any number of iterations in the process \\(n\\in\\mathbb{N^{*}}\\) If there are 3 states: {1, 2, 3}, and at the start, the state is at 3, then the stating probability distribution is denoted by \\(\\pi_{0} = (0, 0, 1)\\).</p> <p>At the first iteration, the probability distribution is \\(\\pi_{1} =\\pi_{0} P\\) At the \\(n^{th}\\) iteration, \\(\\pi_{n} =\\pi_{0} P^{(n)}\\)</p> <p>The markov chain is said to be stationary if \\(\\pi_{\\star} =\\pi_{\\star} P\\) and \\(\\lim_{n \\rightarrow \\infty} \\pi_{n} = \\pi_{\\star}\\)</p> <p>There are three asumtions for the Markov chain:</p> <ol> <li>The stationarity distribution \\(\\pi_{\\star}\\) exists </li> <li>The chain is irreductible meaning that any state can be reached with a certain amount of iterations</li> <li>The chain is aperiodic meaning that it should not visit certain types of numbers depending on the iteration (e.g. visit odd numbers when \\(n\\) is odd etc...)</li> </ol> <p>The Markov chain is time reversible meaning that moving in the 'forward' direction is equal in distribution to the same sequence in the 'backward' direction (called the local balance equation):</p> \\[ \\pi_{i} P(i, j) = \\pi_{j} P(j, i) \\]"},{"location":"algorithms/markov_chain_monte_carlo/#summary-of-the-mcmc","title":"Summary of the MCMC","text":"<ol> <li>We want to sample from a complicated density\u00a0\\(\\pi\\).</li> <li>We know that aperiodic and irreducible Markov chains with a stationary distribution\u00a0\\(\\pi\\)\u00a0will eventually converge to that stationary distribution.</li> <li>We know that if a Markov chain with transition matrix\u00a0\\(P\\)\u00a0is time reversibile with respect to\u00a0\\(\\pi\\)\u00a0then\u00a0\\(\\pi\\)\u00a0must be the stationary distribution of the Markov chain.</li> <li>Given a chain governed by transition matrix\u00a0\\(P\\), we can simulate it for a long time and eventually we will be simulating from\u00a0\\(\\pi\\).</li> </ol>"},{"location":"algorithms/metropolis_hastings/","title":"Metropolis Hastings","text":"<p>Quote</p> <ul> <li>7.2 Metropolis-Hastings | Advanced Statistical Computing (bookdown.org)</li> </ul>"},{"location":"algorithms/metropolis_hastings/#theory","title":"Theory","text":"<p>The Mettropolis-Hastings alogorithm is am iterratve algorithm where at each stage, there are three steps:</p> <p>Let \\(q(Y \\mid X )\\) be a transition density for p-dimensional \\(X\\) and \\(Y\\) from which we can easily simulate. Let \\(\\pi (X)\\) be the target density (the stationnary distribution that our Markov chain will eventually converge to).</p> <ol> <li>Suppose we are currently in stage \\(x\\) and we want to know how to move to the next state in the state space. Simulate a candidate value \\(y \\sim q(Y \\mid x)\\). The candidate value depends on our current state \\(x\\).</li> <li> <p>Let the acceptance ratio be:</p> \\[ \\alpha (y \\mid x)=min \\left\\{ \\frac {\\pi(y)q(x \\mid y)}{\\pi(x)q(y \\mid x)}, 1 \\right\\} \\] </li> <li> <p>Simulate \\(u \\sim \\mathcal{U}(0, 1)\\). If \\(u \\leq \\alpha(y \\mid x)\\) then the next state is equal to \\(y\\), otherwise we stay on \\(x\\).</p> </li> </ol> <p>These three steps reprensent the transition kernel of the Markov chain from which we are simulating.</p>"},{"location":"algorithms/metropolis_hastings/#properties","title":"Properties","text":"<p>From the MCMC properties:</p> <ul> <li>The transition kernel \\(\\mathcal{K}\\) is time reversible i.e. \\(\\pi (y) \\mathcal{K}(x \\mid y) = \\pi(x) \\mathcal{K}(y \\mid x)\\) </li> </ul>"},{"location":"algorithms/metropolis_hastings/#variants-of-the-m-h-algorithm","title":"Variants of the M-H algorithm","text":""},{"location":"algorithms/metropolis_hastings/#random-walk-metropolis-hastings","title":"Random walk Metropolis-Hastings","text":"<p>Example: the random walk Metropolis-Hastings can be used to sample from a normal distribution. Let \\(g\\) be a uniform distribution over the interval \\((-\\delta, \\delta)\\) \\(\\forall \\delta &gt; 0\\).</p> <ol> <li>Simulate \\(\\epsilon \\sim \\mathcal{U}(-\\delta, \\delta)\\) and let \\(y = x + \\epsilon\\) </li> <li>Compute     $$     \\alpha (y \\mid x) = min \\left( \\frac{\\phi(y)}{\\phi(x), 1} \\right)     $$ where \\(\\phi\\) is the stantard normal density.</li> <li>Simulate \\(u \\sim \\mathcal{U}(0, 1)\\), If \\(u \\leq \\alpha(y \\mid x)\\) then accept \\(y\\) as the next state, otherwise stay on \\(x\\)</li> </ol>"},{"location":"algorithms/metropolis_hastings/#independance-metropolis-hastings","title":"Independance Metropolis-Hastings","text":"<p>In this variant, the candidate proposal do not depend on the current state \\(x\\), so \\(q(y \\mid x) = q(y)\\).</p> <p>The bahaviour is the same as the standard algorithm appart from the acceptance ratio that is modified into:</p> \\[ \\alpha (y \\mid x) = min \\left\\{ \\frac{\\pi(y)q(x)}{\\pi(x)q(y)}, 1 \\right\\} \\]"},{"location":"algorithms/metropolis_hastings/#slice-sampler","title":"Slice sampler","text":""},{"location":"algorithms/metropolis_hastings/#hit-and-run-sampler","title":"Hit and run sampler","text":""},{"location":"algorithms/metropolis_hastings/#single-component-metropolis-hastings","title":"Single component Metropolis-Hastings","text":""},{"location":"algorithms/numerical_optimization/","title":"Numerical Optimization","text":"<p>Optimization techniques are classified into 2 parts:</p> <ol> <li>Local - gradient based optimization algorithms</li> <li>Global - non gradient based optimization algorithms</li> </ol> <p>Their purpose is to minimize the objective function for the given variables.</p>"},{"location":"algorithms/numerical_optimization/#general-scheme","title":"General scheme","text":"<p>Minimize \\(f(x)\\) where \\(x \\in \\mathcal{R}^n\\) represents the \\(n\\) design variables modified to obtain the optimum.</p> <p>Optimum \\(x\\) can be found in an iterative way:</p> \\[ x^q = x^{q-1}+\\alpha^* S^q \\] <p>where q is the iteration index, \\(S^q\\) the search direction at the iteration \\(q\\) and \\(\\alpha^*\\) the optimum step size.</p> <p>For most problems, the gradient is not known and is retrieved using finite differences.</p> <p>Estimating gradient through FDM has a step-dependent accuracy. Automatic differentiation can be used to get accurate precision. Griewank and Walther (2008)</p>"},{"location":"algorithms/numerical_optimization/#karush-kuhn-tucker-kkt-condition","title":"Karush - Kuhn - Tucker (KKT) condition","text":"<p>This condition is used to determine if a constrained local optimum has been found. It can be summarized as:</p> <ul> <li>The optimum design point \\(x^*\\) must be feasible</li> <li> <p>At the optimum point, the gradient of the Lagrangian must vanish</p> \\[ \\nabla f(x^*) + \\sum_{j=1}^{m} \\lambda_j \\nabla g_j (x^*) + \\sum_{k=1}^p \\lambda_{m+k} \\nabla h_k (x^*) = 0 \\] </li> <li> <p>For each inequality constraint \\(\\lambda_j g_j (X)=0\\) with \\(j=1, m\\)</p> </li> </ul>"},{"location":"algorithms/numerical_optimization/#local-gradient-based-optimization-algorithms","title":"Local - gradient based optimization algorithms","text":"<p>Advantages</p> <ul> <li>Uses the gradient to find optimums</li> <li>Are very popular for their efficiency</li> <li>Can solve problems with large number of variables</li> <li>Require little parameter tuning</li> </ul> <p>Drawbacks</p> <ul> <li>Only locate a local optimum</li> <li>Difficulties solving discrete optimization problems</li> <li>Complex algorithms difficult to implement efficiently</li> <li>Susceptible to numerical noise</li> </ul> <p>!!! note The different gradient based algorithms mostly differs in the logic used to determine the search direction.</p>"},{"location":"algorithms/numerical_optimization/#newtons-method","title":"Newton's method","text":"<p>The Newton's method is:</p> <ul> <li>an unconstrained algorithm</li> <li>derived from the \\(2^{nd}\\) order Taylor series expansion of the objective function at an initial design point \\(x^0\\)</li> <li>quadratic convergence rate (quick)</li> </ul> <p>Take the second order Taylor series:</p> \\[ f(x) \\approx f(x^0) + \\nabla (f(x^0))^T (x-x_0) + \\frac{1}{2}(x-x_0)^T H(x^0)(x-x_0) \\] <p>where \\(H(x^0)\\) is the Hessian matrix containing the second order gradient information of the objective function.</p> <p>Apply the Karush-Kuhn-Tucker conditions and it simplifies in the classic Newton's method form:</p> \\[ x = x^0 - (H(x^0))^{-1} \\nabla f(x^0) \\] <p>The corresponding search direction is provided by the second member: \\(- (H(x^0))^{-1} \\nabla f(x^0)\\). It has a unit step in this form.</p>"},{"location":"algorithms/numerical_optimization/#unconstrained-optimization","title":"Unconstrained optimization","text":"<p>Two popular methods:</p> <ul> <li>Fletcher-Reeves</li> <li>Conjugate gradient method</li> <li>Conjugate search directions are created using information gained from the previous design iteration</li> <li>Broyden-Fletcher-Goldfarb-Shanno (BFGS) (quasi-Newton / )</li> <li>Part of the family variable metric method</li> <li>Creates an approximation of the Hessian matrix \\((H(x^0))^{-1}\\) (therefore a quasi-Newton method)</li> <li>superior mathematically to Fletcher-Reeves but computationally more intensive</li> </ul>"},{"location":"algorithms/numerical_optimization/#constrained-optimization","title":"Constrained optimization","text":"<ul> <li>Sequential Unconstrained Minimization Techniques (SUMT), Fiacco and McCormick (1968)</li> <li>The SUMT approach solves the general constrained optimization problem by first converting it to an equivalent unconstrained problem.</li> <li>This equivalent unconstrained problem is then solved using any one of the unconstrained algorithms (Newton, quasi-Newton, etc...)</li> <li>Obtains an equivalent unconstrained problem by penalizing the original objective function for any constraint violations.</li> <li>Have become less popular as the direct (or constrained) methods became more mature and efficient.</li> <li>Sequential Constrained - Direct Minimization Techniques</li> <li>Sequential Linear Programming (SLP) algorithm</li> <li>Modified Method of Feasible Directions (MMFD) algorithm</li> <li>Sequential Quadratic Programming (SQP) algorithm</li> </ul>"},{"location":"algorithms/numerical_optimization/#global-non-gradient-based-optimization-algorithms","title":"Global - non gradient based optimization algorithms","text":"<p>Popular examples:</p> <ul> <li>Nelder-Mead simplex algorithm</li> <li>based on the concept of conjugate directions</li> <li>Powell\u2019s method</li> <li>makes use of a simplex and a set of simple rules that reflects the worst vertex through the center of the simplex</li> </ul> <p>Global optimization algorithms may be classified as either evolutionary algorithms or deterministic algorithms.</p>"},{"location":"algorithms/numerical_optimization/#evolutionary-algorithms","title":"Evolutionary algorithms","text":"<p>Venter, 2010</p> <p>Unlike the local techniques, where a single design point is updated (typically using gradient information) from one iteration to the next, these algorithms do not require any gradient information and typically make use of a set of design points (generally referred to as a population) to find the optimum design.</p>"},{"location":"algorithms/numerical_optimization/#deterministic-algorithms","title":"Deterministic algorithms","text":"<p>There are also many deterministic algorithms developed specifically to solve global optimization problems.  Many of the global optimization algorithms are specialized to solve only a narrow class of problems. </p> <p>One popular general purpose deterministic global optimization algorithm is the DIRECT algorithm by Jones, Perttunen and Stuckman (1993)</p> <p>An excellent survey of global optimization algorithms is provided by Neumaier (2004).</p>"},{"location":"algorithms/numerical_optimization/#newton-raphson-method","title":"Newton-Raphson method","text":"<ol> <li>Objective: Minimize the distance function \\(f(x, y)\\).</li> <li>Define the Function: Clearly define your distance function \\(f(x, y)\\) in terms of the input parameters \\(x\\) and \\(y\\).</li> <li> <p>Compute the Gradient and Hessian:</p> </li> <li> <p>Compute the gradient vector \\(\\nabla f(x, y)\\), where each component is the partial derivative of \\(f\\) with respect to \\(x\\) and \\(y\\).</p> </li> <li> <p>Compute the Hessian matrix \\(H(x, y)\\), where each element is the second partial derivative of \\(f\\) with respect to the corresponding variables.</p> </li> <li> <p>Newton-Raphson Update:</p> </li> <li> <p>At each iteration \\(k\\), compute the next approximation \\((x_{k+1}, y_{k+1})\\) using the formula:</p> <p>$$  \\begin{bmatrix}  x_{k+1} \\  y_{k+1}  \\end{bmatrix}  =  \\begin{bmatrix}  x_k \\  y_k  \\end{bmatrix}  -  H(x_k, y_k)^{-1}  \\cdot  \\nabla f(x_k, y_k)  $$</p> </li> <li> <p>Termination Criteria: Continue the iteration until a satisfactory solution is obtained or until a termination criterion is met. This could be based on the magnitude of the gradient, the change in the function value, or a maximum number of iterations.</p> </li> <li> <p>Optimal Solution: The solution \\((x, y)\\) obtained from the Newton-Raphson method represents the point where the distance function is minimized, indicating the point closest to the target.</p> </li> </ol> <p>Keep in mind that the success of the Newton-Raphson method depends on the properties of your function, the choice of initial guess, and potential numerical stability issues. If the function has multiple local minima or other peculiarities, different optimization methods may be considered. Additionally, it's essential to check for convergence and handle cases where the Hessian matrix is singular or nearly singular.</p>"},{"location":"algorithms/numerical_optimization/#newton-method","title":"Newton method","text":"<p>It is indeed possible to use a simplified version of the Newton-Raphson method that only involves the first derivatives (gradients) and the function values. This approach is known as the Newton's method with line search or Newton's method without the Hessian matrix.</p> <p>Here's how it works:</p> <ol> <li> <p>Objective: Minimize the distance function \\(f(x, y)\\).</p> </li> <li> <p>Define the Function: Clearly define your distance function \\(f(x, y)\\) in terms of the input parameters \\(x\\) and \\(y\\).</p> </li> <li> <p>Compute the Gradient:</p> </li> <li> <p>Compute the gradient vector \\(\\nabla f(x, y)\\), where each component is the partial derivative of \\(f\\) with respect to \\(x\\) and \\(y\\).</p> </li> <li> <p>Newton's Method Update:</p> </li> <li> <p>At each iteration \\(k\\), compute the next approximation \\((x_{k+1}, y_{k+1})\\) using the formula:</p> <p>$$  \\begin{bmatrix}  x_{k+1} \\  y_{k+1}  \\end{bmatrix}  =  \\begin{bmatrix}  x_k \\  y_k  \\end{bmatrix}  -  \\alpha_k \\nabla f(x_k, y_k)  $$</p> <p>where \\(\\alpha_k\\) is a step size determined by a line search method. Common line search methods include the Armijo rule or the Wolfe conditions.</p> </li> <li> <p>Termination Criteria: Continue the iteration until a satisfactory solution is obtained or until a termination criterion is met.</p> </li> <li> <p>Optimal Solution: The solution \\((x, y)\\) obtained from this simplified Newton's method represents the point where the distance function is minimized.</p> </li> </ol> <p>Using only first derivatives simplifies the update rule, but it also means that the method might require more iterations to converge compared to the full Newton-Raphson method with the Hessian matrix. Additionally, choosing an appropriate step size through line search becomes crucial for convergence. Depending on the properties of your specific problem, this simplified approach can still be effective and computationally efficient.</p>"},{"location":"algorithms/numerical_optimization/#conjugate-gradient-method","title":"Conjugate gradient method","text":"<p>Certainly! The conjugate gradient method is an iterative algorithm used to solve systems of linear equations, particularly those arising from the discretization of partial differential equations. It's particularly useful when dealing with large sparse symmetric positive definite matrices, which are common in various scientific and engineering applications.</p> <p>Here's a simplified explanation of how the conjugate gradient method works:</p> <ol> <li> <p>Initialization: Choose an initial guess for the solution \\(x_0\\), and set the residual \\(r_0 = b - Ax_0\\), where \\(A\\) is the coefficient matrix of the linear system, and \\(b\\) is the right-hand side vector.</p> </li> <li> <p>Iteration:</p> </li> <li> <p>Calculate the direction vectors \\(p_i\\) that are conjugate to each other. Conjugate directions ensure that the method progresses efficiently.</p> </li> <li> <p>Compute the negative gradient direction</p> \\[ p_k=-\\nabla f(x_k, y_k) \\] </li> <li> <p>Choose the step size \\(\\alpha_k\\)\u200b using a line search method, such as the [[#Armijo rule]] or the [[#Wolf rule]]. This determines how far to move in the negative gradient direction.</p> \\[ \\begin{bmatrix} x_{k+1} \\\\ y_{k+1} \\end{bmatrix} = \\begin{bmatrix} x_k \\\\ y_k \\end{bmatrix} + \\alpha_k p_k \\] </li> <li> <p>Compute the new gradient vector \\(\\nabla f(x_{k+1}, y_{k+1})\\)</p> </li> <li> <p>Compute the beta value for the conjugate direction</p> \\[ \\beta_k = \\frac{\\nabla f(x_{k+1}, y_{k+1})^T \\nabla f(x_{k+1}, y_{k+1})}{\\nabla f(x_k, y_k)^T \\nabla f(x_k, y_k)} \\] </li> <li> <p>Update the conjugate direction:</p> \\[ p_{k+1} = -\\nabla f(x_{k+1}, y_{k+1}) + \\beta_k p_k \\] </li> <li> <p>Termination Criteria: The process continues until a satisfactory solution is obtained or until a termination criterion is met (such as reaching a certain tolerance level for the residual or a maximum number of iterations).</p> </li> </ol> <p>The key idea behind the conjugate gradient method is to find the solution in a sequence of conjugate directions, which minimizes the error function \\(\\| r_k \\|\\) in the Euclidean norm.</p> <p>One of the advantages of the conjugate gradient method is that it typically converges more quickly than other iterative methods for solving linear systems, especially for large, sparse, symmetric positive definite matrices. This efficiency makes it particularly suitable for problems where storage requirements or computational resources are limited.</p> <p>Overall, the conjugate gradient method provides an efficient and robust approach for solving large linear systems arising from various scientific and engineering applications.</p>"},{"location":"algorithms/numerical_optimization/#choosing-the-step-size-line-search","title":"Choosing the step size - line search","text":"<p>Choosing the step size \\(\\alpha\\) in the Newton's method with line search is a crucial aspect of ensuring convergence and efficiency. There are various strategies to determine the step size, and two common methods are the Armijo rule and the Wolfe conditions.</p> <p>When implementing Newton's method with line search, you typically start with an initial \\(\\alpha\\) and iteratively adjust it based on these conditions until they are satisfied. If the conditions are not met, you reduce the step size and try again.</p> <p>The choice of constants (\\(c_1\\) and \\(c_2\\)) can affect the performance, and sometimes different problems may require tuning these parameters. Experimentation and fine-tuning based on the characteristics of your specific optimization problem are common practices.</p>"},{"location":"algorithms/numerical_optimization/#armijo-rule","title":"Armijo rule","text":"<p>The Armijo rule is a simple and widely used line search method. It ensures that the function value decreases sufficiently along the search direction.</p> <p>The basic idea is to choose the largest \\(\\alpha\\) that satisfies the Armijo condition: $$ f(x_k + \\alpha \\nabla f(x_k)) \\leq f(x_k) + c_1 \\alpha \\nabla f(x_k)^T \\nabla f(x_k) $$ where \\(c_1\\) is a small positive constant (usually between 0 and 1) controlling the sufficient decrease in the function value.</p>"},{"location":"algorithms/numerical_optimization/#wolf-rule","title":"Wolf rule","text":"<p>The Wolfe conditions are more refined and include both a sufficient decrease condition and a curvature condition.</p> <ul> <li>Sufficient Decrease (Armijo) Condition:</li> </ul> \\[ f(x_k + \\alpha \\nabla f(x_k)) \\leq f(x_k) + c_1 \\alpha \\nabla f(x_k)^T \\nabla f(x_k) \\] <ul> <li>Curvature Condition:</li> </ul> \\[ \\nabla f(x_k + \\alpha \\nabla f(x_k))^T \\nabla f(x_k) \\geq c_2 \\nabla f(x_k)^T \\nabla f(x_k) \\] <p>where \\(c_1\\) and \\(c_2\\) are constants with \\(0 &lt; c_1 &lt; c_2 &lt; 1\\). The curvature condition ensures that the step size is not too small.</p>"},{"location":"algorithms/numerical_optimization/#c-code-structure-example-for-optimization-with-different-backends","title":"C++ code structure example for optimization with different backends","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;Eigen/Dense&gt;\n#include &lt;functional&gt;\n\n// Define the objective function to be minimized\ndouble objectiveFunction(const Eigen::VectorXd&amp; x) {\n    // Define your objective function here\n    // Example: f(x) = x^2\n    return x[0] * x[0];\n}\n\n// Define the gradient of the objective function\nEigen::VectorXd gradient(const Eigen::VectorXd&amp; x) {\n    // Compute the gradient of your objective function here\n    // Example: f'(x) = 2*x\n    return 2 * x;\n}\n\n// Define the Hessian matrix of the objective function (for Newton methods)\nEigen::MatrixXd hessian(const Eigen::VectorXd&amp; x) {\n    // Compute the Hessian matrix of your objective function here\n    // Example: f''(x) = 2\n    return Eigen::MatrixXd::Constant(x.size(), x.size(), 2);\n}\n\n// Generic optimization function using different backends\ntemplate &lt;typename Optimizer&gt;\nEigen::VectorXd minimize(Optimizer&amp; optimizer, const std::function&lt;double(const Eigen::VectorXd&amp;)&gt;&amp; f,\n                         const std::function&lt;Eigen::VectorXd(const Eigen::VectorXd&amp;)&gt;&amp; grad,\n                         const std::function&lt;Eigen::MatrixXd(const Eigen::VectorXd&amp;)&gt;&amp; hessian,\n                         const Eigen::VectorXd&amp; initialGuess, int maxIterations) {\n    // Call the optimization method\n    Eigen::VectorXd result = optimizer.minimize(f, grad, hessian, initialGuess, maxIterations);\n\n    return result;\n}\n\n// Newton method implementation\nclass NewtonOptimizer {\npublic:\n    Eigen::VectorXd minimize(const std::function&lt;double(const Eigen::VectorXd&amp;)&gt;&amp; f,\n                             const std::function&lt;Eigen::VectorXd(const Eigen::VectorXd&amp;)&gt;&amp; grad,\n                             const std::function&lt;Eigen::MatrixXd(const Eigen::VectorXd&amp;)&gt;&amp; hessian,\n                             const Eigen::VectorXd&amp; initialGuess,\n                             int maxIterations) \n    {\n        // Implement the Newton method here\n        Eigen::VectorXd x = initialGuess;\n\n        for (int iter = 0; iter &lt; maxIterations; ++iter) {\n            // Update x using the Newton method update rule\n            x -= hessian(x).ldlt().solve(grad(x));\n\n            // Check for convergence using your criteria\n            // Implement your convergence criteria here\n\n            // Break if converged\n        }\n\n        return x;\n    }\n};\n\nint main() {\n    // Set your initial guess\n    Eigen::VectorXd initialGuess(1);\n    initialGuess &lt;&lt; 1.0;\n\n    // Use Newton method\n    NewtonOptimizer newtonOptimizer;\n    Eigen::VectorXd resultNewton = minimize(newtonOptimizer, objectiveFunction, gradient, hessian, initialGuess, 1000);\n    std::cout &lt;&lt; \"Newton Method Result: \" &lt;&lt; resultNewton[0] &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"algorithms/rejection_sampling/","title":"Rejection Sampling","text":"<p>Quote</p> <ul> <li>6.3 Rejection Sampling | Advanced Statistical Computing (bookdown.org)</li> </ul> <p>Rejection sampling can be used to generate samples of a random variable with density f and there is not a built in function for it.</p>"},{"location":"algorithms/rejection_sampling/#principle","title":"Principle","text":"<p>If one can not sample from the density \\(f\\) (target density), one can find a density \\(g\\) (candidate density)**, like a normal or t-distribution from which it's easy to sample because \\(g\\) is known. Then it's possible to sample g and reject samples in a strategic way to make the non-rejected samples look like they came from f density:</p> \\[ P \\left( X \\leq t \\mid X_{accepted} \\right) = \\frac{P \\left( X \\leq t, X_{accepted}\\right)}{P{X_{accepted}}} = F(t) \\] <p>This shows that the distribution function of the candidate values, given that they are accepted is equal to the distribution function corresponding to the target density.</p> <p>To allow for \\(f\\) sampling while \\(g\\) is sampled, the support of \\(f\\) has to be included in the support of \\(g\\). In fact, if there is a region of the support of \\(f\\) that \\(g\\) can not touch, then this area will not get sampled. In practice, \\(g\\) should be chosen in order to match as closely as possible to \\(f\\).</p>"},{"location":"algorithms/rejection_sampling/#algorithm","title":"Algorithm","text":"<p>Let c be the maximum of \\(f / g\\) on the support of \\(f\\):</p> \\[ c = \\sup_{x\\sim f} \\left( \\frac{f(x)}{g(x)} \\right)   \\] <p>Define a number of samples to achieve and while it is not reached, do:</p> <ol> <li>Simulate \\(U \\sim \\mathcal{U}(0, 1)\\)</li> <li>Simulate a candidate \\(X \\sim \\mathcal{g}\\) (candidate density)</li> <li>If     $$     U\\leq{\\frac{f(X)}{cg(X)}}     $$</li> </ol> <p>accept the candidate, otherwise reject it and go back to the beginning.</p> <p>This implies that f can be evaluated (to determine the acceptance ratio)</p>"},{"location":"algorithms/rejection_sampling/#properties-of-rejection-sampling","title":"Properties of rejection sampling","text":"<p>The number of draws we need to take from the candidate density \\(g\\) before we accept a candidate is a geometric random variable with success probability</p> \\[ P(X_{accepted})= P \\left( U \\leq \\frac{f(X)}{cg(X)} \\right)=\\frac{1}{c} \\] <p>This explains why the fact that \\(g\\) is close to \\(f\\) make the candidate be accepted with higher chances. The higher c, the lower the acceptance probability.</p>"},{"location":"algorithms/simulated_annealing/","title":"Simulated Annealing","text":""},{"location":"algorithms/simulated_annealing/#links","title":"Links","text":"<p>Quote</p> <p>7.5 Simulated Annealing | Advanced Statistical Computing (bookdown.org)</p>"},{"location":"algorithms/simulated_annealing/#theory","title":"Theory","text":"<p>Simulated annealing is a techniaue for minimizing functions using Markov Chain Monte Carlo (MCMC) samplers. It is very usefull for wiggly functions that classic Newton-style optimizers can not handle.</p> <p>Let \\(h(\\theta)\\) be the function for which we want to find the minimum. Let \\(\\theta\\) be the vector of parameters in the space \\(S\\).</p> <p>The idea is to build successive approximations of the target density \\(\\pi(\\theta)\\) until it is very close to the final one.</p> <p>Let the uniform distribution over all the global minimizers be such that:</p> \\[ S\\star = \\{ \\theta \\in S : h(\\theta) = min_{\\theta}( h(\\theta)) \\} \\] <p>and define</p> \\[ \\left\\{     \\begin{array}{11}         \\pi(\\theta) \\propto 1 &amp;&amp; \\forall \\theta \\in S \\star \\\\         \\pi(\\theta) = 0 &amp;&amp;\\forall \\theta \\notin S \\star     \\end{array} \\right. \\] <p>The uttimate goal is to find a way to sample from \\({\\pi(\\theta)}\\).</p> <p>First begin to build am approximate density called \\(\\pi_{T} (\\theta)\\) where</p> \\[ \\pi_{T}(\\theta) \\propto exp{\\left( \\frac{-h(\\theta)}{T} \\right)} \\] <p>T is the temperature.</p> <ol> <li>As \\(T \\rightarrow \\infty\\), \\(\\pi(T)\\) approaches to unifrom density</li> <li>As \\(T \\rightarrow 0\\), \\(\\pi(T) \\rightarrow \\pi(\\theta)\\)</li> </ol> <p>The aim is to draw many samples from\u00a0\\(\\pi_{T}(\\theta)\\) initially with a large value of\u00a0\\(T\\), and to lower\u00a0\\(T\\)\u00a0towards\u00a0\\(0\\)\u00a0slowly. As we lower\u00a0\\(T\\), the density\u00a0\\(\\pi_{T}(\\theta)\\)\u00a0will become more and more concentrated around the minima of\u00a0\\(h(\\theta)\\).</p> <p>The general stategy is to start with a large temperature to explore the whole sample space and then decrease slowly \\(T\\) until the solution converges to a minima.</p> <p>The sample preocedure is the following: Choose a symmetric proposal density \\(q(. \\mid \\theta)\\), then for the iteration \\(n\\) with state \\(\\theta _{n}\\):</p> <ol> <li>Sample \\(\\quad \\theta \\star \\sim q(\\theta \\mid \\theta_{n})\\)</li> <li>Sample \\(\\quad U \\sim \\mathcal{U}(0, 1)\\)</li> <li>Compute     $$     \\alpha(\\theta \\star \\mid \\theta_{n}) = min \\left( \\frac{exp(-h(\\theta \\star)/T)}{exp(-h(\\theta_{n})/T)}, 1 \\right) = min \\left( exp \\left( \\frac{-(h(\\theta \\star - h(\\theta_{n})}{T} \\right), 1 \\right)     $$</li> <li>Accept \\(\\theta \\star\\) as the next state if \\(\\quad U \\leq \\alpha (\\theta \\star \\mid \\theta_{n})\\)</li> <li>Decrease the temperature T</li> </ol> <p>If \\(h(\\theta \\star) \\leq h(\\theta_{n})\\) then the proposal is always accepted so that the solution converges to the minimum. If \\(h(\\theta \\star) \\geq h(\\theta_{n})\\) then the proposal \\(\\theta \\star\\) has still a chance to be accepted (even if this solution is greater and we want to find the minima). This allows to avoid getting stuck in a local minima. As T decreses it becomes less likely that an uphill proposal is accepted (in order to converge to a minima).</p> <p>A cooling schedule for T has to be choosen, and in general:</p> \\[ T_{n} = \\frac{a}{log(n+b)} \\quad \\forall a, b &gt; 0 \\] <p>This make simulated annealing a very slow algorithm to converge.</p>"},{"location":"data_structures/data_structures/","title":"Data Structures","text":""},{"location":"data_structures/data_structures/#10-data-structures-often-used-in-real-life","title":"10 Data Structures often used in real life","text":""},{"location":"data_structures/digit_representations/","title":"Digit representations","text":""},{"location":"data_structures/digit_representations/#overview","title":"Overview","text":"<p>Info</p> <p>Binary code is a system of representing information using only two digits, 0 and 1. Each digit in a binary code is called a \"bit,\" and a sequence of bits represents a piece of information. Binary is the fundamental language of computers, and it forms the basis for all digital systems. Here's how binary code works:</p> <p>Computers use binary code internally because electronic circuits can easily represent two states (on/off, high/low voltage), corresponding to the binary digits 0 and 1. These binary states are the foundation of digital computing.</p> <ul> <li>Text: Characters are often represented in binary using character encoding schemes like ASCII or Unicode. Each character is assigned a unique binary code.</li> <li>Numbers: Binary code is used to represent integer and floating-point numbers. Binary-coded decimals (BCD) and two's complement are common binary representations for numbers.</li> <li>Images, Audio, and Video: These types of data are represented in binary as well. For example, pixels in an image may be represented using binary values to represent colors.</li> </ul> <p>Binary code is closely tied to Boolean logic, where the values 0 and 1 represent the logical states of false and true, respectively. In computer programming and digital circuit design, Boolean logic is used for decision-making and control flow.</p>"},{"location":"data_structures/digit_representations/#representations","title":"Representations","text":""},{"location":"data_structures/digit_representations/#binary-base-2","title":"Binary (base 2)","text":"<p>In the binary system, numbers are represented using powers of 2. Each digit in a binary number represents a power of 2:</p> <ul> <li>Example: Binary representation of 101101:</li> </ul> <p>\\(1 \\times 2^5 + 0 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 = 53\\)</p> Power Base 2 0 1 1 2 2 4 3 8 4 16 5 32 6 64 7 128 8 256 9 512 10 1 024 11 2 048 12 4 096 13 8 192 14 16 384 15 32 768 16 65 536 17 131 072 18 262 144 19 524 288 20 1 048 576 21 2 097 151 22 4 194 304 23 8 388 608 24 16 777 216 25 33 554 432 26 67 108 864 27 134 217 728 28 268 435 456 29 5 36870 912 30 1 073 741 824 31 2 147 483 648 32 4 294 967 296 64 18 446 744 073 709 551 616"},{"location":"data_structures/digit_representations/#binary-digits-bits-octet","title":"Binary Digits (Bits / octet)","text":"<ul> <li>Bit: The smallest unit of data in binary code is a bit, which can be either 0 or 1. The term \"bit\" is a contraction of \"binary digit.\"</li> <li>Byte: A group of 8 bits is called a byte. Bytes are commonly used to represent characters in computer systems.</li> <li>4 bits (nibble) can be represented using Hexadecimal notation</li> </ul>"},{"location":"data_structures/digit_representations/#hexadecimal","title":"Hexadecimal","text":"<p>In addition to binary, hexadecimal is often used to represent binary values more compactly.  Each hexadecimal digit represents four bits (a nibble).  The code representation starts with <code>0x</code> followed by the hexadecimal value (ex: <code>0xFF</code> is the decimal number <code>0xF.0 + 0xF.16 = 15 + 15.16 = 255</code>)</p> <p>Hexadecimal (or hex) is a base-16 numeral system. It is commonly used as a more human-friendly representation of binary-coded values, especially in computing and programming. Here's how hexadecimal representation works:</p>"},{"location":"data_structures/digit_representations/#1-hexadecimal-digits","title":"1. Hexadecimal Digits:","text":"<p>Hexadecimal uses 16 symbols to represent values, comprising the regular decimal digits (0-9) and six additional symbols represented by letters A to F. The hexadecimal digits are:</p> <pre><code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\n</code></pre> <p>Each hexadecimal digit corresponds to a 4-bit binary nibble (half-byte), making it convenient for representing binary values.</p>"},{"location":"data_structures/digit_representations/#2-conversion-from-binary-to-hexadecimal","title":"2. Conversion from Binary to Hexadecimal:","text":"<p>To convert a binary number to hexadecimal, replace each group of four binary digits with the corresponding hexadecimal digit:</p> <p>Example: Binary to Hexadecimal</p> <pre><code>Binary: 110101101010\nGrouped: 1101 0110 1010\nHexadecimal: D6A\nComputer representation: 0xD6A\n</code></pre>"},{"location":"data_structures/digit_representations/#3-conversion-from-hexadecimal-to-binary","title":"3. Conversion from Hexadecimal to Binary:","text":"<p>To convert a hexadecimal number to binary: replace each hexadecimal digit with its 4-bit binary representation.</p> <p>Example: Hexadecimal to Binary</p> <pre><code>Hexadecimal: B3A\nBinary: 1011 0011 1010\n</code></pre>"},{"location":"data_structures/digit_representations/#4-conversion-from-decimal-to-hexadecimal","title":"4. Conversion from Decimal to Hexadecimal:","text":"<p>To convert a decimal number to hexadecimal:</p> <ul> <li>Divide the decimal number by 16.</li> <li>Write down the remainder as the least significant digit (rightmost).</li> <li>Divide the quotient by 16 and repeat the process until the quotient is zero.</li> <li>The hexadecimal representation is the sequence of remainders read from bottom to top.</li> </ul> <p>Example: Decimal to Hexadecimal</p> <pre><code>Decimal: 482\n482 \u00f7 16 = 30 remainder 2\n30 \u00f7 16 = 1 remainder 14 (E in hexadecimal)\n1 \u00f7 16 = 0 remainder 1\nHexadecimal: 1EE\n</code></pre> <p>Example: Hexadecimal to Decimal:</p> <pre><code>  0x12345678\n\n  8 * 16^0  (least significant digit)\n+ 7 * 16^1\n+ 6 * 16^2\n+ 5 * 16^3\n+ 4 * 16^4\n+ 3 * 16^5\n+ 2 * 16^6\n+ 1 * 16^7  (most significant digit)\n-----------------\n  Decimal Result\n</code></pre>"},{"location":"data_structures/digit_representations/#5-usage-in-programming","title":"5. Usage in Programming:","text":"<p>Info</p> <p>Hexadecimal is widely used in programming for several reasons: - It provides a concise representation of binary data. - Memory addresses and byte values are often represented in hexadecimal. - Hexadecimal is used in color representations (RGB values in web development, for example). Understanding hexadecimal is crucial for working with low-level programming, memory addresses, and binary data representation in computing. It provides a more concise and human-readable way to represent binary values, especially when dealing with large or complex bit patterns.</p>"},{"location":"data_structures/digit_representations/#endianness","title":"Endianness","text":"<p>Endianness refers to the order in which bytes are stored in computer memory.</p> <p>It determines how a multi-byte data type, such as a 16-bit or 32-bit integer, is represented in memory. There are two common types of endianness: big-endian and little-endian.</p> <p>The choice of endianness is important when data is transferred between systems with different endianness or when data is stored persistently and needs to be read on a different platform.</p> <p>Different computer architectures and processors may use different endianness, so it's crucial to be aware of and account for it in situations where binary data is exchanged between systems.</p> <p>Fun fact</p> <p>The terms \"big-endian\" and \"little-endian\" originate from Jonathan Swift's \"Gulliver's Travels,\" where two factions of beings disagreed on whether to start eating boiled eggs from the big end or the little end. The analogy is used in computer science to describe byte-ordering conventions.</p> <ul> <li>Endianness swap</li> <li>Robust endianness conversion</li> </ul>"},{"location":"data_structures/digit_representations/#big-endian","title":"Big Endian","text":"<ul> <li>In a big-endian system, the most significant byte (the one with the highest address) is stored at the lowest memory address.</li> <li>The least significant byte is stored at the highest memory address.</li> </ul> <p>Example with a 32-bit integer <code>0x12345678</code>:    <pre><code>Address:  0x1000  0x1001  0x1002  0x1003\nData:     0x12    0x34    0x56    0x78\n</code></pre></p>"},{"location":"data_structures/digit_representations/#little-endian","title":"Little Endian","text":"<ul> <li>In a little-endian system, the least significant byte is stored at the lowest memory address.</li> <li>The most significant byte is stored at the highest memory address.</li> </ul> <p>Example with the same 32-bit integer <code>0x12345678</code>:    <pre><code>Address:  0x1000  0x1001  0x1002  0x1003\nData:     0x78    0x56    0x34    0x12\n</code></pre></p>"},{"location":"data_structures/digit_representations/#code-example","title":"Code example","text":"<p>Swap endianness of an integer type:</p> <pre><code>#include &lt;cstdint&gt;\n#include &lt;cstdio&gt;\n\n// optimized by the compiler in one bswap instruction\ntemplate &lt;typename T&gt;\nvoid SwapEndian(T &amp;val) {\n    union U {\n        T val;\n        std::array&lt;std::uint8_t, sizeof(T)raw;\n    } src, dst;\n\n    src.val = val;\n    std::reverse_copy(src.raw.begin(), src.raw.end(), dst.raw.begin());\n    val = dst.val;\n}\n\nvoid SwapEndian(std::uint16_t &amp;value) {\n    value = (value &gt;8) | (value &lt;&lt; 8);\n}\n\ntemplate&lt;&gt;\nvoid SwapEndian&lt;std::uint32_t&gt;(std::uint32_t &amp;value) {\n    std::uint32_t tmp = ((value &lt;&lt; 8) &amp; 0xFF00FF00) | ((value &gt;8) &amp; 0xFF00FF);\n    value = (tmp &lt;&lt; 16) | (tmp &gt;16);\n}\n\nvoid SwapEndian(std::uint64_t &amp;value) {\n    value = ((value &amp; 0x00000000FFFFFFFFull) &lt;&lt; 32) | ((value &amp; 0xFFFFFFFF00000000ull) &gt;32);\n    value = ((value &amp; 0x0000FFFF0000FFFFull) &lt;&lt; 16) | ((value &amp; 0xFFFF0000FFFF0000ull) &gt;16);\n    value = ((value &amp; 0x00FF00FF00FF00FFull) &lt;&lt; 8)  | ((value &amp; 0xFF00FF00FF00FF00ull) &gt;8);\n}\n\n\nint main() {\n    uint32_t originalValue = 0x12345678;\n    uint32_t swappedValue = SwapEndian(originalValue);\n\n    // Output the results\n    printf(\"Original value: 0x%08X\\n\", originalValue);\n    printf(\"Swapped value : 0x%08X\\n\", swappedValue);\n\n    return 0;\n}\n</code></pre>"},{"location":"data_structures/digit_representations/#twos-complement","title":"Twos complement","text":"<ol> <li>Identify the Sign Bit:</li> <li>In a two's complement representation, the leftmost bit (most significant bit) is the sign bit.</li> <li> <p>If the sign bit is 0, the number is positive. If it's 1, the number is negative.</p> </li> <li> <p>Positive Numbers:</p> </li> <li> <p>If the sign bit is 0, read the remaining bits as a standard binary representation of a positive number.</p> <p>Example: For the 8-bit binary number <code>01011010</code>, the sign bit is 0, so the number is positive. Reading the remaining bits (<code>1011010</code>) as standard binary gives the decimal value.</p> </li> <li> <p>Negative Numbers:</p> </li> <li>If the sign bit is 1, interpret the remaining bits as the two's complement of the positive value.</li> <li> <p>Invert all the bits (change 0s to 1s and vice versa) and then add 1 to the result to get the positive value.</p> <p>Example: For the 8-bit binary number <code>11001101</code>, the sign bit is 1, indicating a negative number. Inverting the bits (<code>00110010</code>) and adding 1 gives the positive value.</p> </li> </ol> <p>In an n-bit two's complement representation, the range is from -2^(n-1) to 2^(n-1) - 1. For example, in an 8-bit system, the range is from -128 to 127.</p>"},{"location":"data_structures/digit_representations/#integer","title":"Integer","text":""},{"location":"data_structures/digit_representations/#floating-point","title":"Floating-Point","text":""},{"location":"data_structures/digit_representations/#ieee-754","title":"IEEE 754","text":"<p>Quote</p> <ul> <li>IEEE precision</li> </ul> <p>Quote</p> <ul> <li>Wikipedia article</li> </ul> Precision Signe (bits) Biased exponent (bits) Mantisse (bits) Total (bits) simple 1 8 (range from -126 to 127) 23 32 double 1 11 (range from -1024 to 1023) 52 64"},{"location":"data_structures/digit_representations/#ibm","title":"IBM","text":"<p>Quote</p> <ul> <li>Wikipedia article</li> </ul> Precision Signe (bits) Biased exponent (bits) Mantisse (bits) Total (bits) simple 1 7 (range from -126 to 127) 24 32 double 1 8 (range from ) 55 64"},{"location":"data_structures/digit_representations/#bcd-binary-code-decimal","title":"BCD (Binary Code Decimal)","text":"<p>TODO</p>"},{"location":"data_structures/digit_representations/#ascii-and-extended-ascii-american-standard-code-for-information-interchange","title":"ASCII and extended ASCII (American Standard Code for Information Interchange)","text":"<p>TODO</p>"},{"location":"data_structures/digit_representations/#unicode","title":"Unicode","text":"<p>TODO</p>"},{"location":"data_structures/digit_representations/#utf-8-unicode-transformation-format-8-bits","title":"UTF-8 (Unicode Transformation Format 8-bits)","text":"<p>TODO</p>"},{"location":"data_structures/digit_representations/#utf-16-unicode-transformation-format-8-bits","title":"UTF-16 (Unicode Transformation Format 8-bits)","text":"<p>TODO</p>"},{"location":"data_structures/digit_representations/#utf-32-unicode-transformation-format-8-bits","title":"UTF-32 (Unicode Transformation Format 8-bits)","text":"<p>TODO</p>"},{"location":"data_structures/digit_representations/#ebcdic-extended-binary-coded-decimal-interchange-code","title":"EBCDIC (Extended Binary Coded Decimal Interchange Code)","text":"<p>TODO</p>"},{"location":"data_structures/meshes/","title":"Meshes","text":""},{"location":"data_structures/meshes/#description","title":"Description","text":""},{"location":"data_structures/meshes/#useful-links","title":"Useful links","text":"<p>Quote</p> <ul> <li>https://imagecomputing.net/damien.rohmer/teaching</li> </ul>"},{"location":"data_structures/meshes/#loading-meshes","title":"Loading meshes","text":""},{"location":"data_structures/meshes/#python","title":"Python","text":"<p>From Dmitry Sokolov</p> <pre><code>import numpy as np\n\nclass Mesh():\n    def __init__(self, filename):\n        # parse the .obj file\n        V, T = [], []\n        with open(filename) as f:\n           for line in f.readlines():\n               if line.startswith('#'): continue\n               values = line.split()\n               if not values: continue\n               if values[0] == 'v':\n                   V.append([float(x) for x in values[1:4]])\n               elif values[0] == 'f':\n                   T.append([int(x) for x in values[1:4]])\n        self.V, self.T = np.array(V), np.array(T)-1\n\n        # compute the adjacency\n        self.v2c = np.array([-1]*self.nverts)\n        self.c2c = np.array([-1]*self.ncorners)\n        for c in range(self.ncorners):\n            v = self.T[c//3][c%3]\n            self.v2c[v] = c\n        for c in range(self.ncorners):\n            v = self.T[c//3][c%3]\n            self.c2c[c] = self.v2c[v]\n            self.v2c[v] = c\n\n        # speed up the computations\n        self.opp = np.array([-1]*self.ncorners)\n        for c in range(self.ncorners):\n            c_org = self.T[c//3][c%3]\n            c_dst = self.T[c//3][(c+1)%3]\n            cir = c\n            opp = -1\n            while True:\n                cand = (cir//3)*3 + (cir+2)%3\n                cand_org = self.T[cand//3][cand%3]\n                cand_dst = self.T[cand//3][(cand+1)%3]\n                if (cand_org == c_dst and cand_dst == c_org):\n                    opp = cand # we suppose manifold input\n                cir = self.c2c[cir]\n                if (cir==c): break\n            self.opp[c] = opp \n\n        self.boundary = np.array([False]*self.nverts)\n        for v in range(self.nverts):\n            cir = self.v2c[v]\n            if cir&lt;0: continue\n            while (True):\n                if self.opp[cir]&lt;0:\n                    self.boundary[v] = True\n                    break\n                cir = self.c2c[cir]\n                if (cir==self.v2c[v]): break\n\n    @property\n    def nverts(self):\n    \"\"\"\n    Gets the number of verticies\n    \"\"\"\n        return len(self.V)\n\n    @property\n    def ntriangles(self):\n    \"\"\"\n    Gets the number of triangles\n    \"\"\"\n        return len(self.T)\n\n    @property\n    def ncorners(self):\n    \"\"\"\n    Gets the number of corners of the triangle\n    \"\"\"\n        return len(self.T)*3\n\n    def org(self, c):\n    \"\"\"\n    Gets the vertice at the origin of the edge\n    \"\"\"\n        return self.T[c//3][c%3]\n\n    def dst(self, c):\n    \"\"\"\n    Gets the destination vertice of the edge\n    \"\"\"\n        return self.T[c//3][(c+1)%3]\n\n    def prev(self, c):\n    \"\"\"\n    Gets the previous half-edge\n    \"\"\"\n        return (c//3)*3 + (c+2)%3\n\n    def next(self, c):\n    \"\"\"\n    Gets the next half-edge\n    \"\"\"\n        return (c//3)*3 + 1\n\n    def opposite(self, c):\n    \"\"\"\n    Gets the oposite half-edge\n    \"\"\"\n        return self.opp[c]\n\n    def on_border(self, v):\n        return self.boundary[v]\n\n    def __str__(self):\n        ret = \"\"\n        for v in self.V:\n            ret = ret + (\"v %f %f %f\\n\" % (v[0], v[1], v[2]))\n        for t in self.T:\n            ret = ret + (\"f %d %d %d\\n\" % (t[0]+1, t[1]+1, t[2]+1))\n        return ret\n</code></pre>"},{"location":"data_structures/quadtree/","title":"Quad Tree","text":""},{"location":"data_structures/quadtree/#general-description","title":"General description","text":""},{"location":"data_structures/quadtree/#reference","title":"Reference","text":"<p>Quote</p> <p>This article is based on the work of Hanan Samet 'The Quadtree and related hierarchical data structures' published in 1984.</p>"},{"location":"data_structures/quadtree/#use-cases","title":"Use cases","text":"<p>Quadtrees are used as a representation of binary images.</p>"},{"location":"data_structures/quadtree/#definitons-and-properties","title":"Definitons and properties","text":""},{"location":"data_structures/quadtree/#definitions","title":"Definitions","text":"<ul> <li>The term <code>quadtree</code> is used to described a class of hierarchical data structures whose common property is that they are based on the principle of recursive decompostion of space. [Samet 1984]</li> <li>Quadtrees structures can be differentiated on the following base:<ol> <li>The type of data they represent<ul> <li>Point data</li> <li>Regions</li> <li>Curves</li> <li>Surfaces</li> <li>Volumes</li> </ul> </li> <li>The principle guiding the decomposition process<ul> <li>Equal part on each level regular decomposition</li> <li>Irregular decomposition governed by the input data</li> <li>Tesselation can be done with various samples such as:<ul> <li>Squares</li> <li>Equilateral triangles</li> <li>Isoceles triangles</li> <li>Right triangles</li> <li>Hexagons</li> <li>etc...</li> </ul> </li> </ul> </li> <li>The resolution, variable or not</li> </ol> </li> </ul>"},{"location":"data_structures/quadtree/#properties","title":"Properties","text":"<p>Any plamar decomposition for image representation should possess the following two properties:</p> <ol> <li>Partitions should be infinitely repetitive patterns so it can be used for images of any size</li> <li>Partitions should be infinitely composable into increasingly finer patterns</li> </ol>"},{"location":"data_structures/quadtree/#principle","title":"Principle","text":""},{"location":"data_structures/quadtree/#with-region-data","title":"With region data","text":"<ul> <li>Take the data of a region given by ones if in and 0 if out.</li> <li>This region can be represented by a binary image with a specific resolution. The array can be subdivided into four equal-size quadrants. If the resulting subquadrants contains a mix of 0 and 1, they can be divided into more subquadrants just as before. In the end, every quadrant contains only zeroes or only ones.</li> <li>Precision can go up to the pixel if necessary.</li> </ul>"},{"location":"data_structures/quadtree/#some-vocabulary-on-quadtrees","title":"Some vocabulary on quadtrees","text":"<p>Fron the former example (region quadtrees), it is possible to define some vocabular:</p> <ul> <li>The array of pixels is an image</li> <li>If the image is composed of zeroes or ones only, it is a binary image</li> <li>If the image is composed of other values, then it is a gray-scale image</li> <li>The border of the image is the outer-boundary of the array</li> <li>Four pixels are said to be 4-adjacent if they are adjacent to each other in the vertical or horizontal directions</li> <li>If the concept of adjacency also includes adjacency at a corner (diagonal adjacency), then the pixels are said to be 8-adjacent</li> <li>A black region is a maximal 4-connected set of black pixels</li> <li>A white region is a maximal 4-connected set of white pixels</li> <li>A pixel is said to have four edges of unit length</li> <li>The boundary of a black region consists of the set of edges of its constituent pixels also being edges for white regions / pixels</li> </ul>"},{"location":"data_structures/quadtree/#applications","title":"Applications","text":"<p>Quadtrees have many different applications.</p> <ul> <li>The 'split and merge' algorithm takes an image as input and is splitted with the quadtree structure. Then it is merged given the adjacencies and the output is the map of the boudaries between the original regions of the image.</li> </ul>"},{"location":"data_structures/quadtree/#representations","title":"Representations","text":""},{"location":"data_structures/quadtree/#pointer-based-trees","title":"Pointer-based trees","text":""},{"location":"data_structures/quadtree/#the-quad-tree-structure","title":"The quad-tree structure","text":"<p>A tree structure is composed of branches and leafs. The original point represents the entire image and has four branches / leafs. Each leaf is then subdivided or not in other branches, giving this tree structure. In the numerical domain, it corresponds to a node having four pointers, one for each leaf.</p>"},{"location":"data_structures/quadtree/#the-binary-tree-structure","title":"The binary tree structure","text":"<p>The space is still divided in equaly sized parts but this time, one node has only two leafs and so two pointers to store. It has the advantage to store less nullpointers because some subdivisions are not necessary.</p>"},{"location":"data_structures/quadtree/#pointerless-trees","title":"Pointerless trees","text":"<p>TODO...</p>"},{"location":"data_structures/spatial_acceleration_structures/","title":"Spatial acceleration structrures","text":""},{"location":"data_structures/spatial_acceleration_structures/#useful-links","title":"Useful links","text":"<p>Youtube - Rendering Lecture 1 - Spatial Acceleration Structures</p>"},{"location":"data_structures/spatial_acceleration_structures/#why-using-spacial-acceleration-structures","title":"Why using spacial acceleration structures ?","text":"<p>Scenes in vedeogames or rendering consists of millions or even billions of triangles. In order to compute some distances between any point and any vertex, some inneficient nested loops are required. This is where spatial data structures are useful.</p>"},{"location":"data_structures/spatial_acceleration_structures/#the-different-data-structures","title":"The different data structures","text":""},{"location":"data_structures/spatial_acceleration_structures/#regular-grids","title":"Regular grids","text":"<p>The scene is overlayed by a regular grid and triangles are sorted into cells. Cells are traversed et their content tested, for instance to compute a distance between a point and a triangle in a defined direction.</p> <p>However, in reality data is not as spatially uniform. One option to solve the problem would be to make the grid finer. But this can lead to unused cells in the grid, wasting memory space.</p>"},{"location":"data_structures/spatial_acceleration_structures/#quad-and-octrees","title":"Quad and octrees","text":"<p>They solve the former problems while keeping the advantages. First we need to start with a scene boundary and then do finer subdivisions only if needed. Hence, the max subdivision number and minimum number of triangles for spliting are parameters to be defined. Then a recursive split is made into quadrants (2D - Quadtree) and octants (3D - Octree). The algorithm is stopped after the defined number of subdivisions is reached or if no cell has more than the defined number of triangles.</p>"},{"location":"data_structures/spatial_acceleration_structures/#binary-space-partition-tree-bsp-tree","title":"Binary space partition tree (BSP tree)","text":"<p>A recursive split via hyperplanes is done. Left and right child nodes treat objects in each half space. Note that split can be arbitrary.</p>"},{"location":"data_structures/spatial_acceleration_structures/#k-dimensional-tree-k-d-tree","title":"K-dimensional tree (K-d tree)","text":"<p>Is a specialisation of BSP trees where every hyperplane must be perpendicular to a base axis, limiting search space for splits.</p>"},{"location":"data_structures/spatial_acceleration_structures/#bounding-volumes-aabb-obb","title":"Bounding volumes (AABB, OBB)","text":"<p>The goal here is to encapsulate mesh primitives such as triangles into spheres or more commonly into boxes. There are two ways to create bouding boxes: axis-aligned bounding boxes (AABB tree) or oriented bounding boxes (OBB). The main goal is the same as formerly: we want to avoid excessive tests of intersections by quickly telling if there is an intersection or not.</p> <p>AABB are boxes defined by their two extrema in each dimension. OBB spheres are described by a radius and a center location.</p> <p>Bounding volumes can spatially overlap.</p>"},{"location":"dev/code_quality/","title":"Code Quality","text":""},{"location":"dev/code_quality/#solid-principles","title":"SOLID principles","text":"<p>ByteByteGo.com: Importance of Design Principles in Software Development</p> <p>Design principles, such as the SOLID principles, play a pivotal role in the software development process for several reasons:</p> <ul> <li> <p><code>Maintainability</code>: Following sound design principles makes code more maintainable. When code is well-structured and adheres to these principles, it becomes easier to identify and fix issues, add new features, and make improvements without causing unintended consequences.</p> </li> <li> <p><code>Scalability</code>: Well-designed software is scalable. It can accommodate changes and growth in requirements without requiring extensive rework or becoming increasingly complex.</p> </li> <li> <p><code>Code Reusability</code>: Adhering to design principles often leads to code that is more reusable. Reusable components save time and effort in development and testing.</p> </li> <li> <p><code>Collaboration</code>: Design principles provide a common framework for developers to work within. This common understanding promotes collaboration and reduces misunderstandings among team members.</p> </li> <li> <p><code>Reduced Bugs and Pitfalls</code>: Following design principles helps to identify and mitigate common programming pitfalls and design flaws. This results in fewer bugs and more robust software.</p> </li> <li> <p><code>Future-Proofing</code>: Well-designed software can adapt to changing requirements and technologies. It's an investment in the long-term viability of the software product.</p> </li> </ul>"},{"location":"dev/cyber_security/","title":"Cyber Security","text":""},{"location":"dev/ai/generative_ai/","title":"Generative AI","text":""},{"location":"dev/api/api/","title":"API","text":""},{"location":"dev/api/api/#api-architecture-styles","title":"API Architecture Styles","text":"<p>Refs</p> <p>YouTube - ByteByteGo - Top 6 Most Popular API Architecture Styles</p> <p></p>"},{"location":"dev/api/api_testing/","title":"API Testing","text":""},{"location":"dev/api/rest_api/","title":"REST API","text":"<p>References</p> <p>Real Python - API Integration</p>"},{"location":"dev/api/rest_api/#what-is-a-rest-api","title":"What Is a REST API?","text":"<p>A REST API (Representational State Transfer Application Programming Interface) is a standardized way to allow different applications to communicate with each other over HTTP. It is widely used to build web services that are lightweight, scalable, and easy to integrate.</p> <p></p>"},{"location":"dev/api/rest_api/#key-concepts-in-rest-apis","title":"Key Concepts in REST APIs","text":""},{"location":"dev/api/rest_api/#resources","title":"Resources","text":"<p>REST APIs expose resources (e.g., users, posts, products) identified by unique URLs, typically in the form:</p> <pre><code>    https://api.example.com/users/123\n</code></pre>"},{"location":"dev/api/rest_api/#http-methods","title":"HTTP Methods","text":"<p>RESTful APIs rely on standard HTTP methods to perform actions on resources:</p> <ul> <li>GET: Retrieve a resource.</li> <li>POST: Create a new resource.</li> <li>PUT: Update an existing resource.</li> <li>PATCH: Partially update a resource.</li> <li>DELETE: Remove a resource.</li> </ul> <p>Note</p> <p>REST APIs use HTTP methods to interact with resources. Each method is associated with a specific type of action.</p>"},{"location":"dev/api/rest_api/#stateless","title":"Stateless","text":"<p>REST APIs are stateless, meaning each request is self-contained and independent. The server does not retain information about previous requests.</p> <p>Info</p> <p>Because REST APIs are stateless, any necessary context (like authentication tokens) must be included in each request.</p>"},{"location":"dev/api/rest_api/#response-format","title":"Response Format","text":"<p>REST APIs often use JSON (JavaScript Object Notation) for requests and responses because it\u2019s lightweight and widely supported.</p> <p>XML can also be used.</p>"},{"location":"dev/api/rest_api/#status-codes","title":"Status Codes","text":"<p>HTTP status codes are used to indicate the outcome of a request:</p> <ul> <li>200: Success</li> <li>201: Resource created</li> <li>400: Bad request</li> <li>401: Unauthorized</li> <li>404: Resource not found</li> <li>500: Internal server error</li> </ul> <p>Tip</p> <p>Always include meaningful status codes in your API responses to help developers understand the outcome of their requests.</p>"},{"location":"dev/api/rest_api/#authentication","title":"Authentication","text":""},{"location":"dev/api/rest_api/#tools-to-build-rest-apis","title":"Tools to Build REST APIs","text":""},{"location":"dev/api/rest_api/#programming-frameworks","title":"Programming Frameworks","text":"<p>The following frameworks can be used, depending on your preferred language:</p>"},{"location":"dev/api/rest_api/#javascripttypescript","title":"JavaScript/TypeScript","text":"<ul> <li>Express.js: Minimal and flexible Node.js framework.</li> <li>NestJS: A progressive Node.js framework built on TypeScript.</li> </ul>"},{"location":"dev/api/rest_api/#python","title":"Python","text":"<ul> <li>Flask: Lightweight and simple.</li> <li>Django REST Framework (DRF): Full-featured and powerful for Django-based projects.</li> <li>FastAPI: High-performance framework with built-in validation.</li> </ul>"},{"location":"dev/api/rest_api/#comparison","title":"Comparison","text":"<p>Cite</p> <p>Comparison of Flask, Django, and FastAPI: Advantages, Disadvantages, and Use Cases</p> Framework Advantages Disadvantages Use Cases Flask - Lightweight and easy to learn - Fewer built-in features, requiring additional libraries - Small to medium-sized projects - Highly flexible, allowing custom tool and library choices - Lack of standardized project structures - Rapid prototyping and simple APIs - Supports rapid development - Quick iteration projects Django - All-in-one framework with powerful built-in features (ORM, auth, admin) - Steeper learning curve - Large and complex web applications - Comprehensive documentation and active community support - Lower performance due to rich features - Content management systems (CMS) - Scalable with flexible extension mechanisms - Applications requiring reliability, security, and admin functionality FastAPI - High performance with asynchronous programming - Relatively new, with potentially less mature solutions and community support - High-performance APIs and real-time applications - Automatically generates interactive documentation - Steeper learning curve for developers unfamiliar with asynchronous programming - Applications handling a large number of concurrent requests with low latency - Type annotations enhance readability and maintainability - Prototypes, Proof of Concepts (POC), and rapid development projects requiring type safety"},{"location":"dev/api/rest_api/#java","title":"Java","text":"<ul> <li>Spring Boot: Enterprise-level and highly configurable.</li> </ul>"},{"location":"dev/api/rest_api/#php","title":"PHP","text":"<ul> <li>Laravel: Popular with built-in support for REST APIs.</li> </ul>"},{"location":"dev/api/rest_api/#ruby","title":"Ruby","text":"<ul> <li>Ruby on Rails: Convention-over-configuration framework.</li> </ul>"},{"location":"dev/api/rest_api/#go","title":"Go","text":"<ul> <li>Gin: Lightweight and fast.</li> </ul>"},{"location":"dev/api/rest_api/#c-sharp","title":"C sharp","text":"<ul> <li>ASP.NET Core: Powerful for .NET applications.</li> </ul> <p>Info</p> <p>Your choice of framework depends on factors like the programming language you\u2019re comfortable with, the size of your project, and performance requirements.</p>"},{"location":"dev/api/rest_api/#no-codelow-code-platforms","title":"No-Code/Low-Code Platforms","text":"<ul> <li>Postman API Builder: A GUI-based API builder that allows you to prototype and test REST APIs without writing much code.</li> <li>Swagger/OpenAPI: Define and document APIs with a YAML or JSON specification, and use tools like SwaggerHub to generate code automatically.</li> </ul> <p>Tip</p> <p>For quick prototyping, tools like Postman or Swagger can help you build an API without writing much code.</p>"},{"location":"dev/api/rest_api/#cloud-platforms","title":"Cloud Platforms","text":"<ul> <li>AWS API Gateway: Build and deploy REST APIs without managing servers.</li> <li>Google Cloud Endpoints: Easily manage APIs for Google Cloud.</li> <li>Azure API Management: Develop REST APIs on Microsoft\u2019s cloud.</li> </ul> <p>Tip</p> <p>Using a cloud platform can save you time and effort, especially for large-scale or high-traffic APIs.</p>"},{"location":"dev/api/rest_api/#tools-for-testing-rest-apis","title":"Tools for Testing REST APIs","text":"<ul> <li>Postman: User-friendly interface to test API requests and responses.</li> <li>cURL: Command-line tool for making API calls.</li> <li>Insomnia: Lightweight API testing tool.</li> <li>Swagger UI: Interactive documentation for testing API endpoints directly in the browser.</li> </ul> <p>Note</p> <p>Regular testing ensures your API is functioning correctly and meets client expectations.</p>"},{"location":"dev/api/rest_api/#how-to-start-building-a-rest-api","title":"How to Start Building a REST API","text":""},{"location":"dev/api/rest_api/#plan-your-resources-and-endpoints","title":"Plan Your Resources and Endpoints","text":"<p>Example:</p> <ul> <li>Resource: <code>Users</code></li> <li>Endpoints:<ul> <li><code>GET /users</code> \u2192 Get all users</li> <li><code>POST /users</code> \u2192 Create a user</li> <li><code>GET /users/{id}</code> \u2192 Get a user by ID</li> </ul> </li> </ul>"},{"location":"dev/api/rest_api/#choose-a-framework","title":"Choose a Framework","text":"<p>Select a framework based on your preferred programming language and project needs.</p>"},{"location":"dev/api/rest_api/#set-up-your-development-environment","title":"Set Up Your Development Environment","text":"<p>Install the required tools, such as a programming language, framework, and package manager.</p>"},{"location":"dev/api/rest_api/#design-the-api","title":"Design the API","text":"<ul> <li>Use tools like Swagger/OpenAPI to plan and document endpoints.</li> </ul>"},{"location":"dev/api/rest_api/#build-and-test","title":"Build and Test","text":"<ul> <li>Write your API logic.Build and Test</li> <li>Test with tools like Postman or cURL.</li> </ul>"},{"location":"dev/api/rest_api/#deploy","title":"Deploy","text":"<ul> <li>Use cloud services like AWS, Heroku, or Docker containers to host your API.</li> </ul> <p>Tip</p> <p>Start small, test thoroughly, and iterate based on user feedback.</p>"},{"location":"dev/cloud_services/cloud_services_comparison/","title":"Cloud Services Comparison","text":""},{"location":"dev/cloud_services/cloud_services_comparison/#cloud-services-cheat-sheet","title":"Cloud Services Cheat Sheet","text":""},{"location":"dev/computer_science/parallelism_and_concurrency/","title":"Parallelism and Concurrency","text":"<p>Parallelism vs Concurrency: a symmary by ByteByteGo</p> <p></p>"},{"location":"dev/database/relational_database/","title":"Relational Database","text":"<p>ByteByteGo.com</p> <p>A relational database is a type of database that organizes data into structured tables, also known as relations. These tables consist of rows (records) and columns (fields).</p> <p></p>"},{"location":"dev/devsecops/software_development_lifecycle/","title":"Software Development Lifecycle","text":""},{"location":"dev/devsecops/software_version_numbers/","title":"Software Version Numbers","text":"<p>ByteByteGo.com</p> <p>Example Workflow</p> <ol> <li> <p>Initial Development Phase</p> <p>Start with version 0.1.0.</p> </li> <li> <p>First Stable Release</p> <p>Reach a stable release: 1.0.0.</p> </li> <li> <p>Subsequent Changes</p> <p>Patch Release: A bug fix is needed for 1.0.0. Update to 1.0.1.</p> <p>Minor Release: A new, backward-compatible feature is added to 1.0.3. Update to 1.1.0.</p> <p>Major Release: A significant change that is not backward-compatible is introduced in 1.2.2. Update to 2.0.0.</p> </li> <li> <p>Special Versions and Pre-releases</p> <p>Pre-release Versions: 1.0.0-alpha, 1.0.0-beta, 1.0.0-rc.1. Build Metadata: 1.0.0+20130313144700.</p> </li> </ol>"},{"location":"dev/languages/bash/bash_basics/","title":"Bash basics","text":""},{"location":"dev/languages/bash/bash_basics/#about","title":"About","text":"<p>Bash (Bourne Again SHell) is a widely used shell and command language in Unix-like operating systems. It is the default shell for most Linux distributions and macOS.</p>"},{"location":"dev/languages/bash/bash_basics/#the-language","title":"The language","text":""},{"location":"dev/languages/bash/bash_basics/#shell-prompt","title":"Shell prompt","text":"<p>Opening a terminal shows the prompt. It typically ends</p> <ul> <li>with a dollar sign (<code>$</code>) for regular users</li> <li>with a hash (<code>#</code>) for the root user.</li> </ul>"},{"location":"dev/languages/bash/bash_basics/#text-editors-for-creating-and-modifying-files","title":"Text editors for creating and modifying files","text":"<p>To open text files, integrated editors can be used, such as <code>nano</code> or <code>vim</code>:</p> <pre><code>nano filename\n</code></pre> <pre><code>vim filename\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#asking-for-help","title":"Asking for help","text":"<pre><code>man command\n</code></pre> <pre><code>command --help\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#running-scripts","title":"Running Scripts","text":"<p>Each <code>.sh</code> script have to begin with a <code>shebang</code>.</p> <pre><code>#!/bin/bash\n</code></pre> <p>And can be executed as follows:</p> <pre><code>./myscript.sh\n# or\nsh myscript.sh\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#how-bash-works","title":"How bash works","text":"<p>Each time bash is executed, it runs one of the following scripts</p> <ul> <li><code>/etc/profile</code></li> <li><code>/etc/bash.bashrc</code> provided its existence.</li> </ul> <p>Then it searches:</p> <ul> <li><code>~/.bash_login</code></li> <li><code>~/.bash_profile</code></li> <li><code>~/.profile</code> (only in non interactive shells without login)</li> </ul> <p>When bash is exited, it runs <code>~/.bash_logout</code></p>"},{"location":"dev/languages/bash/bash_basics/#good-practices","title":"Good practices","text":"<p>Enclose variables into quotes</p> <p>This practice will prevent from raising errors where the variable might be empty or contains spaces. Just use <code>if [ -z \"$VENV_NAME\" ] || [ -z \"$VENV_PATH\" ]; then</code> instead of <code>if [ -z $VENV_NAME ] || [ -z $VENV_PATH ]; then</code>.</p>"},{"location":"dev/languages/bash/bash_basics/#environment-variables","title":"Environment variables","text":""},{"location":"dev/languages/bash/bash_basics/#home-directory-for-the-current-user","title":"Home directory for the current user","text":"<pre><code>echo $HOME\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#current-username","title":"Current username","text":"<pre><code>echo $USER\n# or\necho $LOGNAME\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#present-working-directory-pwd","title":"Present Working Directory (PWD)","text":"<pre><code>echo $PWD\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#path","title":"PATH","text":"<p>List of directories where the shell looks for executables as a colon-separated list of directories.</p> <pre><code>echo $PATH\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#path-of-the-current-shell","title":"Path of the current shell","text":"<pre><code>echo $SHELL\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#terminal-type","title":"Terminal type","text":"<pre><code>echo $TERM\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#primary-prompt-string","title":"Primary prompt string","text":"<p>Is the text displayed before each command.</p> <pre><code>echo $PS1\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#hostname-of-the-computer","title":"Hostname of the computer","text":"<pre><code>echo $HOSTNAME\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#operating-system-type","title":"Operating System Type","text":"<pre><code>echo $OSTYPE\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#language-and-local-settings","title":"Language and local settings","text":"<pre><code>echo $LANG\necho $LC_COLLATE\n# ... and others\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#user-id-and-effective-user-id-for-the-current-user","title":"User ID and effective user ID for the current user","text":"<pre><code>echo $UID\necho $EUID\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#version-number-of-bash","title":"Version number of bash","text":"<pre><code>echo $BASH_VERSION\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#random-number","title":"Random number","text":"<p>Gets a random number between 0 and 32767.</p> <pre><code>echo $RANDOM\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#exploring-and-editing-the-files","title":"Exploring and editing the files","text":""},{"location":"dev/languages/bash/bash_basics/#change-directory","title":"Change directory","text":"<pre><code>cd /path/to/directory\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#list-files-and-directories","title":"List files and directories","text":"<pre><code>ls\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#copy-files-and-directories","title":"Copy files and directories","text":"<pre><code>cp file1 file2\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#move-or-rename-files-or-directories","title":"Move or rename files or directories","text":"<pre><code>mv oldfile newfile\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#delete-files","title":"Delete files","text":"<pre><code>rm filename\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#create-a-new-directory","title":"Create a new directory","text":"<pre><code>mkdir new_directory\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#get-the-location-of-a-file","title":"Get the location of a file","text":"<pre><code># on git bash\nwhere file_or_executable_append_to_path\n\n#or \n# on ubuntu\n\nwhereis file_or_executable_append_to_path)\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#flux-redirection","title":"Flux redirection","text":""},{"location":"dev/languages/bash/bash_basics/#redirect-output-to-a-file","title":"Redirect output to a file","text":"<pre><code>echo \"Hello, world!\" output.txt\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#redirect-output-to-a-variable","title":"Redirect output to a variable","text":"<pre><code># Store the current date in the 'current_date' variable using command substitution\ncurrent_date=$(date)\n\n# Display the result\necho \"Current date is: $current_date\"\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#append-output-to-a-file","title":"Append output to a file","text":"<pre><code>echo \"More text\" &gt; output.txt\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#pipe-the-output-of-one-command-as-the-input-to-another","title":"Pipe the output of one command as the input to another","text":"<pre><code>command1 | command2\n</code></pre> <p>This procedure can be useful to chain operations.</p>"},{"location":"dev/languages/bash/bash_basics/#silence-the-output-of-a-command","title":"Silence the output of a command","text":"<p>Both <code>stdout</code> and <code>stderr</code> (resp. standard output and standard error) can be redirected to <code>/dev/null</code> which is a file that discards data.</p>"},{"location":"dev/languages/bash/bash_basics/#redirect-both-stdout-and-stderr-to-devnull","title":"Redirect Both <code>stdout</code> and <code>stderr</code> to <code>/dev/null</code>","text":"<pre><code>command /dev/null 2&gt;&amp;1\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#redirect-only-stdout-to-devnull","title":"Redirect only <code>stdout</code> to <code>/dev/null</code>","text":"<pre><code>command /dev/null\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#matching-strings","title":"Matching strings","text":""},{"location":"dev/languages/bash/bash_basics/#matches-any-sequence-of-characters","title":"Matches any sequence of characters","text":"<pre><code>ls *.txt\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#matches-any-single-character","title":"Matches any single character","text":"<pre><code>ls file?.txt\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#displaying-some-stuff","title":"Displaying some stuff","text":""},{"location":"dev/languages/bash/bash_basics/#displaying-variables","title":"Displaying variables","text":"<pre><code>echo variable\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#display-the-content-of-a-file","title":"Display the content of a file","text":"<pre><code>cat filename\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#permissions-and-ownership","title":"Permissions and ownership","text":""},{"location":"dev/languages/bash/bash_basics/#change-file-permissions","title":"Change file permissions","text":"<pre><code>chmod +x script.sh\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#change-file-ownership","title":"Change file ownership.","text":"<pre><code>chown user:group filename\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#objects","title":"Objects","text":""},{"location":"dev/languages/bash/bash_basics/#variables","title":"Variables","text":"<pre><code>variable_name=\"value\"\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#arrays","title":"Arrays","text":""},{"location":"dev/languages/bash/bash_basics/#creation","title":"Creation","text":"<pre><code># Method 1\narray=(\"value1\" \"value2\" \"value3\")\n\n# Method 2\narray[0]=\"value1\"\narray[1]=\"value2\"\narray[2]=\"value3\"\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#accessing","title":"Accessing","text":"<pre><code>echo ${array[0]}   # prints \"value1\"\necho ${array[1]}   # prints \"value2\"\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#iterating","title":"Iterating","text":"<pre><code>array=(\"value1\" \"value2\" \"value3\")\n\nfor element in \"${array[@]}\"; do\n    echo $element\ndone\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#array-length","title":"Array length","text":"<pre><code>array=(\"value1\" \"value2\" \"value3\")\nlength=${#array[@]}\necho \"Array length: $length\"\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#appending","title":"Appending","text":"<pre><code>array=(\"value1\" \"value2\")\narray+=( \"value3\" \"value4\" )\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#searching","title":"Searching","text":"<pre><code>array=(\"apple\" \"orange\" \"banana\")\n\nsearch_element=\"orange\"\nfor element in \"${array[@]}\"; do\n    if [ \"$element\" == \"$search_element\" ]; then\n        echo \"Element found: $search_element\"\n        break\n    fi\ndone\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#removing","title":"Removing","text":"<pre><code>array=(\"apple\" \"orange\" \"banana\")\nelement_to_remove=\"orange\"\n\narray=(\"${array[@]/$element_to_remove}\")\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#functions","title":"Functions","text":"<pre><code>function_name() {\n    # Code for the function\n}\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#operators","title":"Operators","text":""},{"location":"dev/languages/bash/bash_basics/#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>-eq</code>: Equal to</li> <li><code>-ne</code>: Not equal to</li> <li><code>-lt</code>: Less than</li> <li><code>-le</code>: Less than or equal to</li> <li><code>-gt</code>: Greater than</li> <li><code>-ge</code>: Greater than or equal to</li> </ul>"},{"location":"dev/languages/bash/bash_basics/#logical-operators","title":"Logical Operators:","text":"<ul> <li><code>&amp;&amp;</code>: Logical AND</li> <li><code>||</code>: Logical OR</li> <li><code>!</code>: Logical NOT</li> </ul>"},{"location":"dev/languages/bash/bash_basics/#statements","title":"Statements","text":""},{"location":"dev/languages/bash/bash_basics/#conditional-statements","title":"Conditional statements","text":""},{"location":"dev/languages/bash/bash_basics/#if","title":"If","text":"<pre><code>if [ $a -gt $b ]; then\n    echo \"a is greater than b\"\nelif [ $a -lt $b ]; then\n    echo \"a is less than b\"\nelse\n    echo \"a is equal to b\"\nfi\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#case","title":"case","text":"<pre><code>case $fruit in\n    \"apple\")\n        echo \"It's an apple\"\n        ;;\n    \"orange\" | \"mandarin\")\n        echo \"It's an orange or mandarin\"\n        ;;\n    *)\n        echo \"Unknown fruit\"\n        ;;\nesac\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#loops","title":"Loops","text":""},{"location":"dev/languages/bash/bash_basics/#for","title":"For","text":"<pre><code>for i in {1..5}; do\n    echo $i\ndone\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#while","title":"While","text":"<pre><code>count=1\nwhile [ $count -le 5 ]; do\n    echo $count\n    ((count++))\ndone\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#until","title":"Until","text":"<pre><code>count=1\nuntil [ $count -gt 5 ]; do\n    echo $count\n    ((count++))\ndone\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#foreach","title":"Foreach","text":"<pre><code>fruits=(\"apple\" \"orange\" \"banana\")\n\nfor fruit in \"${fruits[@]}\"; do\n    echo $fruit\ndone\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#break-and-continue","title":"Break and continue","text":"<p>Exit a loop prematurely using <code>break</code>:</p> <pre><code>for i in {1..10}; do\n    if [ $i -eq 5 ]; then\n        break\n    fi\n    echo $i\ndone\n</code></pre> <p>Skip the rest of the loop code to the next iteration using <code>continue</code>:</p> <pre><code>for i in {1..5}; do\n    if [ $i -eq 3 ]; then\n        continue\n    fi\n    echo $i\ndone\n</code></pre>"},{"location":"dev/languages/bash/bash_basics/#input-flags-handling","title":"Input flags handling","text":""},{"location":"dev/languages/bash/bash_basics/#positional-arguments","title":"Positional arguments","text":"<p>TODO</p>"},{"location":"dev/languages/bash/bash_basics/#conditional-arguments","title":"Conditional arguments","text":"<p>TODO</p>"},{"location":"dev/languages/bash/bash_basics/#script-examples","title":"Script examples","text":"<p>[[Configure and build a CMake solution]] [[Delete a folder properly]] [[Run doxygen on a project]]</p>"},{"location":"dev/languages/bash/scripts/confgure_and_build_cmake_solution/","title":"Configure and build a CMake solution","text":"<pre><code>#!/bin/bash\n\n# tell the user the current working directory\necho \"Working in the directory $(pwd)\"\n\n# get the relative path of the script given the location at which it is executed\n# and change directory to the script location\nRELATIVE_EXEC_PATH=\"$( dirname \"${BASH_SOURCE[0]}\" )\"\necho \"Relative path of the script relative to the execution path: ${RELATIVE_EXEC_PATH}\"\ncd \"${RELATIVE_EXEC_PATH}\"\n\n# get the absolute path of the script\nSCRIPT_DIR=$(pwd)\necho \"Directory of the script: ${SCRIPT_DIR}\"\n\n# set the root directory\nROOT_DIR=\"${SCRIPT_DIR}/..\"\n\n# set the build folder to be created relatively to the location of the script\nBUILD_DIR=\"${ROOT_DIR}/build\"\n\nCMAKE_EXEC_NAME=\"cmake\"\n# Check if cmake is installed and added to the PATH\nif ! command -v \"${CMAKE_EXEC_NAME}\" &amp;&gt; /dev/null; then\n    echo \"Error: CMake is not installed. Please install CMake before running this script or add it to your PATH.\"\n    exit 1\nelse\n    CMAKE_EXEC_PATH=$(where \"${CMAKE_EXEC_NAME}\")\n    CMAKE_VERSION=$(\"${CMAKE_EXEC_NAME}\" --version)\n    echo \"CMake version ${CMAKE_VERSION} executable found at path ${CMAKE_EXEC_PATH}\"\nfi\n\n# if the build directory does not exist, then create it and otherwise just use it for cmake\nif [ -d \"${BUILD_DIR}\" ]; then\n    echo \"Found an existing build directory at the path ${BUILD_DIR}, proceeding\"\nelse\n    echo \"Creating the build directory in ${BUILD_DIR}\"\n    mkdir \"${BUILD_DIR}\"\n    echo \"Successfully created the build directory in ${BUILD_DIR}\"\nfi\n\ncd \"${ROOT_DIR}\"\ncmake -B \"${BUILD_DIR}\"\necho \"CMake configuration done, building the solution...\"\n\nTHREADS_NO=4\ncmake --build \"${BUILD_DIR}\" --config Release -j ${THREADS_NO}\necho \"Generating done, build artifacts has been created in ${BUILD_DIR}\"\n</code></pre>"},{"location":"dev/languages/bash/scripts/configure_python_environment/","title":"Configure a Python environment","text":"<p>Refs</p> <ul> <li>Oracle</li> <li>RedHat</li> </ul> <pre><code>#!/bin/bash\n\n###########################################################################################\n\n# detect the installed python version added to the path\n# should also consider the different names for python i.e. python, python3 \n# mutliple python versions may be installed\n\n# define a script version here\nSCRIPT_VERSION=\"1.0.0\"\n\nPY_LAUNCHER_EXE=\"py\"\nCOMMON_PY_LAUNCHER_LOC=\"C:\\Windows\\py.exe\" # TODO add this check\nPYTHON_REQUIRED_VERSION=\"3.9\"\nINSTALL_TOKEN=\"&lt;token_here&gt;\"\nREQUIRED_PACKAGES=(\n    \"matplotlib==3.4.3\"\n    \"numpy&gt;=1.20.3\"\n    \"scipy==1.7.3\"\n    \"tqdm==4.64.1\"\n    \"segysak==0.4\"\n    \"ebcdic==1.1.1\"\n    \"PyQt5==5.15.7\"\n    \"numba==0.57.0\"\n    \"pandas==2.0.3\"\n    \"xlsxwriter==3.0.3\"\n    \"netcdf4==1.5.7\"\n    \"xarray==2023.6.0\"\n    \"seg2_files==0.0.1\"\n    \"obspy==1.4.0\"\n    \"cython==3.0.0\"\n    \"spyder-kernels\"\n    )\n\n############################################################\n# Quick helper function to display script version.         #\n############################################################\ndisplay_script_version()\n{\n    echo \"Version $SCRIPT_VERSION\"\n}\n\n############################################################\n# Help                                                     #\n############################################################\ndisplay_help()\n{\n    echo \"#################################################################################################################################################\"\n    echo \"SCRIPT MANUAL\"\n    echo\n    echo \"&gt;&gt;&gt; This script is meant to be used to install a python virtual environment\n    echo \"\"\n    echo \"WHAT IS A VENV ?\"\n    echo \"|  A Python virtual environment, often referred to as venv (short for \"virtual environment\"), is a self-contained directory that contains \"\n    echo \"|  a Python interpreter and a set of additional tools and libraries. The purpose of using a virtual environment is to isolate dependencies \"\n    echo \"|  and packages for a specific project, preventing conflicts between different projects that may require different versions of the same package.\"\n    echo \"\"\n    echo \"Syntax is: script_name.sh [-h|help|v|version|venv]\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"|\"\n    echo \"|  -h                                Display help for the script and exit\"\n    echo \"|  -v                                Print software version and exit\"\n    echo \"|  -d &lt;venv_dir&gt; -n &lt;venv_name&gt;      Create a virtual environment for the monitoring team\"\n    echo \"|                                      argument 1: &lt;venv_dir&gt; is the path where you want to create your venv (to a folder)\"\n    echo \"|                                      argument 2: &lt;venv_name&gt; is the name of the venv that will be created for you.\"\n    echo \"|                                    NOTE: You need to activate your venv afterwards\"\n    echo \"|  -b                                Install the librairies on the base python interpreter instead of the virtual environment\"\n    echo \"\"\n    echo \"Packages that will be installed are:\"\n    echo \n    for package in \"${REQUIRED_PACKAGES[@]}\"; do\n        echo \"| $@ | $package\"\n    done\n    echo \"################################################################################################################################\"\n}\n\n############################################################\n# Quick helper function to display the detected arguments. #\n############################################################\ndisplay_args()\n{\n    # Check provided arguments\n    echo \"Detected the following arguments:\"\n    for arg in \"$@\"; do\n        echo \"| $arg\"\n    done\n}\n\n############################################################\n# Determines if a folder exists                            #\n############################################################\nfolder_exists()\n{\n    local folder_path=\"$1\"\n\n    if [ -z \"$folder_path\" ]; then\n        echo \"Error: The folder path \"${folder_path}\" does not exist in your files, double check it...\"\n        return 1\n    fi\n\n    if [ -d \"$folder_path\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n############################################################\n# Determines if a file exists                              #\n############################################################\nfile_exists()\n{\n    local file_path=\"$1\"\n\n    if [ -z \"$file_path\" ]; then\n        echo \"Error: The file path \"${file_path}\" does not exist in your files, double check it...\"\n        return 1\n    fi\n\n    if [ -d \"$file_path\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nfile_exists()\n{\n    local file_path=\"$1\"\n\n    if [ -z \"$file_path\" ]; then\n        echo \"Error: The file path \"${file_path}\" does not exist in your files, double check it...\"\n        return 1\n    fi\n\n    if [ -d \"$file_path\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n############################################################\n# Main program.                                            #\n############################################################\nUSE_VENV=0\n\nOPTSTRING=\"hvn:d:b\"\nwhile getopts \"$OPTSTRING\" option; do\n    case $option in\n        h)\n            display_help\n            exit 0\n            ;;\n        v)\n            display_script_version\n            exit 0\n            ;;\n        n)\n            VENV_NAME=$OPTARG\n            USE_VENV=1\n            ;;\n        d)\n            VENV_DIR=$OPTARG\n            USE_VENV=1\n            ;;\n        b) \n            USE_VENV=0\n            ;;\n        ?) # handle invalid options here\n            echo\n            echo \"&gt;&gt;&gt; Invalid option ${option}, printing usage &lt;&lt;&lt;\"\n            echo\n            display_help\n            exit 0\n            ;;\n   esac\ndone\n\nif [ -z \"$@\" ]; then\n    echo \"No argument detected, please provite an argument to run the script...\"\n    display_help\n    exit 1\nfi\n\nif [ $USE_VENV -eq 1 ]; then\n    # Check if both path and name options are provided\n    if [ -z \"$VENV_NAME\" ] || [ -z \"$VENV_DIR\" ]; then\n        echo \"Both path and name arguments have to be passed to the script in order to create the virtual environment...\"\n        echo \n        display_help\n        exit 1\n    fi\n\n    # Check if both paths exist\n    if folder_exists \"$VENV_DIR\"; then\n        echo \"Install folder &lt;\"$VENV_DIR\"&gt; has been found...\"\n    else\n        echo \"Error, the folder &lt;$VENV_DIR&gt; specified to install the virtual environment does not exist...\"\n        exit 1\n    fi\n\n    # Build the venv path\n    VENV_PATH=\"${VENV_DIR}/${VENV_NAME}\"\nfi\n\n# Prepare the installation of the environment\necho \"Preparing the installation for the python requirements of the Monitoring Team...\"\necho \"Checking the available Python versions on the system...\"\nif command -v \"${PY_LAUNCHER_EXE}\" &gt;/dev/null 2&gt;&amp;1; then\n    PY_LAUNCHER_PATH=$(where \"${PY_LAUNCHER_EXE}\")\n    echo \"The launcher py has been detected at path ${PY_LAUNCHER_PATH}, proceeding...\"\nelse\n    echo \"The launcher py was not found, please install python with the py launcher to be able to proceed...\"\n    echo \"Download python here: https://www.python.org/downloads/windows/ and check 'dowload the py launcher' during installation...\"\n    read -p \"Press Enter to close this window...\"\n    exit 1\nfi\n\necho \"Checking if python ${PYTHON_REQUIRED_VERSION} is installed on the system...\"\necho \"Detected the following ${PY_LAUNCHER_EXE} versions:\"\nAVAILABLE_PYTHON_VERSIONS=\"$(${PY_LAUNCHER_EXE} --list)\"\necho \"${AVAILABLE_PYTHON_VERSIONS}\"\n\nif echo \"${AVAILABLE_PYTHON_VERSIONS}\" | grep -q \"${PYTHON_REQUIRED_VERSION}\"; then\n    PYTHON_CALL=\"${PY_LAUNCHER_EXE} -${PYTHON_REQUIRED_VERSION}\"\n    PYTHON_INSTALLED_VERSION=$(${PYTHON_CALL} --version)\n    echo \"Python version ${PYTHON_INSTALLED_VERSION} found...\"\nelse\n    echo \"Python version ${PYTHON_REQUIRED_VERSION}.* not found in the available versions, please install a valid python version...\"\n    echo \"Download python here: https://www.python.org/downloads/windows/\"\n    read -p \"Press Enter to close this window...\"\n    exit 1\nfi\n\nif [ $USE_VENV -eq 1 ]; then\n    # Create and activate the python environment to install the packages\n    # Check if the venv files exist\n    ${PYTHON_CALL} -m venv ${VENV_PATH}\n    if folder_exists \"${VENV_PATH}\"; then\n        echo \"Virtual environment ${VENV_PATH} has been successfully built...\"\n    else\n        echo \"Error: The virtual environment ${VENV_PATH} has not been built correctly...\"\n        exit 1\n    fi\n    source \"${VENV_PATH}/Scripts/activate\"\n    echo \"Virtual environment activated, ready to install packages\"\nfi\n\necho \"Installing Custom lib...\"\nif [ $USE_VENV -eq 1 ]; then\n    pip install ${INSTALL_TOKEN} &gt; /dev/null 2&gt;&amp;1\nelse\n    ${PYTHON_CALL} -m pip install ${INSTALL_TOKEN} &gt; /dev/null 2&gt;&amp;1\nfi\nCUSTOM_LIB_INSTALL_EXIT_CODE=$?\n\nif [ ${CUSTOM_LIB_INSTALL_EXIT_CODE} -eq 0 ]; then\n    echo \"Successfully installed custom lib on the base Python environment with exit code ${CUSTOM_LIB_INSTALL_EXIT_CODE}\"\nelse\n    echo \"Failed to install custom lib with exit code ${CUSTOM_LIB_INSTALL_EXIT_CODE}, call a dev...\"\n    read -p \"Press Enter to close this window...\"\n    exit 1\nfi\n\nfor package in \"${REQUIRED_PACKAGES[@]}\"; do\n    if [ $USE_VENV -eq 0 ]; then\n        ${PYTHON_CALL} -m pip install ${package} &gt; /dev/null 2&gt;&amp;1\n    else\n        pip install ${package} &gt; /dev/null 2&gt;&amp;1\n    fi\n    EXIT_CODE=$?\n    if [ $EXIT_CODE -eq 0 ]; then\n        echo \"Successfully installed ${package} on the Python environment with exit code ${EXIT_CODE}\"\n    else\n        echo \"Could not install ${package} on the Python environment with exit code ${EXIT_CODE}\"\n    fi\ndone\n\nif [ $USE_VENV -eq 1 ]; then\n    # deactivate the Python venv after having installed the packages\n    echo \"Deactivating the virtual environment\"\n    deactivate\nfi\n\necho \"Finished installing the requirements on the base Python environment...\"\n\necho \"The packages installed on the base Python environment are:\"\nINSTALLED_PACKAGES=\"$(${PYTHON_CALL} -m pip list)\"\necho \"${INSTALLED_PACKAGES}\"\n\necho \"Python ${PYTHON_INSTALLED_VERSION} is now configured\"\n\nread -p \"Press Enter to close this window...\"\n\nexit 0\n</code></pre>"},{"location":"dev/languages/bash/scripts/delete_folder/","title":"Delete a folder properly","text":"<pre><code>#!/bin/bash\n\n# tell the user the current working directory\necho \"Working in the directory $(pwd)\"\n\n# get the relative path of the script given the location at which it is executed\n# and change directory to the script location\nRELATIVE_EXEC_PATH=\"$( dirname \"${BASH_SOURCE[0]}\" )\"\necho \"Relative path of the script relative to the execution path: ${RELATIVE_EXEC_PATH}\"\ncd ${RELATIVE_EXEC_PATH}\n\n# get the absolute path of the script\nSCRIPT_DIR=$(pwd)\necho \"Directory of the script: ${SCRIPT_DIR}\"\n\n# set the folder to be deleted relatively to the location of the script\nBUILD_DIR=\"${SCRIPT_DIR}/../build\"\n\n# check if the folder exists and if so, delete it\nif [ -d \"${BUILD_DIR}\" ]; then\n    rm -rf \"${BUILD_DIR}\"\n    echo \"Folder ${BUILD_DIR} successfully deleted. Solution has been cleared.\"\nelse\n    echo \"Folder ${BUILD_DIR} not found (not deleted). Solution may already be cleared.\"\nfi\n</code></pre>"},{"location":"dev/languages/bash/scripts/run_doxygen/","title":"Run doxygen on a C++ project","text":"<p>Warning</p> <p>The source code directory must be relative from where the code is executed If the source code starts <code>..</code> from the documentation folder, then the source code directory is <code>../</code></p> <p>Warning</p> <p>The <code>OUTPUT_DIRECTORY</code> variable must be set to none (no input) Otherwise, the output path is built from the executable path. It ensures that the doc is in the same folder no matter where doxygen is executed.</p> <pre><code>#!/bin/bash\n\n# tell the user the current working directory\necho \"Working in the directory $(pwd)\"\n\n# get the relative path of the script given the location at which it is executed\n# and change directory to the script location\nRELATIVE_EXEC_PATH=\"$( dirname \"${BASH_SOURCE[0]}\" )\"\necho \"Relative path of the script relative to the execution path: ${RELATIVE_EXEC_PATH}\"\ncd \"${RELATIVE_EXEC_PATH}\"\n\n# get the absolute path of the script\nSCRIPT_DIR=$(pwd)\necho \"Directory of the script: ${SCRIPT_DIR}\"\n\n# set the root directory\nROOT_DIR=\"${SCRIPT_DIR}/..\"\n\n# set the documentation folder relatively to the location of the script and create the path to the Doxyfile\nDOC_DIR=\"${ROOT_DIR}/doc\"\nDOXYFILE_ABS_PATH=\"${DOC_DIR}/Doxyfile\"\n\nDOXYGEN_EXEC_NAME=\"doxygen\"\n# Check if Doxygen is installed and added to the PATH\nif ! command -v \"${DOXYGEN_EXEC_NAME}\" &amp;/dev/null; then\n    echo \"Error: Doxygen is not installed. Please install Doxygen before running this script or add it to your PATH.\"\n    exit 1\nelse\n    DOXYGEN_EXEC_PATH=$(where \"${DOXYGEN_EXEC_NAME}\")\n    DOXYGEN_VERSION=$(\"${DOXYGEN_EXEC_NAME}\" -v)\n    echo \"Doxygen version ${DOXYGEN_VERSION} executable found at path ${DOXYGEN_EXEC_PATH}\"\nfi\n\n# Check if the documentation exists\nif [ ! -d \"${DOC_DIR}\" ]; then\n    echo \"Error: Documentation directory not found at ${DOC_DIR}. Please check if the directory exists.\"\n    exit 1\nfi\n\n# Check if the Doxyfile exists\nif [ ! -f \"${DOXYFILE_ABS_PATH}\" ]; then\n    echo \"Error: Doxyfile not found at ${DOXYFILE_ABS_PATH}. Please check if the text file exists in the documentation directory at ${DOC_DIR}\"\n    exit 1\nfi\n\n# Execute Doxygen with the specified Doxyfile\ncd \"${DOC_DIR}\"\necho \"Changing directory to the root of the project: $(pwd)\"\necho \"Running doxygen on the file ${DOXYFILE_ABS_PATH}\"\ndoxygen \"${DOXYFILE_ABS_PATH}\"\nDOXYGEN_EXIT_CODE=$?\n\n# Generated doc path\nOUTPUT_DOC_NAME=\"SpotDemigDoc\"\nOUTPUT_DOC_PATH=\"${DOC_DIR}/${OUTPUT_DOC_NAME}/index.html\"\n\nif [ $DOXYGEN_EXIT_CODE -eq 0 ]; then\n    echo \"Doxygen executed successfully, articafts are in ${DOC_DIR}/${OUTPUT_DOC_NAME} exit code ${DOXYGEN_EXIT_CODE}.\"\nelse\n    echo \"Doxygen encountered an error, exit code ${DOXYGEN_EXIT_CODE}.\"\n    exit 1\nfi\n\nif [ ! -f $OUTPUT_DOC_PATH ]; then\n    echo \"Error, the output doxygen index html index at $OUTPUT_DOC_PATH can not be open because the path is incorrect\"\n    exit 1\nfi\n\n# Check the operating system and open the index.html from the generated doc\ncase \"$(uname -s)\" in\n    Linux*)                         # Linux\n        xdg-open $OUTPUT_DOC_PATH\n        ;;\n    Darwin*)                        # macOS\n        open $OUTPUT_DOC_PATH\n        ;;\n    CYGWIN*|MINGW*)                 # Windows (Cygwin and MSYS2)\n        start $OUTPUT_DOC_PATH\n        ;;\n    *)\n        echo \"Unsupported operating system\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"dev/languages/cpp/cppcon_2022_back_to_basics_cpp_api_design/","title":"CppCon 2022 - Back to Basics C++ API Design - Jason Turner","text":"<p>Cite</p> <ul> <li>GutHub CppCon</li> <li>Youtube</li> </ul>"},{"location":"dev/languages/cpp/cppcon_2022_back_to_basics_cpp_api_design/#summary","title":"Summary","text":"<p>Illustrates which are the bad and the good habits while writing a C++ API</p>"},{"location":"dev/languages/cpp/cppcon_2022_back_to_basics_cpp_api_design/#conclusion","title":"Conclusion","text":"<p>Its all about making your API hard to use wrong</p> <p>Its all about making your API hard to use wrong by: - Trying to use your API incorrectly - Using better naming - Use <code>[[nodiscard]]</code> liberally - Never return a ray pointer, instead prefer references or better: smart pointers - Use <code>noexcept</code> to indicate that a function does not raise errors - Provide consistent and IMPOSSIBLE to ignore error handling (avoid returning error codes for instance and prefer throwing errors) - Use strong types (that can not be constructed with cast / different inputs) and avoid implicit conversions. For instance, std::filesystem is a weak type since it can be constructed with a string, a const char*, etc... Prevent conversions by using <code>delete</code> on the relevant constructors and functions (sparingly). - Avoid passing raw pointers except for optional and unique arguments - Limit API visibility to the required on no more - Use <code>constexpr</code> unless there is a good reason</p>"},{"location":"dev/languages/cpp/pybind11_basics/","title":"Pybind 11 basics","text":"<p>What is this?</p> <p>Pybind11 is a lightweight, open-source library designed to create Python bindings for C++ code. It enables seamless integration of C++ code into Python programs by allowing Python to call C++ functions, classes, and methods as if they were native Python objects.</p> <p>Cite</p> <ul> <li>GitHub</li> <li>Official documentation</li> </ul>"},{"location":"dev/languages/cpp/pybind11_basics/#bindings-for-custom-types","title":"Bindings for custom types","text":"<pre><code>struct Pet {\n    Pet(const std::string &amp;name) : name(name) { }\n    void setName(const std::string &amp;name_) { name = name_; }\n    const std::string &amp;getName() const { return name; }\n\n    std::string name;\n};\n\n#include &lt;pybind11/pybind11.h&gt;\n\nnamespace py = pybind11;\n\nPYBIND11_MODULE(example, m) {\n    py::class_&lt;Pet&gt;(m, \"Pet\")\n        .def(py::init&lt;const std::string &amp;&gt;())\n        .def(\"setName\", &amp;Pet::setName)\n        .def(\"getName\", &amp;Pet::getName);\n}\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#instance-and-static-fields","title":"Instance and static fields","text":"<p>Define a read and write binding for a class attribute of a static field: </p> <pre><code>.def_readwrite(\"name\", &amp;Pet::name)\n.def_readonly(\"name\", &amp;Pet::name)\n</code></pre> <pre><code>&gt;&gt;&gt; p = example.Pet(\"Molly\")\n&gt;&gt;&gt; p.name\n'Molly'\n&gt;&gt;&gt; p.name = \"Charly\"\n&gt;&gt;&gt; p.name\n'Charly'\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#dynamic-attributes","title":"Dynamic attributes","text":"<pre><code>py::class_&lt;Pet&gt;(m, \"Pet\", py::dynamic_attr())\n    .def(py::init&lt;&gt;())\n    .def_readwrite(\"name\", &amp;Pet::name);\n</code></pre> <pre><code>&gt;&gt;&gt; p = example.Pet()\n&gt;&gt;&gt; p.name = \"Charly\"  # OK, overwrite value in C++\n&gt;&gt;&gt; p.age = 2  # OK, dynamically add a new attribute\n&gt;&gt;&gt; p.__dict__  # just like a native Python class\n{'age': 2}\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#inheritance","title":"Inheritance","text":"<pre><code>struct Pet {\n    Pet(const std::string &amp;name) : name(name) { }\n    std::string name;\n};\n\nstruct Dog : Pet {\n    Dog(const std::string &amp;name) : Pet(name) { }\n    std::string bark() const { return \"woof!\"; }\n};\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#using-the-c-base-class-as-an-extra-template-parameter-of-the-class_","title":"Using the C++ base class as an extra template parameter of the\u00a0class_","text":"<pre><code>py::class_&lt;Pet&gt;(m, \"Pet\")\n   .def(py::init&lt;const std::string &amp;&gt;())\n   .def_readwrite(\"name\", &amp;Pet::name);\n\n// Method 1: template parameter:\npy::class_&lt;Dog, Pet /* &lt;- specify C++ parent type */&gt;(m, \"Dog\")\n    .def(py::init&lt;const std::string &amp;&gt;())\n    .def(\"bark\", &amp;Dog::bark);\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#assign-a-name-to-the-parent-class-and-reference-it","title":"Assign a name to the parent class and reference it","text":"<pre><code>py::class_&lt;Pet&gt; pet(m, \"Pet\");\npet.def(py::init&lt;const std::string &amp;&gt;())\n   .def_readwrite(\"name\", &amp;Pet::name);\n\n// Method 2: pass parent class_ object:\npy::class_&lt;Dog&gt;(m, \"Dog\", pet /* &lt;- specify Python parent type */)\n    .def(py::init&lt;const std::string &amp;&gt;())\n    .def(\"bark\", &amp;Dog::bark);\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#polymorphic-types","title":"Polymorphic types","text":"<p>Pybind recognizes polymorphic types automatically if there is at least one virtual function</p> <p>Therefore, if a virutal method is defined, then downcasting is authorized:</p> <pre><code>struct PolymorphicPet {\n    virtual ~PolymorphicPet() = default;\n};\n\nstruct PolymorphicDog : PolymorphicPet {\n    std::string bark() const { return \"woof!\"; }\n};\n\n// Same binding code\npy::class_&lt;PolymorphicPet&gt;(m, \"PolymorphicPet\");\npy::class_&lt;PolymorphicDog, PolymorphicPet&gt;(m, \"PolymorphicDog\")\n    .def(py::init&lt;&gt;())\n    .def(\"bark\", &amp;PolymorphicDog::bark);\n\n// Again, return a base pointer to a derived instance\nm.def(\"pet_store2\", []() { return std::unique_ptr&lt;PolymorphicPet&gt;(new PolymorphicDog); });\n</code></pre> <pre><code>&gt;&gt;&gt; p = example.pet_store2()\n&gt;&gt;&gt; type(p)\nPolymorphicDog  # automatically downcast\n&gt;&gt;&gt; p.bark()\n'woof!'\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#overloading-methods","title":"Overloading methods","text":"<pre><code>struct Pet {\n    Pet(const std::string &amp;name, int age) : name(name), age(age) { }\n\n    void set(int age_) { age = age_; }\n    void set(const std::string &amp;name_) { name = name_; }\n\n    std::string name;\n    int age;\n};\n\n// C++ &lt; 14\npy::class_&lt;Pet&gt;(m, \"Pet\")\n   .def(py::init&lt;const std::string &amp;, int&gt;())\n   .def(\"set\", static_cast&lt;void (Pet::*)(int)&gt;(&amp;Pet::set), \"Set the pet's age\")\n   .def(\"set\", static_cast&lt;void (Pet::*)(const std::string &amp;)&gt;(&amp;Pet::set), \"Set the pet's name\");\n\n// C++ &gt;= 14\npy::class_&lt;Pet&gt;(m, \"Pet\")\n    .def(\"set\", py::overload_cast&lt;int&gt;(&amp;Pet::set), \"Set the pet's age\")\n    .def(\"set\", py::overload_cast&lt;const std::string &amp;&gt;(&amp;Pet::set), \"Set the pet's name\");\n</code></pre> <p>Defining multiple overloads is possible: python will try every signature to get the right one</p> <p>If a function is overloaded based on constness, the\u00a0<code>py::const_</code>\u00a0tag should be used</p>"},{"location":"dev/languages/cpp/pybind11_basics/#for-const-members","title":"For const members","text":"<pre><code>struct Widget {\n    int foo(int x, float y);\n    int foo(int x, float y) const;\n};\n\npy::class_&lt;Widget&gt;(m, \"Widget\")\n   .def(\"foo_mutable\", py::overload_cast&lt;int, float&gt;(&amp;Widget::foo))\n   .def(\"foo_const\",   py::overload_cast&lt;int, float&gt;(&amp;Widget::foo, py::const_));\n</code></pre> <p>There is another way, but this one is fine.</p>"},{"location":"dev/languages/cpp/pybind11_basics/#enums-and-internal-types","title":"Enums and internal types","text":"<pre><code>struct Pet {\n    enum Kind {\n        Dog = 0,\n        Cat\n    };\n\n    struct Attributes {\n        float age = 0;\n    };\n\n    Pet(const std::string &amp;name, Kind type) : name(name), type(type) { }\n\n    std::string name;\n    Kind type;\n    Attributes attr;\n};\n</code></pre> <pre><code>py::class_&lt;Pet&gt; pet(m, \"Pet\");\n\npet.def(py::init&lt;const std::string &amp;, Pet::Kind&gt;())\n    .def_readwrite(\"name\", &amp;Pet::name)\n    .def_readwrite(\"type\", &amp;Pet::type)\n    .def_readwrite(\"attr\", &amp;Pet::attr);\n\n// enum definition is done through py::enum_\npy::enum_&lt;Pet::Kind&gt;(pet, \"Kind\")\n    .value(\"Dog\", Pet::Kind::Dog)\n    .value(\"Cat\", Pet::Kind::Cat)\n    .export_values();\n\n// class definition is done through py::class_\npy::class_&lt;Pet::Attributes&gt;(pet, \"Attributes\")\n    .def(py::init&lt;&gt;())\n    .def_readwrite(\"age\", &amp;Pet::Attributes::age);\n</code></pre> <p>When the special tag\u00a0py::arithmetic()\u00a0is specified to the\u00a0enum_\u00a0constructor, pybind11 creates an enumeration that also supports rudimentary arithmetic and bit-level operations like comparisons, and, or, xor, negation, etc.</p> <pre><code>py::enum_&lt;Pet::Kind&gt;(pet, \"Kind\", py::arithmetic())\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#return-value-policy","title":"Return value policy","text":"<p>If custom smart pointers are used, it eliminates the need to use return value policies.</p> <p>Python and C++ will handle the pointer reference count and the object will be deleted once there is no more reference for this pointer.</p>"},{"location":"dev/languages/cpp/pybind11_basics/#call-policies","title":"Call policies","text":""},{"location":"dev/languages/cpp/pybind11_basics/#keep-alive","title":"Keep alive","text":""},{"location":"dev/languages/cpp/pybind11_basics/#call-guard","title":"Call guard","text":""},{"location":"dev/languages/cpp/pybind11_basics/#python-object-as-arguments","title":"Python object as arguments","text":""},{"location":"dev/languages/cpp/pybind11_basics/#args-and-kwargs","title":"*args and *kwargs","text":"<p>*args derive from a tuple and *kwargs from a dictionnary</p>"},{"location":"dev/languages/cpp/pybind11_basics/#specify-that-an-argument-is-keyword-only","title":"Specify that an argument is keyword only","text":"<pre><code>m.def(\"f\", [](int a, int b) { /* ... */ },\n      py::arg(\"a\"), py::kw_only(), py::arg(\"b\"));\n</code></pre> <p>Since v2.6, using py::arg uses py::kw_only</p> <p>Therefore it is not useful to specify it.</p>"},{"location":"dev/languages/cpp/pybind11_basics/#specify-that-an-argument-is-positional-only","title":"Specify that an argument is positional only","text":"<pre><code>m.def(\"f\", [](int a, int b) { /* ... */ },\n       py::arg(\"a\"), py::pos_only(), py::arg(\"b\"));\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#default-values","title":"Default values","text":"<p>When using <code>nullptr</code> as a default argument: <code>static_cast</code> it to the needed type before</p> <pre><code>py::class_&lt;MyClass&gt;(\"MyClass\")\n    .def(\"myFunction\", py::arg(\"arg\") = static_cast&lt;SomeType *&gt;(nullptr));\n</code></pre>"},{"location":"dev/languages/cpp/pybind11_basics/#force-non-conversions-between-types","title":"Force non-conversions between types","text":"<p>Sometimes we do not want to convert arguments. For instance if a function takes a float and we do not want to use any other type like integer, then we can add <code>.noconvert()</code> specifier.</p> <pre><code>m.def(\"floats_only\", [](double f) { return 0.5 * f; }, py::arg(\"f\").noconvert());\nm.def(\"floats_preferred\", [](double f) { return 0.5 * f; }, py::arg(\"f\"));\n</code></pre>"},{"location":"dev/languages/java/java_basics/","title":"Java basics","text":"<p>Cite</p> <ul> <li>Oracle official website</li> </ul>"},{"location":"dev/languages/java/java_basics/#variables","title":"Variables","text":""},{"location":"dev/languages/java/java_basics/#scopes","title":"Scopes","text":"<p>The Java programming language defines the following kinds of variables:</p> <ul> <li>Instance Variables (Non-Static Fields): their values are unique to each\u00a0instance\u00a0of a class</li> <li>Member variables in a class\u2014these are called\u00a0fields.</li> <li>Variables in a method or block of code\u2014these are called\u00a0local variables.</li> <li>Variables in method declarations\u2014these are called\u00a0parameters.</li> </ul>"},{"location":"dev/languages/java/java_basics/#naming-conventions","title":"Naming conventions","text":"<p>In Java, it is a common convention to use uppercase letters for constant variables.</p>"},{"location":"dev/languages/java/java_basics/#primitive-data-types","title":"Primitive data types","text":"<p>The eight primitive data types supported by the Java programming language are:</p> <ul> <li>byte: The\u00a0<code>byte</code>\u00a0data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value of 127 (inclusive). The\u00a0<code>byte</code>\u00a0data type can be useful for saving memory in large\u00a0arrays, where the memory savings actually matters. They can also be used in place of\u00a0<code>int</code>\u00a0where their limits help to clarify your code; the fact that a variable's range is limited can serve as a form of documentation.</li> <li>short: The\u00a0<code>short</code>\u00a0data type is a 16-bit signed two's complement integer. It has a minimum value of -32,768 and a maximum value of 32,767 (inclusive). As with\u00a0<code>byte</code>, the same guidelines apply: you can use a\u00a0<code>short</code>\u00a0to save memory in large arrays, in situations where the memory savings actually matters.</li> <li>int: By default, the\u00a0<code>int</code>\u00a0data type is a 32-bit signed two's complement integer, which has a minimum value of -231\u00a0and a maximum value of 231-1. In Java SE 8 and later, you can use the\u00a0<code>int</code>\u00a0data type to represent an unsigned 32-bit integer, which has a minimum value of 0 and a maximum value of 232-1. Use the Integer class to use\u00a0<code>int</code>\u00a0data type as an unsigned integer. See the section The Number Classes for more information. Static methods like\u00a0<code>compareUnsigned</code>,\u00a0<code>divideUnsigned</code>\u00a0etc have been added to the\u00a0<code>Integer</code>\u00a0class to support the arithmetic operations for unsigned integers.</li> <li>long: The\u00a0<code>long</code>\u00a0data type is a 64-bit two's complement integer. The signed long has a minimum value of -263\u00a0and a maximum value of 263-1. In Java SE 8 and later, you can use the\u00a0<code>long</code>\u00a0data type to represent an unsigned 64-bit long, which has a minimum value of 0 and a maximum value of 264-1. Use this data type when you need a range of values wider than those provided by\u00a0<code>int</code>. The\u00a0<code>Long</code>\u00a0class also contains methods like\u00a0<code>compareUnsigned</code>,\u00a0<code>divideUnsigned</code>\u00a0etc to support arithmetic operations for unsigned long.</li> <li>float: The\u00a0<code>float</code>\u00a0data type is a single-precision 32-bit IEEE 754 floating point. Its range of values is beyond the scope of this discussion, but is specified in the\u00a0Floating-Point Types, Formats, and Values\u00a0section of the Java Language Specification. As with the recommendations for\u00a0<code>byte</code>\u00a0and\u00a0<code>short</code>, use a\u00a0<code>float</code>\u00a0(instead of\u00a0<code>double</code>) if you need to save memory in large arrays of floating point numbers. This data type should never be used for precise values, such as currency. For that, you will need to use the\u00a0java.math.BigDecimal\u00a0class instead.\u00a0Numbers and Strings\u00a0covers\u00a0<code>BigDecimal</code>\u00a0and other useful classes provided by the Java platform.</li> <li>double: The\u00a0<code>double</code>\u00a0data type is a double-precision 64-bit IEEE 754 floating point. Its range of values is beyond the scope of this discussion, but is specified in the\u00a0Floating-Point Types, Formats, and Values\u00a0section of the Java Language Specification. For decimal values, this data type is generally the default choice. As mentioned above, this data type should never be used for precise values, such as currency.</li> <li>boolean: The\u00a0<code>boolean</code>\u00a0data type has only two possible values:\u00a0<code>true</code>\u00a0and\u00a0<code>false</code>. Use this data type for simple flags that track true/false conditions. This data type represents one bit of information, but its \"size\" isn't something that's precisely defined. </li> <li>char: The\u00a0<code>char</code>\u00a0data type is a single 16-bit Unicode character. It has a minimum value of\u00a0<code>'\\u0000'</code>\u00a0(or 0) and a maximum value of\u00a0<code>'\\uffff'</code>\u00a0(or 65,535 inclusive).</li> </ul>"},{"location":"dev/languages/java/java_basics/#literals","title":"Literals","text":""},{"location":"dev/languages/java/java_basics/#integer-literals","title":"Integer literals","text":"<pre><code>// The number 26, in decimal\nint decVal = 26;\n//  The number 26, in hexadecimal\nint hexVal = 0x1a;\n// The number 26, in binary\nint binVal = 0b11010;\n</code></pre>"},{"location":"dev/languages/java/java_basics/#floating-point-literals","title":"Floating-point literals","text":"<pre><code>double d1 = 123.4;\n// same value as d1, but in scientific notation\ndouble d2 = 1.234e2;\nfloat f1  = 123.4f;\n</code></pre>"},{"location":"dev/languages/java/java_basics/#character-and-string-literals","title":"Character and string literals","text":"<p>Always use 'single quotes' for\u00a0<code>char</code>\u00a0literals and \"double quotes\" for\u00a0<code>String</code>\u00a0literals. The Java programming language also supports a few special escape sequences for\u00a0<code>char</code>\u00a0and\u00a0<code>String</code>\u00a0literals:</p> <ul> <li><code>\\b</code>\u00a0(backspace)</li> <li><code>\\t</code>\u00a0(tab)</li> <li><code>\\n</code>\u00a0(line feed)</li> <li><code>\\f</code>\u00a0(form feed)</li> <li><code>\\r</code>\u00a0(carriage return)</li> <li><code>\\\"</code>\u00a0(double quote)</li> <li><code>\\'</code>\u00a0(single quote)</li> <li><code>\\\\</code>\u00a0(backslash)</li> </ul>"},{"location":"dev/languages/java/java_basics/#null-literal","title":"Null literal","text":"<p>There's also a special\u00a0<code>null</code>\u00a0literal that can be used as a value for any reference type.\u00a0<code>null</code>\u00a0may be assigned to any variable, except variables of primitive types. There's little you can do with a\u00a0<code>null</code>\u00a0value beyond testing for its presence. Therefore,\u00a0<code>null</code>\u00a0is often used in programs as a marker to indicate that some object is unavailable.</p>"},{"location":"dev/languages/java/java_basics/#using-underscore-characters-in-numeric-literals","title":"Using Underscore Characters in Numeric Literals","text":"<p>The following example shows other ways you can use the underscore in numeric literals:</p> <pre><code>long creditCardNumber = 1234_5678_9012_3456L;\nlong socialSecurityNumber = 999_99_9999L;\nfloat pi =  3.14_15F;\nlong hexBytes = 0xFF_EC_DE_5E;\nlong hexWords = 0xCAFE_BABE;\nlong maxLong = 0x7fff_ffff_ffff_ffffL;\nbyte nybbles = 0b0010_0101;\nlong bytes = 0b11010010_01101001_10010100_10010010;\n</code></pre> <p>You can place underscores only between digits; you cannot place underscores in the following places:</p> <ul> <li>At the beginning or end of a number</li> <li>Adjacent to a decimal point in a floating point literal</li> <li>Prior to an\u00a0<code>F</code>\u00a0or\u00a0<code>L</code>\u00a0suffix</li> <li>In positions where a string of digits is expected</li> </ul> <p>The following examples demonstrate valid and invalid underscore placements (which are highlighted) in numeric literals:</p> <pre><code>// **Invalid: cannot put underscores**\n// **adjacent to a decimal point**\nfloat pi1 = 3_.1415F;\n// **Invalid: cannot put underscores** \n// **adjacent to a decimal point**\nfloat pi2 = 3._1415F;\n// **Invalid: cannot put underscores** \n// **prior to an L suffix**\nlong socialSecurityNumber1 = 999_99_9999_L;\n\n// OK (decimal literal)\nint x1 = 5_2;\n// **Invalid: cannot put underscores**\n// **At the end of a literal**\nint x2 = 52_;\n// OK (decimal literal)\nint x3 = 5_______2;\n\n// **Invalid: cannot put underscores**\n// **in the 0x radix prefix**\nint x4 = 0_x52;\n// **Invalid: cannot put underscores**\n// **at the beginning of a number**\nint x5 = 0x_52;\n// OK (hexadecimal literal)\nint x6 = 0x5_2; \n// **Invalid: cannot put underscores**\n// **at the end of a number**\nint x7 = 0x52_;\n</code></pre>"},{"location":"dev/languages/java/java_basics/#derived-types","title":"Derived types","text":""},{"location":"dev/languages/java/java_basics/#strings","title":"Strings","text":"<p>In addition to the eight primitive data types listed above, the Java programming language also provides special support for character strings via the\u00a0java.lang.String\u00a0class. Enclosing your character string within double quotes will automatically create a new\u00a0<code>String</code>\u00a0object; for example,\u00a0<code>String s = \"this is a string\";</code>.\u00a0<code>String</code>\u00a0objects are\u00a0immutable, which means that once created, their values cannot be changed. The\u00a0<code>String</code>\u00a0class is not technically a primitive data type, but considering the special support given to it by the language, you'll probably tend to think of it as such.</p>"},{"location":"dev/languages/java/java_basics/#arrays","title":"Arrays","text":""},{"location":"dev/languages/java/java_basics/#declaration","title":"Declaration","text":"<pre><code>// declares an array of integers\nint[] anArray;\nbyte[] anArrayOfBytes;\nshort[] anArrayOfShorts;\nlong[] anArrayOfLongs;\nfloat[] anArrayOfFloats;\ndouble[] anArrayOfDoubles;\nboolean[] anArrayOfBooleans;\nchar[] anArrayOfChars;\nString[] anArrayOfStrings;\n</code></pre>"},{"location":"dev/languages/java/java_basics/#creating-initializing-and-accessing-an-array","title":"Creating, initializing and accessing an array","text":"<pre><code>// create an array of integers\nanArray = new int[10];\nanArray[0] = 100; // initialize first element\nanArray[1] = 200; // initialize second element\nanArray[2] = 300; // and so forth\nSystem.out.println(\"Element 1 at index 0: \" + anArray[0]);\nSystem.out.println(\"Element 2 at index 1: \" + anArray[1]);\nSystem.out.println(\"Element 3 at index 2: \" + anArray[2]);\nSystem.out.println(anArray.length); // print array length\n</code></pre> <p>Alternatively, you can use the shortcut syntax to create and initialize an array:</p> <pre><code>int[] anArray = { \n    100, 200, 300,\n    400, 500, 600, \n    700, 800, 900, 1000\n};\n</code></pre> <p>Multidimensional arrays can be created as follows:</p> <pre><code>String[][] names = {\n            {\"Mr. \", \"Mrs. \", \"Ms. \"},\n            {\"Smith\", \"Jones\"}\n        };\n</code></pre>"},{"location":"dev/languages/java/java_basics/#copying-arrays","title":"Copying arrays","text":"<p>The\u00a0<code>System</code>\u00a0class has an\u00a0<code>arraycopy</code>\u00a0method that you can use to efficiently copy data from one array into another:</p> <pre><code>public static void arraycopy(Object src, int srcPos,\n                             Object dest, int destPos, int length)\n</code></pre> <p>Either manually:</p> <pre><code>public static void main(String[] args) {\n        String[] copyFrom = {\n            \"Affogato\", \"Americano\", \"Cappuccino\", \"Corretto\", \"Cortado\",   \n            \"Doppio\", \"Espresso\", \"Frappucino\", \"Freddo\", \"Lungo\", \"Macchiato\",      \n            \"Marocchino\", \"Ristretto\" };\n\n        String[] copyTo = new String[7];\n        System.arraycopy(copyFrom, 2, copyTo, 0, 7);\n        for (String coffee : copyTo) {\n            System.out.print(coffee + \" \");           \n        }\n    }\n</code></pre> <p>Or using the <code>java.utils.Arrays</code> class:</p> <pre><code>public static void main(String[] args) {\n        String[] copyFrom = {\n            \"Affogato\", \"Americano\", \"Cappuccino\", \"Corretto\", \"Cortado\",   \n            \"Doppio\", \"Espresso\", \"Frappucino\", \"Freddo\", \"Lungo\", \"Macchiato\",      \n            \"Marocchino\", \"Ristretto\" };\n\n        String[] copyTo = java.util.Arrays.copyOfRange(copyFrom, 2, 9);        \n        for (String coffee : copyTo) {\n            System.out.print(coffee + \" \");           \n        }            \n    }\n</code></pre> <p>Some other useful operations provided by methods in the\u00a0<code>java.util.Arrays</code>\u00a0class are:</p> <ul> <li>Searching an array for a specific value to get the index at which it is placed (the\u00a0<code>binarySearch</code>\u00a0method).</li> <li>Comparing two arrays to determine if they are equal or not (the\u00a0<code>equals</code>\u00a0method).</li> <li>Filling an array to place a specific value at each index (the\u00a0<code>fill</code>\u00a0method).</li> <li>Sorting an array into ascending order. This can be done either sequentially, using the\u00a0<code>sort</code>\u00a0method, or concurrently, using the\u00a0<code>parallelSort</code>\u00a0method introduced in Java SE 8. Parallel sorting of large arrays on multiprocessor systems is faster than sequential array sorting.</li> <li> <p>Creating a stream that uses an array as its source (the\u00a0<code>stream</code>\u00a0method). For example, the following statement prints the contents of the\u00a0<code>copyTo</code>\u00a0array in the same way as in the previous example: java.util.Arrays.stream(copyTo).map(coffee -&gt; coffee + \" \").forEach(System.out::print); See\u00a0Aggregate Operations\u00a0for more information about streams.</p> </li> <li> <p>Converting an array to a string. The\u00a0<code>toString</code>\u00a0method converts each element of the array to a string, separates them with commas, then surrounds them with brackets. For example, the following statement converts the\u00a0<code>copyTo</code>\u00a0array to a string and prints it: <code>System.out.println(java.util.Arrays.toString(copyTo));</code> This statement prints the following: <code>[Cappuccino, Corretto, Cortado, Doppio, Espresso, Frappucino, Freddo]</code></p> </li> </ul>"},{"location":"dev/languages/java/java_basics/#operators","title":"Operators","text":""},{"location":"dev/languages/java/java_basics/#operator-precedence","title":"Operator precedence","text":"Operators Precedence postfix <code>_expr_++\u00a0_expr_--</code> unary <code>++_expr_\u00a0--_expr_\u00a0+_expr_\u00a0-_expr_\u00a0~ !</code> multiplicative <code>* / %</code> additive <code>+ -</code> shift <code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code> relational <code>&lt; &gt; &lt;= &gt;= instanceof</code> equality <code>== !=</code> bitwise AND <code>&amp;</code> bitwise exclusive OR <code>^</code> bitwise inclusive OR <code>\\|</code> logical AND <code>&amp;&amp;</code> logical OR <code>\\|</code> ternary <code>? :</code> assignment <code>= += -= *= /= %= &amp;= ^= \\|= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</code>"},{"location":"dev/languages/java/java_basics/#arithmetic-operators","title":"Arithmetic operators","text":"Operator Description <code>+</code> Additive operator (also used for String concatenation) <code>-</code> Subtraction operator <code>*</code> Multiplication operator <code>/</code> Division operator <code>%</code> Remainder operator"},{"location":"dev/languages/java/java_basics/#unary-operators","title":"Unary operators","text":"Operator Description <code>+</code> Unary plus operator; indicates positive value (numbers are positive without this, however) <code>-</code> Unary minus operator; negates an expression <code>++</code> Increment operator; increments a value by 1 <code>--</code> Decrement operator; decrements a value by 1 <code>!</code> Logical complement operator; inverts the value of a boolean"},{"location":"dev/languages/java/java_basics/#equality-and-relational-operators","title":"Equality and Relational Operators","text":"<p>Same as C and C++.</p>"},{"location":"dev/languages/java/java_basics/#conditional-operators","title":"Conditional operators","text":"<p>Same as C and C++.`</p>"},{"location":"dev/languages/java/java_basics/#type-comparison-operator-instanceof","title":"Type Comparison Operator <code>instanceof</code>","text":"<pre><code>Parent obj1 = new Parent();\nParent obj2 = new Child();\n\nSystem.out.println(\"obj1 instanceof Parent: \" + (obj1 instanceof Parent));\nSystem.out.println(\"obj1 instanceof Child: \" + (obj1 instanceof Child));\nSystem.out.println(\"obj1 instanceof MyInterface: \" + (obj1 instanceof MyInterface));\nSystem.out.println(\"obj2 instanceof Parent: \" + (obj2 instanceof Parent));\nSystem.out.println(\"obj2 instanceof Child: \" + (obj2 instanceof Child));\nSystem.out.println(\"obj2 instanceof MyInterface: \" + (obj2 instanceof MyInterface));\n</code></pre>"},{"location":"dev/languages/java/java_basics/#bitwise-and-bitshift-operators","title":"Bitwise and bitshift operators","text":"<p>Same as C and C++.</p> <pre><code>public static void main(String[] args) {\n    int bitmask = 0x000F;\n    int val = 0x2222;\n    // prints \"2\"\n    System.out.println(val &amp; bitmask);\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#expressions-statements-and-blocks","title":"Expressions, Statements, and Blocks","text":""},{"location":"dev/languages/java/java_basics/#expressions","title":"Expressions","text":"<p>[!info] An\u00a0expression\u00a0is a construct made up of variables, operators, and method invocations, which are constructed according to the syntax of the language, that evaluates to a single value.</p>"},{"location":"dev/languages/java/java_basics/#regular-expression","title":"Regular expression","text":"<pre><code>x + 1\n</code></pre>"},{"location":"dev/languages/java/java_basics/#compound-expression","title":"Compound expression","text":"<pre><code>(x + y) / 100\n</code></pre>"},{"location":"dev/languages/java/java_basics/#statements","title":"Statements","text":"<p>Statements are roughly equivalent to sentences in natural languages. A\u00a0statement\u00a0forms a complete unit of execution.</p>"},{"location":"dev/languages/java/java_basics/#expression-statements","title":"Expression statements","text":"<ul> <li>Assignments</li> <li>Increments operators</li> <li>Method invocation</li> <li>Object creation expression</li> </ul> <pre><code>// assignment statement\naValue = 8933.234;\n// increment statement\naValue++;\n// method invocation statement\nSystem.out.println(\"Hello World!\");\n// object creation statement\nBicycle myBike = new Bicycle();\n</code></pre>"},{"location":"dev/languages/java/java_basics/#declaration-statement","title":"Declaration statement","text":"<p>Declares a variable.</p> <pre><code>// declaration statement\ndouble aValue = 8933.234;\n</code></pre>"},{"location":"dev/languages/java/java_basics/#control-flow-statements","title":"Control flow statements","text":"<p>Controls the order in which the statements get executed.</p>"},{"location":"dev/languages/java/java_basics/#blocks","title":"Blocks","text":"<p>[!info] A\u00a0block\u00a0is a group of zero or more statements between balanced braces and can be used anywhere a single statement is allowed.</p> <pre><code>class BlockDemo {\n     public static void main(String[] args) {\n          boolean condition = true;\n          if (condition) { **// begin block 1**\n               System.out.println(\"Condition is true.\");\n          } **// end block one**\n          else { **// begin block 2**\n               System.out.println(\"Condition is false.\");\n          } **// end block 2**\n     }\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#control-flow-statements_1","title":"Control flow statements","text":""},{"location":"dev/languages/java/java_basics/#if-else-statement","title":"If-else statement","text":"<p>Just like C and C++.</p> <pre><code>if (isMoving)\n     currentSpeed--;\n</code></pre> <pre><code>if (isMoving) {\n    currentSpeed--;\n} else {\n    currentSpeed++;\n}\n</code></pre> <pre><code>if (testscore &gt;= 90) {\n    grade = 'A';\n} else if (testscore &gt;= 80) {\n    grade = 'B';\n} else if (testscore &gt;= 70) {\n    grade = 'C';\n} else if (testscore &gt;= 60) {\n    grade = 'D'\n} else {\n    grade = 'F';\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#switch-statement","title":"Switch statement","text":"<p>Just like C and C++.</p> <pre><code> switch (month) {\n    case 1:  monthString = \"January\";\n        break;\n    case 2:  monthString = \"February\";\n        break;\n    case 3:  monthString = \"March\";\n        break;\n    default: monthString = \"Invalid month\";\n        break;\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#while-and-do-while-statements","title":"While and do-while statements","text":""},{"location":"dev/languages/java/java_basics/#while-statements","title":"While statements","text":"<pre><code>while (count &lt; 11) {\n    System.out.println(\"Count is: \" + count);\n    count++;\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#do-while-statements","title":"Do-while statements","text":"<pre><code>do {\n    System.out.println(\"Count is: \" + count);\n    count++;\n} while (count &lt; 11);\n</code></pre>"},{"location":"dev/languages/java/java_basics/#for-statements","title":"For statements","text":"<pre><code>for(int i=1; i&lt;11; i++){\n    System.out.println(\"Count is: \" + i);\n}\n</code></pre> <pre><code>// infinite loop\nfor ( ; ; ) {\n\n    // your code goes here\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#break-continue-and-return-statement","title":"Break, continue and return statement","text":"<p>An unlabeled\u00a0<code>break</code>\u00a0statement terminates the innermost\u00a0<code>switch</code>,\u00a0<code>for</code>,\u00a0<code>while</code>, or\u00a0<code>do-while</code>\u00a0statement, but a labeled\u00a0<code>break</code>\u00a0terminates an outer statement.</p>"},{"location":"dev/languages/java/java_basics/#break-statements","title":"Break statements","text":""},{"location":"dev/languages/java/java_basics/#unlabeled-break-statement","title":"Unlabeled <code>break</code> statement","text":"<pre><code>for (i = 0; i &lt; arrayOfInts.length; i++) {\n    if (arrayOfInts[i] == searchfor) {\n        foundIt = true;\n            **break;**\n    }\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#labeled-break-statement","title":"Labeled <code>break</code> statement","text":"<pre><code>search:\n    for (i = 0; i &lt; arrayOfInts.length; i++) {\n        for (j = 0; j &lt; arrayOfInts[i].length; j++) {\n            if (arrayOfInts[i][j] == searchfor) {\n                foundIt = true;\n                break search;\n            }\n        }\n    }\n</code></pre>"},{"location":"dev/languages/java/java_basics/#continue-statement","title":"Continue statement","text":"<p>The\u00a0<code>continue</code>\u00a0statement skips the current iteration of a\u00a0<code>for</code>,\u00a0<code>while</code>\u00a0, or\u00a0<code>do-while</code>\u00a0loop. The unlabeled form skips to the end of the innermost loop's body and evaluates the\u00a0<code>boolean</code>\u00a0expression that controls the loop.</p>"},{"location":"dev/languages/java/java_basics/#unlabeled-continue-statement","title":"Unlabeled continue statement","text":"<pre><code>for (int i = 0; i &lt; max; i++) {\n    // interested only in p's\n    if (searchMe.charAt(i) != 'p')\n        continue; // skips the current iteration during the loop\n    // process p's\n    numPs++;\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#labeled-continue-statement","title":"Labeled continue statement","text":"<pre><code>test:\n    for (int i = 0; i &lt;= max; i++) {\n        int n = substring.length();\n        int j = i;\n        int k = 0;\n        while (n-- != 0) {\n            if (searchMe.charAt(j++) != substring.charAt(k++)) {\n                continue test; // skip an iteration in the outer loop\n            }\n        }\n        foundIt = true;\n            break test; // ends the outermost for loop\n        }\n</code></pre>"},{"location":"dev/languages/java/java_basics/#labeled-continue-statement_1","title":"Labeled continue statement","text":""},{"location":"dev/languages/java/java_basics/#return-statement","title":"Return statement","text":"<p>The\u00a0<code>return</code>\u00a0statement exits from the current method, and control flow returns to where the method was invoked. The\u00a0<code>return</code>\u00a0statement has two forms: one that returns a value, and one that doesn't.</p> <pre><code>return;\n</code></pre> <pre><code>return ++count;\n</code></pre>"},{"location":"dev/languages/java/java_basics/#classes","title":"Classes","text":""},{"location":"dev/languages/java/java_basics/#defining-fields","title":"Defining fields","text":"<p>In general, class declarations can include these components, in order:</p> <ol> <li>Modifiers such as\u00a0public,\u00a0private, and a number of others (However, note that the\u00a0private\u00a0modifier can only be applied to\u00a0Nested Classes.)<ul> <li><code>public</code>\u00a0modifier\u2014the field is accessible from all classes.</li> <li><code>private</code>\u00a0modifier\u2014the field is accessible only within its own class.</li> </ul> </li> <li>The class name, with the initial letter capitalized by convention.</li> <li>The name of the class's parent (super-class), if any, preceded by the keyword\u00a0extends. A class can only\u00a0extend\u00a0(subclass) one parent.</li> <li>A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword\u00a0implements. A class can\u00a0implement\u00a0more than one interface.</li> <li>The class body, surrounded by braces, {}.</li> </ol> <pre><code>public int cadence;\n</code></pre>"},{"location":"dev/languages/java/java_basics/#defining-methods","title":"Defining methods","text":"<p>More generally, method declarations have six components, in order:</p> <ol> <li>Modifiers such as\u00a0<code>public</code>,\u00a0<code>private</code></li> <li>The return type\u2014the data type of the value returned by the method, or\u00a0<code>void</code>\u00a0if the method does not return a value.</li> <li>The method name\u2014the rules for field names apply to method names as well, but the convention is a little different.</li> <li>The parameter list in parenthesis\u2014a comma-delimited list of input parameters, preceded by their data types, enclosed by parentheses,\u00a0<code>()</code>. If there are no parameters, you must use empty parentheses.</li> <li>An exception list.</li> <li>The method body, enclosed between braces\u2014the method's code, including the declaration of local variables, goes here.</li> </ol> <pre><code>public double calculateAnswer(double wingSpan, int numberOfEngines, double length, double grossTons) {\n    //do the calculation here\n}\n</code></pre> <p>Methods can be overloaded using different signatures</p> <pre><code>public class DataArtist {\n    ...\n    public void draw(String s) {\n        ...\n    }\n    public void draw(int i) {\n        ...\n    }\n    public void draw(double f) {\n        ...\n    }\n    public void draw(int i, double f) {\n        ...\n    }\n}\n</code></pre> <p>You can use a construct called\u00a0varargs\u00a0to pass an arbitrary number of values to a method. You use varargs when you don't know how many of a particular type of argument will be passed to the method. It's a shortcut to creating an array manually</p> <pre><code>public Polygon polygonFrom(Point... corners) {\n    int numberOfSides = corners.length;\n    double squareOfSide1, lengthOfSide1;\n    squareOfSide1 = (corners[1].x - corners[0].x)\n                     * (corners[1].x - corners[0].x) \n                     + (corners[1].y - corners[0].y)\n                     * (corners[1].y - corners[0].y);\n    lengthOfSide1 = Math.sqrt(squareOfSide1);\n\n    // more method body code follows that creates and returns a \n    // polygon connecting the Points\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#providing-constructors-for-the-class","title":"Providing constructors for the class","text":"<p>A class contains constructors that are invoked to create objects from the class blueprint. Constructor declarations look like method declarations\u2014except that they use the name of the class and have no return type.</p> <pre><code>public Bicycle(int startCadence, int startSpeed, int startGear) {\n    gear = startGear;\n    cadence = startCadence;\n    speed = startSpeed;\n}\n</code></pre> <p>Default constructors can also be implemented:</p> <pre><code>public Bicycle() {\n    gear = 1;\n    cadence = 10;\n    speed = 0;\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#examples","title":"Examples","text":"<pre><code>public class Bicycle {\n\n    // **the Bicycle class has**\n    // **three _fields_**\n    public int cadence;\n    public int gear;\n    public int speed;\n\n    // **the Bicycle class has**\n    // **one _constructor_**\n    public Bicycle(int startCadence, int startSpeed, int startGear) {\n        gear = startGear;\n        cadence = startCadence;\n        speed = startSpeed;\n    }\n\n    // **the Bicycle class has**\n    // **four _methods_**\n    public void setCadence(int newValue) {\n        cadence = newValue;\n    }\n\n    public void setGear(int newValue) {\n        gear = newValue;\n    }\n\n    public void applyBrake(int decrement) {\n        speed -= decrement;\n    }\n\n    public void speedUp(int increment) {\n        speed += increment;\n    }\n\n}\n</code></pre> <pre><code>public class MountainBike extends Bicycle {\n\n    // **the MountainBike subclass has**\n    // **one _field_**\n    public int seatHeight;\n\n    // **the MountainBike subclass has**\n    // **one _constructor_**\n    public MountainBike(int startHeight, int startCadence, int startSpeed, int startGear) {\n        super(startCadence, startSpeed, startGear); // build the parent oject\n        seatHeight = startHeight;\n    }   \n\n    // **the MountainBike subclass has**\n    // **one _method_**\n    public void setHeight(int newValue) {\n        seatHeight = newValue;\n    }   \n\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#objects","title":"Objects","text":""},{"location":"dev/languages/java/java_basics/#creating-objects","title":"Creating objects","text":"<pre><code>Point originOne = new Point(23, 94);\nRectangle rectOne = new Rectangle(originOne, 100, 200);\nRectangle rectTwo = new Rectangle(50, 100);\n</code></pre> <p>Each of these statements has three parts (discussed in detail below):</p> <ol> <li>Declaration: The code that is left to the <code>=</code> operator\u00a0are variable declarations that associate a variable name with an object type.</li> <li>Instantiation: The\u00a0new\u00a0keyword is a Java operator that creates the object.</li> <li>Initialization: The\u00a0new\u00a0operator is followed by a call to a constructor, which initializes the new object.</li> </ol>"},{"location":"dev/languages/java/java_basics/#using-objects","title":"Using objects","text":""},{"location":"dev/languages/java/java_basics/#referencing-an-onjects-field","title":"Referencing an onject's field","text":"<pre><code>objectReference.fieldName\n</code></pre>"},{"location":"dev/languages/java/java_basics/#calling-an-objects-method","title":"Calling an object's method","text":"<pre><code>objectReference.methodName(argumentList);\n</code></pre>"},{"location":"dev/languages/java/java_basics/#garbage-collector","title":"Garbage collector","text":"<p>Some object-oriented languages require that you keep track of all the objects you create and that you explicitly destroy them when they are no longer needed.</p> <p>Managing memory explicitly is tedious and error-prone. The Java platform allows you to create as many objects as you want (limited, of course, by what your system can handle), and you don't have to worry about destroying them. The Java runtime environment deletes objects when it determines that they are no longer being used. This process is called\u00a0garbage collection.</p>"},{"location":"dev/languages/java/java_basics/#this-keyword","title":"This keyword","text":"<p>Within an instance method or a constructor,\u00a0<code>this</code>\u00a0is a reference to the\u00a0current object\u00a0\u2014 the object whose method or constructor is being called. You can refer to any member of the current object from within an instance method or a constructor by using\u00a0<code>this</code>.</p>"},{"location":"dev/languages/java/java_basics/#using-this-outside-of-a-constructor","title":"Using this outside of a constructor","text":"<p>Using this keyword inside of class's methods is optional.</p> <pre><code>public class Point {\n    public int x = 0;\n    public int y = 0;\n\n    //constructor\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n</code></pre> <pre><code>public class Point {\n    public int x = 0;\n    public int y = 0;\n\n    //constructor\n    public Point(int a, int b) {\n        x = a;\n        y = b;\n    }\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#using-this-with-a-constructor","title":"Using this with a constructor","text":"<pre><code>public Rectangle() {\n    this(0, 0, 1, 1);\n}\npublic Rectangle(int width, int height) {\n    this(0, 0, width, height);\n    }\n</code></pre>"},{"location":"dev/languages/java/java_basics/#controlling-access-to-members-of-a-class","title":"Controlling access to members of a class","text":"<p>Access level modifiers determine whether other classes can use a particular field or invoke a particular method.</p> <p>There are two levels of access control: - At the top level, <code>public</code> - At the member level <code>public</code>, <code>private</code>, <code>protected</code></p> <p>Access level</p> <p>If other programmers use your class, you want to ensure that errors from misuse cannot happen. Access levels can help you do this. - Use the most restrictive access level that makes sense for a particular member. Use\u00a0<code>private</code>\u00a0unless you have a good reason not to. - Avoid\u00a0<code>public</code>\u00a0fields except for constants</p> <p>The following table shows the access to members permitted by each modifier:</p> Modifier Class Package Subclass World <code>public</code> Y Y Y Y <code>protected</code> Y Y Y N no modifier Y Y N N <code>private</code> Y N N N"},{"location":"dev/languages/java/java_basics/#example","title":"Example","text":"<p>Say:</p> <ul> <li>Package one contains two classes: <code>Alpha</code> and <code>Beta</code>.</li> <li>Package two contains two other classes: <code>AlphaStub</code> and <code>Gamma</code>.</li> <li><code>Alphastub</code> is derived from <code>Alpha</code> class. The following table\u00a0shows where the members of the <code>Alpha</code> class are visible for each of the access modifiers that can be applied to them.</li> </ul> Modifier Alpha Beta Alphasub Gamma <code>public</code> Y Y Y Y <code>protected</code> Y Y Y N no modifier Y Y N N <code>private</code> Y N N N"},{"location":"dev/languages/java/java_basics/#class-members-static","title":"Class members - static","text":"<p>To access or call a class member, use the class name followed by the dot operator without going through instanciation.</p>"},{"location":"dev/languages/java/java_basics/#class-variable-static-variable","title":"Class variable - static variable","text":"<pre><code>public class Bicycle {\n\n    private int cadence;\n    private int gear;\n    private int speed;\n    private int id;\n\n    private static int numberOfBicycles = 0;\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#class-methods-static-methods","title":"Class methods - static methods","text":"<pre><code>public static int getNumberOfBicycles() {\n    return numberOfBicycles;\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#final-keyword","title":"Final keyword","text":"<p>The\u00a0<code>static</code>\u00a0modifier, in combination with the\u00a0<code>final</code>\u00a0modifier, is also used to define constants. The\u00a0<code>final</code>\u00a0modifier indicates that the value of this field cannot change.</p> <pre><code>static final double PI = 3.141592653589793;\n</code></pre>"},{"location":"dev/languages/java/java_basics/#full-example","title":"Full example","text":"<pre><code>public class Bicycle {\n\n    private int cadence;\n    private int gear;\n    private int speed;\n\n    private int id;\n\n    private static int numberOfBicycles = 0;\n\n\n    public Bicycle(int startCadence,\n                   int startSpeed,\n                   int startGear) {\n        gear = startGear;\n        cadence = startCadence;\n        speed = startSpeed;\n\n        id = ++numberOfBicycles;\n    }\n\n    public int getID() {\n        return id;\n    }\n\n    public static int getNumberOfBicycles() {\n        return numberOfBicycles;\n    }\n\n    public int getCadence() {\n        return cadence;\n    }\n\n    public void setCadence(int newValue) {\n        cadence = newValue;\n    }\n\n    public int getGear(){\n        return gear;\n    }\n\n    public void setGear(int newValue) {\n        gear = newValue;\n    }\n\n    public int getSpeed() {\n        return speed;\n    }\n\n    public void applyBrake(int decrement) {\n        speed -= decrement;\n    }\n\n    public void speedUp(int increment) {\n        speed += increment;\n    }\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#static-initialization-block","title":"Static initialization block","text":"<p>A\u00a0static initialization block\u00a0is a normal block of code enclosed in braces,\u00a0<code>{ }</code>, and preceded by the\u00a0<code>static</code>\u00a0keyword.</p> <p>A class can have any number of static initialization blocks, and they can appear anywhere in the class body. The runtime system guarantees that static initialization blocks are called in the order that they appear in the source code.</p>"},{"location":"dev/languages/java/java_basics/#using-static-initialization-block","title":"Using static initialization block","text":"<pre><code>static {\n    // whatever code is needed for initialization goes here\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#using-a-private-static-method","title":"Using a private static method","text":"<pre><code>class Whatever {\n    public static varType myVar = initializeClassVariable();\n\n    private static varType initializeClassVariable() {\n        // initialization code goes here\n    }\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#initializing-instance-members","title":"initializing instance members","text":""},{"location":"dev/languages/java/java_basics/#using-initializer-blocks","title":"Using initializer blocks","text":"<p>Initializer blocks for instance variables look just like static initializer blocks, but without the\u00a0<code>static</code>\u00a0keyword:</p> <pre><code>{\n    // whatever code is needed for initialization goes here\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#using-final-method","title":"Using final method","text":"<pre><code>class Whatever {\n    private varType myVar = initializeInstanceVariable();\n\n    protected final varType initializeInstanceVariable() {\n        // initialization code goes here\n        // final method can not be overriden in the subclass\n        // protected statement ensure that its use is kept to the current class and not to derived ones\n    }\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#nested-classes","title":"Nested classes","text":"<p> Why use nested classes ?</p> <ul> <li>Its a way of logically grouping classes that are logically grouped in one place.</li> <li>Increases encapsulation.</li> <li>Lead to more readable and maintainable code.</li> </ul>"},{"location":"dev/languages/java/java_basics/#inner-classes","title":"Inner classes","text":"<p>As with instance methods and variables, an inner class is associated with an instance of its enclosing class and has direct access to that object's methods and fields.</p> <p>Also, because an inner class is associated with an instance, it cannot define any static members itself.</p> <pre><code>class OuterClass {\n    class InnerClass {\n    }\n}\n</code></pre> <p>To instantiate an inner class, you must first instantiate the outer class. Then, create the inner object within the outer object with this syntax:</p> <pre><code>OuterClass outerObject = new OuterClass(); // create the outer class\nOuterClass.InnerClass innerObject = outerObject.new InnerClass(); // create the nested object inside the outer class \n</code></pre>"},{"location":"dev/languages/java/java_basics/#static-nested-classes","title":"Static nested classes","text":"<p>A static nested class interacts with the instance members of its outer class (and other classes) just like any other top-level class. In effect, a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.</p> <p>A static nested class is instantiated the same way as a top-level class.</p>"},{"location":"dev/languages/java/java_basics/#shadowing","title":"Shadowing","text":"<p>If a declaration of a type (such as a member variable or a parameter name) in a particular scope (such as an inner class or a method definition) has the same name as another declaration in the enclosing scope, then the declaration\u00a0shadows\u00a0the declaration of the enclosing scope.</p> <p>You cannot refer to a shadowed declaration by its name alone. Using the class name or this keyword will help to have a defined scope.</p>"},{"location":"dev/languages/java/java_basics/#example_1","title":"Example","text":"<pre><code>public class OuterClass {\n\n    String outerField = \"Outer field\";\n    static String staticOuterField = \"Static outer field\";\n\n    class InnerClass {\n        void accessMembers() {\n            System.out.println(outerField);\n            System.out.println(staticOuterField);\n        }\n    }\n\n    static class StaticNestedClass {\n        void accessMembers(OuterClass outer) {\n            // Compiler error: Cannot make a static reference to the non-static\n            //     field outerField\n            // System.out.println(outerField);\n            System.out.println(outer.outerField);\n            System.out.println(staticOuterField);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Inner class:\");\n        System.out.println(\"------------\");\n        OuterClass outerObject = new OuterClass();\n        OuterClass.InnerClass innerObject = outerObject.new InnerClass();\n        innerObject.accessMembers();\n\n        System.out.println(\"\\nStatic nested class:\");\n        System.out.println(\"--------------------\");\n        StaticNestedClass staticNestedObject = new StaticNestedClass();        \n        staticNestedObject.accessMembers(outerObject);\n\n        System.out.println(\"\\nTop-level class:\");\n        System.out.println(\"--------------------\");\n        TopLevelClass topLevelObject = new TopLevelClass();        \n        topLevelObject.accessMembers(outerObject);                \n    }\n}\n</code></pre>"},{"location":"dev/languages/java/java_basics/#interfaces","title":"Interfaces","text":"<p>TODO</p>"},{"location":"dev/languages/markdown/markdown_basics/","title":"Markdown basics","text":""},{"location":"dev/languages/markdown/markdown_basics/#ressources","title":"Ressources","text":"<p>Emojis list</p> <p>The full list of the supported Markdown emojis can be found here.</p> <p>Adomitions</p> <ul> <li>For Mkdocs</li> </ul>"},{"location":"dev/languages/python/about_init_files/","title":"<code>__init__.py</code>","text":"<p>Key Takeaways</p> <ul> <li><code>__init__.py</code> is required to treat directories as packages (in Python 3.3+, it can be empty, but it\u2019s often useful for defining imports).</li> <li>It\u2019s a central file to manage package-level exports and initialization.</li> <li>Properly structuring <code>__init__.py</code> helps keep packages modular, readable, and easy to import.</li> </ul> <p>These tips are linked to python wheels.</p> <p>Here's a breakdown of its purpose and behavior in the context of creating a Python package.</p>"},{"location":"dev/languages/python/about_init_files/#1-defining-a-package","title":"1. Defining a Package","text":"<p>Any directory containing a file named <code>__init__.py</code> is treated as a Python package.  This file signals to Python that the directory should be treated as a package, making it possible to import modules and sub-packages within that directory.</p>"},{"location":"dev/languages/python/about_init_files/#2-setting-up-imports-and-namespaces","title":"2. Setting Up Imports and Namespaces","text":"<p>The <code>__init__.py</code> file allows you to control what\u2019s exposed when someone imports the package. For example:</p> <pre><code># mypackage/__init__.py\nfrom .module1 import MyClass\nfrom .module2 import my_function\n</code></pre> <p>With this setup, importing the package (<code>import mypackage</code>) will expose <code>MyClass</code> and <code>my_function</code> directly under <code>mypackage</code>. You can also use <code>__all__</code> to define the public API of the package, which restricts what\u2019s available when using <code>from package import *</code>.</p>"},{"location":"dev/languages/python/about_init_files/#3-code-execution","title":"3. Code Execution","text":"<p>The <code>__init__.py</code> file can contain executable code. This means you can initialize variables, configure logging, or perform setup when the package is imported.</p> <p>Be careful with heavy computations or I/O in <code>__init__.py</code>, as it can slow down imports.</p>"},{"location":"dev/languages/python/about_init_files/#4-organizing-sub-packages","title":"4. Organizing Sub-packages","text":"<p>Packages can be nested within other packages. By using <code>__init__.py</code> files in sub-directories, you can create hierarchical structures, such as <code>mypackage.subpackage.module</code>. Each level in the hierarchy requires its own <code>__init__.py</code> file to be considered part of the package structure.</p>"},{"location":"dev/languages/python/about_init_files/#example-structure","title":"Example Structure","text":"<p>Here's an example of a package structure with <code>__init__.py</code> files:</p> <pre><code>mypackage/\n\u2502\n\u251c\u2500\u2500 __init__.py       # Initializes the package\n\u251c\u2500\u2500 module1.py        # Contains some classes or functions\n\u251c\u2500\u2500 module2.py\n\u2514\u2500\u2500 subpackage/\n    \u251c\u2500\u2500 __init__.py   # Initializes the subpackage\n    \u2514\u2500\u2500 submodule.py\n</code></pre> <p>In the above structure, each <code>__init__.py</code> file can be tailored to set up the imports, initialize values, and control the public API for each package or sub-package.</p> <p>Here\u2019s a more detailed look.</p>"},{"location":"dev/languages/python/about_init_files/#content-of-mypackage__init__py","title":"Content of <code>mypackage/__init__.py</code>","text":"<p>This file serves as the entry point for the <code>mypackage</code> package, allowing control over what is available to users when they import <code>mypackage</code>.</p> <p>Here\u2019s an example of what <code>mypackage/__init__.py</code> might look like:</p> <pre><code># Import specific functions or classes from modules within the package\nfrom .module1 import MyClass\nfrom .module2 import my_function\n\n# Import specific functions or classes from subpackage\nfrom .subpackage.submodule import SubClass, sub_function\n# Optionnally from .subpackage.submodule import * imports every component defined in the submodule subpackage (no need to repeat function names)\n\n# Optionally define an __all__ variable to control what\u2019s accessible when using `from mypackage import *`\n__all__ = [\"MyClass\", \"my_function\"]\n\n# You could also add some package-level variables or configuration settings if needed\nVERSION = \"1.0.0\"\n</code></pre> <p>With this setup:</p> <ul> <li><code>from mypackage import MyClass</code> or <code>from mypackage import my_function</code> works directly, without needing to specify the individual module.</li> <li><code>__all__</code> restricts what is exported during a <code>from mypackage import *</code> operation, so only <code>MyClass</code> and <code>my_function</code> would be imported.</li> <li><code>VERSION</code> is a package-level constant that can be accessed with <code>mypackage.VERSION</code>.</li> </ul>"},{"location":"dev/languages/python/about_init_files/#content-of-mypackagesubpackage__init__py","title":"Content of <code>mypackage/subpackage/__init__.py</code>","text":"<p>This file initializes <code>mypackage.subpackage</code>, potentially exposing elements within the sub-package to make them available directly through <code>subpackage</code>.</p> <p>Here\u2019s an example of <code>mypackage/subpackage/__init__.py</code>:</p> <pre><code># Import elements from submodule\nfrom .submodule import SubClass, sub_function\n\n# Control what\u2019s accessible when using `from mypackage.subpackage import *`\n__all__ = [\"SubClass\", \"sub_function\"]\n</code></pre> <p>With this setup:</p> <ul> <li>Users can import directly from <code>mypackage.subpackage</code> without specifying the submodule: <code>from mypackage.subpackage import SubClass</code>.</li> <li><code>__all__</code> controls what is accessible in case of wildcard imports (<code>*</code>).</li> </ul>"},{"location":"dev/languages/python/about_init_files/#sample-content-of-mypackagemodule1py-module2py-and-subpackagesubmodulepy","title":"Sample Content of <code>mypackage/module1.py</code>, <code>module2.py</code>, and <code>subpackage/submodule.py</code>","text":"<p>For completeness, here\u2019s a quick idea of what the individual modules might contain:</p> <p><code>mypackage/module1.py</code></p> <pre><code>class MyClass:\n    def __init__(self):\n        print(\"MyClass initialized\")\n\ndef helper_function():\n    print(\"Helper function in module1\")\n</code></pre> <p><code>mypackage/module2.py</code></p> <pre><code>def my_function():\n    print(\"Function in module2\")\n</code></pre> <p><code>mypackage/subpackage/submodule.py</code></p> <pre><code>class SubClass:\n    def __init__(self):\n        print(\"SubClass initialized\")\n\ndef sub_function():\n    print(\"Function in submodule\")\n</code></pre>"},{"location":"dev/languages/python/about_init_files/#usage-example","title":"Usage Example","text":"<p>Once structured, the package can be imported and used as follows:</p> <pre><code># Import from the main package ()\n# Good for users, since they do not have to know the structure of the library\nfrom mypackage import MyClass, my_function\n\n# Import from the sub-package (recommended for internal imports)\n# Users may not have to know the package strucure of the library\nfrom mypackage.subpackage import SubClass, sub_function\n\n# Import every symbol (not recommended because it can cause undefined behaviors with shadowed names)\nfrom mypackage import *\n\n# Import the library in a namespace\n# Recommended because it specifies the namespace and avoids name conflicts\n# Functions has to be called with mp. before function / class names\nimport mypackage as mp\n\n# Using the imports\ninstance = (mp.)MyClass()\nmy_function()\n\nsub_instance = (mp.)SubClass()\nsub_function()\n</code></pre>"},{"location":"dev/languages/python/about_init_files/#refs","title":"Refs","text":"<p>Refs</p> <p>Python Packaging User Guide</p>"},{"location":"dev/languages/python/environments/","title":"Python environment","text":""},{"location":"dev/languages/python/environments/#introduction","title":"Introduction","text":"<p>Python is an [[#Interpreted languages]], meaning it needs an environment to work properly. Other programming languages can require a compilation phase to transform the code in binary instructions for the computer. Theses are called the [[#Compiled languages]]. There are also other programming languages execution methods that will not be detailed here (JIT, semi-interpreted, ...).</p> <p>There are mainly 3 ways to create an environment for Python:</p> <ul> <li>Using the base (global) environment</li> <li>Using a virtual environment</li> <li>Using an anaconda environment</li> </ul> <p>Each methods has its features and drawbacks, which will be detailed below. The choice depends largely on the use case.</p>"},{"location":"dev/languages/python/environments/#executing-python-code","title":"Executing Python code","text":"<p>Python files are simply text files with a <code>.py</code> extension. They can be executed in a terminal / shell / console called [[#Command-Line Interface (CLI)]] on your system.</p> <p>There are several command-line interfaces to be aware of:</p> <p>For windows:</p> <ol> <li>Command Prompt (cmd): The traditional Windows command-line interface.</li> <li>PowerShell: A more powerful and modern shell with scripting capabilities.</li> <li>Windows Subsystem for Linux (WSL): Allows running a Linux distribution alongside Windows. Once installed, you can use Linux terminals like <code>bash</code>.</li> </ol> <p>For Linux:</p> <ol> <li>Bash: The default shell for most Linux distributions.</li> <li>GNOME Terminal: Commonly used on systems running the GNOME desktop environment.</li> <li>Konsole: The default terminal emulator for the KDE desktop environment.</li> <li>xterm: A simple and widely used terminal emulator in X Window System.</li> </ol> <p>For macOS</p> <ol> <li>Terminal: The default terminal emulator for macOS, which uses the Bash shell by default.</li> <li>iTerm2: A popular alternative to the default Terminal app, providing additional features and customization options.</li> <li>Zsh (with Oh My Zsh): Zsh is an alternative shell to Bash and can be used with macOS. Many users enhance it further using the Oh My Zsh framework.</li> </ol> <p>Code can also be executed in an  (Spyder, PyCharm, VSCode, ...).</p> <p>In any of these scenarios, you need an [[#Integrated Development Environment (IDE)]] to be able to execute Python code.</p>"},{"location":"dev/languages/python/environments/#how-to-call-python","title":"How to call Python ?","text":"<p>The Python base environment is the one that comes installed with your Python distribution.</p> <ul> <li>You can find the different Python versions on the official website.</li> <li>You can install multiple versions of Python on your system and be able to use them only if its a different major version. (3.9.1 can not be installed if 3.9.4 is already installed, but 3.11 can).</li> </ul> <p>Installing a Python version will lead to a clean, empty from libraries environment. Therefore you can not use any external librairies (numpy, scipy, matplotlib, ...). You need first to install librairies.</p> <p>Python can only be called from the console if</p> <ol> <li>You specify the absolute path</li> <li>You add Python executable to the PATH variables of your computer</li> </ol> <p>How to call Python ?</p> <p>An example to get the Python version.</p> <ul> <li>If you have a single Python version installed, use:</li> <li><code>python --version</code> (often)</li> <li><code>python3 --version</code> (if <code>python</code> is not found)</li> <li>if <code>python</code> is still not found, it means that it is not installed on your system or that you have not added it to the PATH</li> <li>If you have multiple Python distributions installed, use the [[#py launcher]] (must be installed):</li> <li><code>py -3.9 -m --version</code> (you can specify the version you need with a minus before and only two numbers)</li> </ul>"},{"location":"dev/languages/python/environments/#python-base-environment","title":"Python base environment","text":"<p>Using the Python base environment typically means working with the global Python installation on your system without creating a virtual environment. Here are the general steps for using the Python base environment:</p>"},{"location":"dev/languages/python/environments/#1-check-python-installation","title":"1. Check Python Installation","text":"<p>Ensure that Python is installed on your system. Open a terminal or command prompt and type:</p> <pre><code>python --version\n</code></pre> <p>This should display the version number of the installed Python interpreter.</p>"},{"location":"dev/languages/python/environments/#2-create-and-navigate-to-your-project-directory","title":"2. Create and Navigate to Your Project Directory","text":"<p>Create a directory for your project and navigate to it using the <code>cd</code> command:</p> <pre><code>mkdir my_project\ncd my_project\n</code></pre>"},{"location":"dev/languages/python/environments/#3-write-your-python-code","title":"3. Write Your Python Code","text":"<p>Create a Python script or write your Python code directly in a file within the project directory. You can use any text editor or integrated development environment (IDE) of your choice.</p> <p>For example, create a file named <code>my_script.py</code> and add the following code:</p> <pre><code>print(\"Hello, Python base environment!\")\n</code></pre>"},{"location":"dev/languages/python/environments/#4-run-your-python-script","title":"4. Run Your Python Script","text":"<p>Run your Python script from the terminal or command prompt:</p> <pre><code>python my_script.py\n</code></pre> <p>This will execute your Python script, and you should see the output.</p>"},{"location":"dev/languages/python/environments/#important-notes","title":"Important Notes","text":"<p>Warning</p> <ul> <li>When working with the Python base environment, you are using the global Python installation on your system. Any packages you install using <code>pip</code> will be installed globally.</li> <li>It's recommended to use virtual environments for project-specific dependencies to avoid conflicts and ensure better isolation between projects.</li> <li>The commands used (<code>python</code> and <code>pip</code>) refer to the global Python installation. If you have multiple Python versions installed, you may need to specify the version (e.g., <code>python3</code>, <code>pip3</code>) to ensure you're using the desired interpreter.</li> <li>Keep in mind that installing packages globally may require administrative (sudo) permissions on Linux/macOS systems.</li> </ul> <p>Note</p> <p>While using the Python base environment is straightforward, virtual environments are generally preferred for Python development to manage dependencies on a per-project basis. Virtual environments provide better isolation and avoid potential conflicts between different projects or system-wide Python installations.</p>"},{"location":"dev/languages/python/environments/#python-virtual-environment","title":"Python virtual environment","text":"<p>Using a Python virtual environment is a good practice for managing project-specific dependencies. Here are the general steps for creating and using a virtual environment in Python:</p>"},{"location":"dev/languages/python/environments/#1-install-virtualenv-if-not-already-installed","title":"1. Install <code>virtualenv</code> (if not already installed)","text":"<p>If you don't have the <code>virtualenv</code> package installed, you can install it using the following command:</p> <pre><code>pip install virtualenv\n</code></pre>"},{"location":"dev/languages/python/environments/#2-create-a-virtual-environment","title":"2. Create a Virtual Environment","text":"<p>Navigate to your project directory in the terminal or command prompt and run the following command to create a virtual environment named \"venv_spotfunk\":</p>"},{"location":"dev/languages/python/environments/#for-windows","title":"For Windows","text":"<pre><code>python -m venv venv_spotfunk\n</code></pre>"},{"location":"dev/languages/python/environments/#for-linuxmacos","title":"For Linux/macOS","text":"<pre><code>python3 -m venv venv_spotfunk\n</code></pre>"},{"location":"dev/languages/python/environments/#3-activate-the-virtual-environment","title":"3. Activate the Virtual Environment","text":"<p>Activate the virtual environment. The activation commands differ based on the operating system:</p>"},{"location":"dev/languages/python/environments/#for-windows_1","title":"For Windows","text":"<pre><code>./venv_spotfunk/Scripts/activate\n</code></pre>"},{"location":"dev/languages/python/environments/#for-linuxmacos_1","title":"For Linux/macOS","text":"<pre><code>source venv_spotfunk/bin/activate\n</code></pre> <p>After activation, your command prompt or terminal prompt should change, indicating that you are now working within the virtual environment.</p>"},{"location":"dev/languages/python/environments/#4-use-python-and-install-packages","title":"4. Use Python and Install Packages","text":"<p>Now that you are in the virtual environment, any Python-related commands and package installations will be isolated to this environment. For example:</p> <ul> <li> <p>Run Python:</p> <pre><code>python\n</code></pre> </li> <li> <p>Install packages using <code>pip</code>:</p> <pre><code>pip install package_name\n</code></pre> </li> </ul>"},{"location":"dev/languages/python/environments/#5-deactivate-the-virtual-environment","title":"5. Deactivate the Virtual Environment","text":"<p>When you're done working in the virtual environment, you can deactivate it:</p> <pre><code>deactivate\n</code></pre>"},{"location":"dev/languages/python/environments/#important-notes_1","title":"Important Notes","text":"<p>Warning</p> <ul> <li>Always activate the virtual environment before working on your project to ensure you're using the isolated environment.</li> <li>Include the virtual environment directory (<code>venv</code> in this case) in your project's <code>.gitignore</code> file or equivalent, so you don't accidentally commit it to version control.</li> <li>Each project should have its own virtual environment to avoid conflicts between different projects.</li> <li>The virtual environment needs to be reactivated each time you start a new terminal or command prompt session.</li> </ul> <p>Note</p> <p>Using virtual environments is a standard practice in Python development to manage dependencies and ensure project-specific consistency. It helps keep your project isolated and reduces potential conflicts between different projects or system-wide Python installations.</p>"},{"location":"dev/languages/python/environments/#anaconda-environment","title":"Anaconda environment","text":"<p>Anaconda is a popular distribution for Python and other programming languages commonly used in data science and scientific computing. It includes many pre-installed libraries and tools to simplify the setup for data-related tasks. Here are the steps to use Anaconda with Python:</p>"},{"location":"dev/languages/python/environments/#1-install-anaconda","title":"1. Install Anaconda","text":"<p>Visit the Anaconda website and download the Anaconda distribution suitable for your operating system (Windows, macOS, or Linux). Follow the installation instructions provided on the website.</p>"},{"location":"dev/languages/python/environments/#2-open-anaconda-navigator-optional","title":"2. Open Anaconda Navigator (Optional)","text":"<p>Anaconda Navigator is a graphical interface that comes with the Anaconda distribution. You can use it to manage environments, install packages, and launch applications. After installation, you can open Anaconda Navigator from the Start menu (Windows) or the Applications folder (macOS).</p>"},{"location":"dev/languages/python/environments/#3-create-and-manage-environments","title":"3. Create and Manage Environments","text":"<p>One of the key features of Anaconda is the ability to create and manage isolated environments. Environments allow you to install specific packages for different projects without interfering with each other. You can create a new environment using the following command in the terminal or command prompt:</p> <pre><code>conda create --name myenv\n</code></pre> <p>Replace <code>myenv</code> with the desired name for your environment. You can also specify the Python version and additional packages during the environment creation.</p> <p>Activate the environment:</p> <ul> <li>On Windows:   <pre><code>conda activate myenv\n</code></pre></li> <li>On macOS/Linux:   <pre><code>source activate myenv\n</code></pre></li> </ul>"},{"location":"dev/languages/python/environments/#4-install-packages","title":"4. Install Packages","text":"<p>Once you have activated your environment, you can use <code>conda install</code> to install packages. For example, to install a package named <code>numpy</code>, you can run:</p> <pre><code>conda install numpy\n</code></pre>"},{"location":"dev/languages/python/environments/#5-use-jupyter-notebooks-optional","title":"5. Use Jupyter Notebooks (Optional)","text":"<p>Anaconda comes with Jupyter Notebooks, a popular interactive computing environment. You can launch Jupyter Notebooks from the Anaconda Navigator or directly from the terminal:</p> <pre><code>jupyter notebook\n</code></pre> <p>This will open a web browser with the Jupyter Notebook interface, allowing you to create and run Python notebooks.</p>"},{"location":"dev/languages/python/environments/#6-update-anaconda-and-packages","title":"6. Update Anaconda and Packages","text":"<p>Regularly update Anaconda and the installed packages to benefit from the latest features and bug fixes. You can use the following commands:</p> <pre><code>conda update conda\nconda update anaconda\n</code></pre> <p>To update a specific package:</p> <pre><code>conda update package_name\n</code></pre>"},{"location":"dev/languages/python/environments/#7-deactivate-the-environment","title":"7. Deactivate the Environment","text":"<p>When you're done working in an environment, deactivate it using the following command:</p> <ul> <li>On Windows:   <pre><code>conda deactivate\n</code></pre></li> <li>On macOS/Linux:   <pre><code>source deactivate\n</code></pre></li> </ul> <p>These are the basic steps to get started with Anaconda and Python. Anaconda provides a convenient environment for data science and scientific computing, making it easier to manage dependencies and create reproducible environments for your projects.</p>"},{"location":"dev/languages/python/environments/#other-environments","title":"Other environments","text":"<p>Apart from the base Python environment, virtual environments, and Anaconda environments, there are other environments or tools that developers and data scientists use for managing Python environments. Some of them include:</p>"},{"location":"dev/languages/python/environments/#1-pipenv","title":"1. Pipenv:","text":"<p>Pipenv is a tool for managing Python environments, dependencies, and packaging in a single file. It aims to bring the best of all packaging worlds (bundled, required, and development) to the Python world.</p>"},{"location":"dev/languages/python/environments/#2-poetry","title":"2. Poetry:","text":"<p>Poetry is a modern dependency management and packaging tool for Python. It simplifies and centralizes the configuration of your projects, including dependency management, packaging, and publishing.</p>"},{"location":"dev/languages/python/environments/#5-pyenv","title":"5. pyenv:","text":"<p>pyenv allows you to easily install and switch between multiple versions of Python. It's particularly useful for managing different Python versions on your system.</p>"},{"location":"dev/languages/python/environments/#6-pip-package-installer","title":"6. pip (package installer):","text":"<p>While not an environment management tool itself, the <code>pip</code> package installer can be used with <code>requirements.txt</code> files to specify and install dependencies for a project. Tools like <code>pip-tools</code> can help manage dependencies more efficiently.</p> <p>These tools offer various features and approaches to creating, managing, and isolating Python environments. The choice of which one to use depends on your specific needs and preferences. Some developers prefer the simplicity of <code>venv</code>, while others may choose more feature-rich tools like <code>Pipenv</code> or <code>Poetry</code> for managing dependencies and packaging. Conda is often favored in data science and scientific computing due to its ability to handle non-Python libraries and its cross-platform support.</p>"},{"location":"dev/languages/python/environments/#definitions","title":"Definitions","text":""},{"location":"dev/languages/python/environments/#interpreted-languages","title":"Interpreted languages","text":"<p>Info</p> <p>An interpreted language is a type of programming language in which the source code is not directly translated into machine code before execution. Instead, an interpreter reads and executes the code line by line or statement by statement at runtime. This means that the source code is translated and executed on the fly, without the need for a separate compilation step. In an interpreted language, the interpreter interprets the code and executes the instructions directly, which can make the development process more flexible and interactive. Developers can write and test code quickly without the need to compile the entire program before running it. However, interpreted languages may have slightly slower execution compared to languages that are compiled to machine code.  Examples of interpreted languages include Python, JavaScript, Ruby, and PHP. These languages are often used for scripting, rapid prototyping, and applications where development speed and ease of use are prioritized over raw performance.</p>"},{"location":"dev/languages/python/environments/#compiled-languages","title":"Compiled languages","text":"<p>Info</p> <p>A compiled language is a type of programming language where the source code is translated into machine code or an intermediate code by a compiler before execution. The compiler analyzes the entire source code and translates it into a form that can be executed by the computer's hardware. Unlike interpreted languages, compiled languages undergo a separate compilation step before running the program. This compilation process generates an executable file or another form of code that is specific to the target machine's architecture. Once the compilation is complete, the resulting binary file can be executed without the need for the original source code or the presence of the compiler. Compiled languages often provide better performance at runtime compared to interpreted languages because the code has already been translated into machine code optimized for the target platform. Examples of compiled languages include C, C++, Java (which is compiled to bytecode and then interpreted by the Java Virtual Machine), and Rust. These languages are often used for system-level programming, application development, and scenarios where performance is a critical factor.</p>"},{"location":"dev/languages/python/environments/#command-line-interface-cli","title":"Command-Line Interface (CLI)","text":"<p>!!! info Command-Line Interface (CLI) A Command-Line Interface (CLI) is a text-based interface used for interacting with software and computer systems by entering commands into a text terminal or console. Users interact with the system by typing commands, and the system responds with textual output. CLI is an alternative to Graphical User Interfaces (GUIs), which use graphical elements like buttons and windows for user interaction. Key characteristics of command-line interfaces include</p> <ol> <li>Text Commands: Users input commands by typing text-based instructions. Commands often consist of a command name followed by parameters or options.</li> <li>Scripting: CLIs are conducive to scripting, allowing users to automate repetitive tasks by creating scripts that execute sequences of commands.</li> <li>Resource Efficiency: CLIs typically use fewer system resources than GUIs, making them suitable for use on servers, embedded systems, and environments where resource efficiency is crucial.</li> <li>Scriptable and Automatable: CLIs are scriptable, meaning users can create scripts to automate tasks and perform complex operations.</li> <li>Remote Access: CLIs are well-suited for remote access and administration, allowing users to connect to a remote system over a network and execute commands.</li> <li>Learning Curve: For some users, CLIs may have a steeper learning curve compared to GUIs, as users need to memorize commands and their syntax. However, they often provide more control and efficiency once mastered.</li> </ol> <p>Examples of command-line interfaces include:</p> <ul> <li>Command Prompt (cmd): Found on Windows systems, it provides a text-based interface for entering commands.</li> <li>Terminal: Found on Unix-like systems (Linux and macOS), it allows users to interact with the shell and execute commands.</li> <li>PowerShell: On Windows, it is a more advanced and scriptable shell and command language.</li> <li>Bash: The default shell on many Unix-like systems, including Linux and macOS.</li> </ul> <p>Users can perform various tasks through the command line, such as file manipulation, system configuration, software installation, and more. CLIs remain popular in many technical fields, including software development, system administration, and networking, where precise control and automation are essential.</p>"},{"location":"dev/languages/python/environments/#integrated-development-environment-ide","title":"Integrated Development Environment (IDE)","text":"<p>!!! info Integrated Development Environment (IDE) An IDE, or Integrated Development Environment, is a software application that provides comprehensive facilities to programmers for software development. It typically combines a code editor, a debugger, and a build automation tool, along with other features such as version control integration, project management, and collaboration tools. The primary purpose of an IDE is to streamline and enhance the process of writing, testing, and debugging code. Key components of an IDE include:</p> <ol> <li>Code Editor: A text editor specifically designed for writing and editing source code. It often includes features like syntax highlighting, code completion, and error checking.</li> <li>Debugger: A tool for inspecting and debugging code. It allows developers to set breakpoints, step through code execution, and examine variable values during runtime.</li> <li>Compiler/Interpreter: Some IDEs include built-in support for compiling and running code. For interpreted languages, they may include an interpreter or provide seamless integration with an external interpreter.</li> <li>Build Automation: Facilities for automating the process of building and compiling code into executable files or deployable artifacts.</li> <li>Version Control Integration: Integration with version control systems (e.g., Git, SVN) to manage source code changes and collaboration among developers.</li> <li>Project Management: Tools for organizing and managing project files, dependencies, and configurations.</li> <li>User Interface: A user-friendly interface that brings together all the development tools and features into a cohesive environment.</li> </ol> <p>Popular IDEs include:</p> <ul> <li>Visual Studio (Visual Studio Code): Developed by Microsoft, Visual Studio is a comprehensive IDE for various languages, and Visual Studio Code is a lightweight, extensible code editor.</li> <li>Eclipse: An open-source IDE primarily used for Java development but supports various languages through plugins.</li> <li>IntelliJ IDEA: A popular Java IDE developed by JetBrains, with support for other languages through plugins.</li> <li>PyCharm: A Python-specific IDE developed by JetBrains.</li> <li>Xcode: Apple's IDE for macOS and iOS development.</li> </ul> <p>IDEs significantly enhance productivity by providing a centralized and efficient environment for software development, allowing developers to manage various aspects of the development lifecycle within a single application.</p>"},{"location":"dev/languages/python/environments/#py-launcher","title":"py launcher","text":"<p>Info</p> <p>The <code>py</code> launcher is a tool that allows you to manage and launch Python versions on Windows. If it's installed, you can use it from the command prompt or PowerShell to run Python scripts or interact with different Python versions. Here's how you can call the <code>py</code> launcher:</p> <ol> <li> <p>Open the Command Prompt or PowerShell on your Windows system.</p> </li> <li> <p>To run a Python script using the default Python version, you can simply use:</p> <pre><code>py script.py\n</code></pre> </li> </ol> <p>Replace <code>script.py</code> with the name of your Python script.</p> <ol> <li> <p>If you want to specify a particular Python version, you can use the <code>-X</code> option followed by the version number, like this:</p> <pre><code>py -X.Y script.py\n</code></pre> </li> </ol> <p>Replace <code>X.Y</code> with the desired Python version, such as <code>3.8</code>.</p> <p>If the <code>py</code> launcher is not installed or not available, you can still run Python scripts by using the full path to the Python executable. The default installation path for Python on Windows is usually something like:</p> <pre><code>C:\\Users\\YourUsername\\AppData\\Local\\Programs\\Python\\Python3X\\python.exe\n</code></pre> <p>Replace <code>YourUsername</code> with your actual username, and <code>X</code> with the specific Python version number.</p> <p>Alternatively, you can add the Python installation directory to the system's PATH environment variable, which allows you to run <code>python</code> directly from the command prompt without specifying the full path. Once added to the PATH, you can use:</p> <pre><code>python script.py\n</code></pre> <p>Make sure to adjust the commands based on your Python version and script filename.</p> <p>To check if the <code>py</code> launcher is installed, you can try running <code>py --version</code> from the command prompt or PowerShell. If it's not installed, you can install it by downloading and installing the latest version of Python from the official Python website (https://www.python.org/downloads/), making sure to check the option that says \"Add Python to PATH\" during installation.</p>"},{"location":"dev/languages/python/wheels/","title":"Wheels","text":""},{"location":"dev/languages/python/wheels/#overview","title":"Overview","text":"<p>What is this?</p> <p>Wheels are a component of the Python ecosystem that helps to make package installs\u00a0just work.    They allow for faster installations and more stability in the package distribution process.   It is a type of built distribution (it comes in a ready to install form).</p> <p>Strengths</p> <ul> <li>Faster <code>pip install</code> installation process  <ul> <li>Smaller in size than source distributions</li> <li>Avoids the intermediate step of building packages off the source distribution   </li> </ul> </li> <li>Avoids missing headers errors since building source distributions requires OpenSSL development headers installed</li> <li>No need for a compiler</li> <li>Provide consistency</li> <li>Can be used inside other repositories when the package is private or unreleased as dependencies in <code>requirements.txt</code>, therefore allowing to build the dependent software.</li> <li>Provides a fixed snapshot of the Python library in time.</li> </ul> <p>Weaknesses</p> <ul> <li>Must be built for each platform by the developer: each package will provide a source and / or a wheel distribution (per platform) of the package.</li> <li>If broken, then a full source build is required</li> <li>Only for deployment</li> </ul>"},{"location":"dev/languages/python/wheels/#how-wheel-is-working","title":"How wheel is working","text":""},{"location":"dev/languages/python/wheels/#what-is-python-wheel","title":"What is Python wheel ?","text":"<p>Python wheel is a <code>.zip</code> file containing the built source code for a python package.</p>"},{"location":"dev/languages/python/wheels/#naming-conventions","title":"Naming conventions","text":"<p>Info</p> <p>Packages names follows the rule <code>{dist}-{version}(-{build})?-{python}-{abi}-{platform}.whl</code></p> <p>Where:</p> <ul> <li><code>dist</code> is the package name</li> <li><code>version</code> is the installed package version <code>X.Y.Z</code></li> <li><code>python</code> is the python tag, denoting the python implementation</li> <li><code>abi</code> is the ABI tag (Application Binary Interface)</li> <li><code>platform</code> is the platform tag, containing the operating system, the SDK and the instruction set of architectures</li> </ul> <p><code>Universal wheel</code> are often pure python packages that does not require a specific ABI or specific CPU architecture and support Python 2 and 3 versions. <code>Pure python wheels</code> support a specific major Python version.</p> <p>Universal Wheel</p> <p>In the following wheel name:</p> <pre><code>chardet-3.0.4-py2.py3-none-any.whl\n</code></pre> <p>The package is called <code>chardet</code> version <code>3.0.4</code>. It supports both python 2 and 3, does not require an Application Binary Interface and supports any platform.   It is a <code>universal wheel</code> since any Python version is supported.</p> <p>Pure Wheel</p> <p>In the following wheel name:</p> <pre><code>Jinja2-3.0.0a1-py3-none-any.whl\n</code></pre> <p>The package is called <code>Jinja2</code> version <code>3.0.0a1</code>. It only supports python 3, does not require an Application Binary Interface and supports any platform.   It is a <code>pure wheel</code> since only one Python version is supported.</p> <p>Platform Wheel: manylinux tag</p> <p>In the following wheel name:</p> <pre><code>pandas-1.0.3-cp37-cp37m-manylinux1_x86_64.whl\npandas-1.0.3-cp37-cp37m-manylinux1_i686.whl\n</code></pre> <p>The package is called <code>pandas</code> version <code>1.0.3</code>. It only supports C Python 3.7, require an Application Binary Interface (for linux distributions) and supports <code>x86-64</code> and <code>i686</code> architectures.   <code>manylinux</code> distributions use docker images to build sources for each linux distribution.    There are multiple variants: <code>manylinux1</code>, <code>manylinux2010</code>, <code>manylinux2024</code> supporting different linux distros.</p>"},{"location":"dev/languages/python/wheels/#pip-commands","title":"PIP Commands","text":""},{"location":"dev/languages/python/wheels/#install-only-using-source-distribution","title":"Install only using source distribution","text":"<p>To force the use of a source distribution, use the flag <code>python -m pip install --no-binary=:all: cryptography</code>. Using <code>:all:</code> will enable this feature for all the dependencies of the project.</p>"},{"location":"dev/languages/python/wheels/#install-only-using-the-binary-wheel-distribution","title":"Install only using the binary / wheel distribution","text":"<p>To force the use of the wheel distributions, use the flag <code>python -m pip install -only-binary=cryprography cryptography</code>. Using the package name will only force the use of a wheel for the <code>cryptography</code> package.</p>"},{"location":"dev/languages/python/wheels/#do-not-install-or-download-a-cached-version","title":"Do not install or download a cached version","text":"<p><code>pip download -no-cache numba</code> will download the version from the remote automatically.</p>"},{"location":"dev/languages/python/wheels/#building-a-pure-python-wheel","title":"Building a pure Python wheel","text":"<ol> <li>Make sure to have <code>setuptools</code> and <code>wheel</code> installed on a given python version</li> <li>Build a pure python wheel using <code>python setup.py sdist bdist_wheel</code>. It will create both a source distribution and a wheel distribution in the <code>dist</code> current directory.</li> </ol>"},{"location":"dev/languages/python/wheels/#building-a-platform-wheel","title":"Building a platform wheel","text":"<ol> <li>On mac OS, make sure to have command line dev tools available (<code>$ xcode-select --install</code>). On Windows, install the C++ build tools via Microsoft's website. On linux, make sure to have a compiler installed (gcc or g++).</li> <li>Clone the project and build it using <code>python setup.py bdist_wheel</code></li> <li>It compiles and builds</li> </ol>"},{"location":"dev/languages/python/wheels/#building-manylinux-wheel","title":"Building manylinux wheel","text":"<p>To make the built distribution valid across a range of Linux clients, build using manylinux tag.</p> <p>Two solutions here:</p> <ol> <li>Run docker and mound the drive containing the repo</li> <li>Use a CI/CD dev tool to build automatically the distribution</li> </ol> <p>Here are the steps for the docker build:</p> <ol> <li>Clone the project and cd into it</li> <li> <p>Define a few shell variables for the\u00a0<code>manylinux1</code>\u00a0Docker image</p> <pre><code>DOCKER_IMAGE='quay.io/pypa/manylinux1_x86_64'\nPLAT='manylinux1_x86_64'\n</code></pre> </li> <li> <p>Pull the Docker image and run the wheel-builder script within the container</p> <pre><code>docker pull \"$DOCKER_IMAGE\"\ndocker container run -t --rm \\\n      -e PLAT=$PLAT \\\n      -v \"$(pwd)\":/io \\\n      \"$DOCKER_IMAGE\" /io/travis/build-wheels.sh\n</code></pre> </li> </ol> <p>PyPA example repository on GitHub python-manylinux-demo</p>"},{"location":"dev/languages/python/wheels/#build-a-wheel-from-a-repository","title":"Build a wheel from a repository","text":"<ol> <li>Clone the repo</li> <li>Change directory to the root of the project</li> <li><code>python setup.py sdist bdist_wheel</code> (optionally specify where to place the distributions with the flag <code>--dist-dir</code> flag)</li> <li>Distributions will be inside the <code>dist</code> directory.</li> </ol> <p>Real life examples</p> <ol> <li><code>lxml</code>\u00a0uses a separate build script that\u2019s invoked from within the\u00a0<code>manylinux1</code>\u00a0Docker container.</li> <li><code>ultrajson</code>\u00a0does the same and uses GitHub Actions to call the build script.</li> </ol>"},{"location":"dev/languages/python/wheels/#integrate-a-wheel-inside-a-requirements-file","title":"Integrate a wheel inside a requirements file","text":"<p>Wheel files can be integrated inside the <code>requirements.txt</code>, that specifies the dependencies of the project as well as their versions. Simpy add a line, that points to the wheel in the repository.</p> <p>For instance:</p> requirements.txt<pre><code>spotfunk-1.7.2.3-py3-none-any.whl\npandas==2.2.0\npytest==8.0.2\nplotly~=5.20.0\nsetuptools~=72.1.0\nwheel~=0.44.0\n</code></pre> <ul> <li>The first line tells where the wheel is located in the project tree (here, at the root, aka. same level as the <code>requirements.txt</code> file).</li> <li>The next lines are classic requirements, specifying the versions of the packages</li> </ul> <p>Large (few Mb) wheel files may not be versioned to avoid plumbing git.</p>"},{"location":"dev/languages/python/wheels/#refs","title":"Refs","text":"<p>Refs</p> <ul> <li>Real Python</li> <li>Pythonwheels</li> </ul>"},{"location":"dev/languages/sql/sql/","title":"SQL","text":""},{"location":"dev/languages/sql/sql_examples/","title":"SQL Examples","text":"<pre><code>/*\n\nPrix des programmations inf\u00e9rieurs \u00e0 40 euros\n\n*/\n\nselect prix from programation where prix &lt; 40;\n\n\n\n/*\n\nArtistes qui ne font pas de la vari\u00e9t\u00e9 fran\u00e7aise\n\n*/\n\nselect dinstinc nom\n\nfrom artiste\n\nwhere artiste.genre &lt;&gt; \"Sc\u00e8ne Fran\u00e7aise\";\n\n\n\n/*\n\nConcerts du mois de Mars 2021\n\n*/\n\nselect *\n\nfrom concert\n\nwhere concert.date like \"2021-03%\";\n\n\n\nselect *\n\nfrom concert\n\nwhere concert.date between \"2021-03-01\" and \"2021-03-31\";\n\n\n\n/*\n\nLes artistes qui font du rap\n\n*/\n\nselect distinct artiste\n\nfrom artiste\n\nwhere artiste.genre = \"Rap\";\n\n\n\n/*\n\nLes concerts en Mars 2021 \u00e0 Paris\n\n*/\n\nselect *\n\nfrom concert\n\nwhere (\n\nconcert.date like \"2021-03%\"\n\nand\n\nconcert.ville = \"Paris\"\n\n);\n\n\n\n/*\n\nLes artistes qui font de la vari\u00e9t\u00e9 fran\u00e7aise\n\n*/\n\nselect distinct nom\n\nfrom artiste\n\nwhere artiste.genre = \"Vari\u00e9t\u00e9 fran\u00e7aise\" or artiste.genre = \"Sc\u00e8ne fran\u00e7aise\";\n\n\n\n/*\n\nInformations des concerts et de leurs artistes\n\n*/\n\nselect concert.id, artiste, date, nom, genre\n\nfrom artiste, concert\n\nwhere concert.artiste = artiste.id;\n\n\n\n/*\n\nTrouver le nombre de concerts\n\n*/\n\nselect count *\n\nfrom concert;\n\n\n\n/*\n\nNombre de styles diff\u00e9rents dans la table artiste\n\n*/\n\nselect distinct count genre\n\nfrom artiste;\n\n\n\n/*\n\nPrix moyen des concerts\n\n*/\n\nselect avg(prix)\n\nfrom concert;\n\n\n\n/*\n\nPrix moyen des concerts \u00e0 Paris\n\n*/\n\nselect avg(prix)\n\nfrom concert\n\nwhere concert.ville = \"Paris\";\n\n\n\n/*\n\nPrix total de tous les concerts\n\n*/\n\nselect sum(prix)\n\nfrom concert;\n\n\n\n/*\n\nConcert le moins / plus cher\n\n*/\n\nselect min(prix)\n\nfrom concert;\n\n\n\nselect max(prix)\n\nfrom concert;\n\n\n\n/*\n\nPrix moyen des concerts par artiste\n\n*/\n\nselect avg(prix)\n\nfrom concert\n\ngroup by artiste;\n\n\n\n/*\n\nPrix moyen des concerts par artiste inf\u00e9rieur \u00e0 50 euros\n\n*/\n\nselect avg(prix)\n\nfrom concert\n\ngroup by artist\n\nhaving avg(prix) &lt; 50;\n\n\n\n/*\n\nDate des concerts de vari\u00e9t\u00e9 fran\u00e7aise\n\n*/\n\nselect date\n\nfrom concert\n\nwhere artiste.id in (\n\nselect id from artiste where artiste.genre = \"Vari\u00e9t\u00e9 fran\u00e7aise\"\n\n);\n\n\n\n/*\n\nInformations de l'artiste qui donne un concert le 27 octobre 2022\n\n*/\n\nselect *\n\nfrom artiste\n\nwhere artiste.id = (\n\nselect artiste from concert where concert.date = \"2022-10-27\"\n\n);\n\n\n\n/*\n\nDate des concerts qui se passent apr\u00e8s ceux de Stasbourg\n\n*/\n\nselect date\n\nfrom concert\n\nwhere concert.date &gt; (\n\nselect max(date) from concert where concert.ville = \"Strasbourg\"\n\n);\n\n\n\n/*\n\nCr\u00e9er une table\n\n*/\n\ncreate table concert (\n\nID int not null,\n\nARTISTE nvarchar(30),\n\nDATE date,\n\nVILLE nvarchar(30),\n\nPAYS nvarchar(30),\n\nSALLE nvarchar(30),\n\nPRIX float CHECK (PRIX &gt; 0),\n\nPRIMARY KEY (ID)\n\nFOREIGN KEY(ARTISTE),\n\nREFERENCES ARTISTE(ID)\n\n);\n\n\n\ncreate table concert(\n\nID int not null,\n\nSECONDARY_KEY int not null,\n\nPRIMARY KEY(ID, SECONDARY_KEY)\n\n);\n\n\n\n/*\n\nSupprimer une table\n\n*/\n\ndrop table concert;\n\n\n\n/*\n\nRenommer une table\n\n*/\n\nrename artiste to musicians;\n\n\n\n/*\n\nModifier une table\n\n*/\n\nalter table concert add nb_place int;\n\n\n\n/*\n\nIns\u00e9rer des donn\u00e9es\n\n*/\n\ninsert into concert values (\n\n...\n\n);\n\n\n\n/*\n\n* td sql database requests\n\n*/\n\n\n\n/*\n\nA. Noms et tarifs des artistes qui joueront en France en 2023\n\n*/\n\nselect artiste.nom, programmation.prix\n\nfrom artiste, concert\n\nwhere concert.artiste = artiste.id and concert.pays = 'France'\n\nand (programmation.date between '2023-01-01' and '2023-31-12');\n\n\n\n/*\n\nB. Noms et genres des artistes ayant particip\u00e9 au paris paradis\n\n*/\n\nselect artiste.nom, artiste.genre\n\nfrom programmation innerjoin artiste\n\non programmation.artiste = artiste.id innerjoin festival on programmation.festival = festival.id\n\nwhere festival.nom = \"Paris Paradis\";\n\n\n\n/*\n\nC. Nom et genre des artistes qui jouent \u00e0 Strasbourg et \u00e0 Raptown\n\n*/\n\nselect distinct artiste.nom, artiste.genre\n\nfrom programmation\n\ninnerjoin artiste on programmation.artiste = artiste.id\n\ninnerjoin festival on programmation.festival = festival.id\n\ninnerjoin concert on concert.artiste = artiste.id\n\nwhere programmation.ville is \"Strasbourg\" or festival.nom is \"Raptown\";\n\n\n\nselect nom, genre from artiste\n\nwhere id in\n\n(select dinstinc artiste from concert where ville = \"Strasbourg\")\n\nand id in\n\n(select distinct artiste from programmation where festival =\n\n(select id from festival where nom = \"Raptown\"))\n\n\n\n/*\n\nD. Nom et genre des artistes qui participent \u00e0 la fois \u00e0 la Paris Paradis et \u00e0 Raptown\n\n*/\n\nselect artiste.nom, artiste.genre\n\nwhere artiste.id in\n\n(select distinct artiste from programmation innerjoin festival on programmation.festival = festival.id\n\nwhere festival.nom = \"Raptown\"\n\nand id in\n\n(select distinct artist from programmation innerjoin festival on programation.festival - festival.id\n\nwhere festival.nom = \"Paris Paradis\"));\n\n\n\nselect artiste.nom, artiste.genre\n\nwhere artiste.id in\n\n(select distinct artiste from programmation where festival in\n\n(select festival.id from festival where festival.nom = \"Paris Paradis\" and festival.nom = \"Raptown\"))\n\n\n\n/*\n\nE. Nom des artistes dont le total des prix est sup\u00e9rieur \u00e0 100 euros\n\n*/\n\nselect artise.nom, artiste.genre\n\nfrom artiste innerjoin concert on concert.artiste = artiste.id\n\ngroup by artiste\n\nhaving sum(concert.prix) &gt; 100;\n\n\n\n/*\n\nF. Noms des artistes qui jouent \u00e0 Paris mais pas \u00e0 Strasbourg\n\n*/\n\nselect nom from artiste.Nom\n\nwhere artiste.id in (\n\n(select distinct artiste.id from concert where concert.ville = \"Paris\")\n\nand artiste.id not in\n\n(select distinct artiste.id from concert where concert.ville = \"Strasbourg\"));\n\n\n\n/*\n\nG. Nom des couples d'artistes dont le prix des concerts est toujours sup\u00e9rieur au prix des concerts du second\n\n*/\n\nselect first_table.nom as first, second_table.nom as second\n\nfrom artiste first_table, artiste second_table\n\nwhere (\n\n(select min(prix) from concert where artise = first.id)\n\n&gt;\n\n(select min(prix) from concert where artise = second.id)\n\n);\n\n\n\n/*\n\nH. Noms des artistes ayant particip\u00e9 \u00e0 tous les festivals\n\n*/\n\nselect artiste.nom as my_artiste\n\nfrom artiste\n\nwhere (\n\nselect count (distinct festival) from programation\n\ninnerjoin artist on artist.id = programation.artiste\n\nwhere artiste.nom = my_artiste)\n\n) = (select count (*) from festival);\n\n\n\n/*\n\nI. Nombre d'artiste ayant particip\u00e9 au Paris Paradise\n\n*/\n\nselect count (distinct artiste)\n\nfrom programation\n\nwhere programmation.festival = \"Paris Paradise\";\n\n\n\n/*\n\nJ. Moyenne des prix des concerts par ann\u00e9e\n\n*/\n\nselect datepart(yyyy, date), avg(prix) from concert group by datepart(yyyy, date);\n\n\n\n/*\n\nK. Ins\u00e9rer le tuple &lt;7, 1, \"2023-03-17\", \"Dijon\", \"France\", \"Zenith\", 41.8&gt;\n\n*/\n\ninsert into concert values (7, 1, \"2023-03-17\", \"Dijon\", \"France\", \"Zenith\", 41.8);\n\n\n\n/*\n\nL. Changer le prix du concert 2 pour 15 euros\n\n*/\n\nupdate concert set prix = 15 where id = 2;\n\n\n\n/*\n\nM. Supprimer les concerts o\u00f9 le prix est inf\u00e9rieur \u00e0 30 euros\n\n*/\n\ndelete * from concert where prix &lt; 30;\n</code></pre>"},{"location":"dev/os/linux_file_system/","title":"Linux File System","text":""},{"location":"dev/software_architecture/authentication_mechanisms/","title":"Authentication Mechanisms","text":""},{"location":"dev/software_architecture/authentication_mechanisms/#ssh-keys","title":"SSH Keys","text":"<p>SSH (Secure Shell) is a network protocol used to securely connect to remote machines over an unsecured network. It encrypts the connection and provides various mechanisms for authentication and data transfer.</p> <p></p>"},{"location":"dev/software_architecture/authentication_mechanisms/#oauth-tokens","title":"OAuth Tokens","text":"<p>Tokens that provide limited access to user data on third-party applications</p>"},{"location":"dev/software_architecture/authentication_mechanisms/#ssl-certificates","title":"SSL Certificates","text":"<p>Digital certificates ensure secure and encrypted communication between servers and clients</p>"},{"location":"dev/software_architecture/authentication_mechanisms/#credentials","title":"Credentials","text":"<p>User authentication information is used to verify and grant access to various systems and services</p>"},{"location":"dev/software_architecture/authentication_mechanisms/#encoding-vs-encryption-vs-tokenization","title":"Encoding vs Encryption vs Tokenization","text":"<p>ByteByteGo.com</p> <ul> <li> <p>Encoding</p> <p>Encoding converts data into a different format using a scheme that can be easily reversed. Examples include Base64 encoding, which encodes binary data into ASCII characters, making it easier to transmit data over media that are designed to deal with textual data.</p> <p>Encoding is not meant for securing data. The encoded data can be easily decoded using the same scheme without the need for a key.</p> </li> <li> <p>Encryption</p> <p>Encryption involves complex algorithms that use keys for transforming data. Encryption can be symmetric (using the same key for encryption and decryption) or asymmetric (using a public key for encryption and a private key for decryption).</p> <p>Encryption is designed to protect data confidentiality by transforming readable data (plaintext) into an unreadable format (ciphertext) using an algorithm and a secret key. Only those with the correct key can decrypt and access the original data.</p> </li> <li> <p>Tokenization</p> <p>Tokenization is the process of substituting sensitive data with non-sensitive placeholders called tokens. The mapping between the original data and the token is stored securely in a token vault. These tokens can be used in various systems and processes without exposing the original data, reducing the risk of data breaches.</p> <p>Tokenization is often used for protecting credit card information, personal identification numbers, and other sensitive data. Tokenization is highly secure, as the tokens do not contain any part of the original data and thus cannot be reverse-engineered to reveal the original data. It is particularly useful for compliance with regulations like PCI DSS (Payment Card Industry Data Security Standard).</p> </li> </ul>"},{"location":"dev/software_architecture/design_patterns/","title":"Design Patterns","text":"<p>Ressources</p> <ul> <li>Refactoring &amp; Designs patterns</li> </ul> <p>ByteByteGo.com: Advantages of using design patterns</p> <p>Some key benefits of knowing about architectural patterns are as follows:</p> <ul> <li> <p>Increased productivity: Instead of reinventing the wheel for each project, architects can rely on established patterns to guide design decisions while saving time and effort. The productivity increase allows teams to focus on the unique aspects of their projects rather than reinventing solutions for recurring issues.</p> </li> <li> <p>Improved code quality: By following standard patterns, developers can produce higher-quality code that is more maintainable, scalable, and easier to understand.</p> </li> <li> <p>Better communication: Patterns provide a common language and vocabulary making it easy to discuss and communicate design decisions.</p> </li> <li> <p>Faster development cycles: With the help of established patterns, development teams can accelerate their development cycles.</p> </li> </ul>"},{"location":"dev/software_architecture/software_architecture/","title":"Software Architecture","text":""},{"location":"dev/software_architecture/software_architecture/#a-quick-overview","title":"A quick overview","text":""},{"location":"dev/software_architecture/software_architecture/#introduction-to-software-architecture","title":"Introduction to software architecture","text":"<p>The objectives of software design is to make the code:</p> <ul> <li>Flexible</li> <li>Reusable</li> <li>Maintainable</li> </ul> <p>What is the difference between software design and software architecture? It depends on the size of the company: both roles can be merged sometimes. Some say that it is the same problem at a different scale.</p> <p>Required skills:</p> <ul> <li>Problem understanding through:<ul> <li>Technical expertise (keep reading)</li> <li>Communication (with engineer, clients, developer, etc...)</li> </ul> </li> <li>Project planning</li> <li>Forward problem solution</li> <li>Creativity</li> </ul> <p>Design and architecture is important if you want to have a stable, long- lived system. Anybody can build a system that'll last a week or a month or a year,\u00a0but if you want to build something that is the basis of\u00a0other people's work and contribution over potentially a period of years or longer,\u00a0in some cases, you need to put some thought into it.\u00a0You need to have somebody whose job it is to look out for the long game and\u00a0make sure that you are not making suboptimal short term decisions.</p> <p>For small designs, it is just some brainstorming on a whiteboard. For larger projects, you want to write some fairly substantial documents where you explore the different use cases, flow variations and all the critical functional and nonfunctional requirements, stability, maintainability, etc...</p> <p>Some basic rules for software architects:</p> <ul> <li>Keep it simple:<ul> <li>If its simple, you have pretty good change to get it right.</li> <li>If its simple, you have easy knowledge transfer.</li> </ul> </li> <li>Work with people that are better than you are.</li> <li>Keep learning from your mistakes.</li> </ul>"},{"location":"dev/software_architecture/software_architecture/#software-design","title":"Software design","text":"<p>The software designer role would be responsible for outlining a software solution to a specific problem by designing the details of individual components and their responsibilities (lower level).</p> <p>Software design is the process of turning\u00a0the wishes and requirements of a customer into\u00a0working code that is stable and maintainable in the long run, and can be evolved and can become part of a larger system.</p>"},{"location":"dev/software_architecture/software_architecture/#software-architecture_1","title":"Software architecture","text":"<p>A software architect role would be responsible for looking at the entire system and choosing appropriate frameworks,data storage, solutions and determining how components interact with each other (higher level).</p> <p>A software architect's job is to be the interface between the product and the customer and the engineering teams. And so for instance,\u00a0customers will express a requirement or a need hey have of the,\u00a0of the software and it's the architect's job to\u00a0then work with the customers and their representatives,\u00a0product managers and such,\u00a0to come up with the technical requirements of how we're going to solve the problem.</p>"},{"location":"dev/software_architecture/software_architecture/#objected-oriented-thinking","title":"Objected-Oriented thinking","text":"<p>Object oriented programming is based on the real world objects. Each object has its own properties, roles, self awareness, etc... Being capable of representing such entities in a codebase helps with clarity and flexibility.</p>"},{"location":"dev/software_architecture/software_architecture/#design-in-the-software-process","title":"Design in the software process","text":""},{"location":"dev/software_architecture/software_architecture/#software-requirements-conceptual-and-technical-designs","title":"Software requirements, conceptual and technical designs","text":"<p>Software design is an iterative process:</p> <ul> <li>Product backlog</li> <li>Sprint backlog</li> <li>Sprints (iterations)</li> <li>Potential product increment</li> </ul> <p>The most common cause of software development failure is poor design.</p> <p>Going straight into coding is bad...</p> <p>Designing a software is like going from high to low granularity: start large and approximative and get more precise.</p>"},{"location":"dev/software_architecture/software_architecture/#clarify-the-requirements","title":"Clarify the requirements","text":"<p>Clarify deeply the requirements for the project by asking questions, and reformulating the needs with the end user.</p>"},{"location":"dev/software_architecture/software_architecture/#build-a-conceptual-design","title":"Build a conceptual design","text":"<p>Conceptual design (sketch)</p> <ol> <li>Find each component (search page, search input, search button)</li> <li>Find connections (detailed specifications)</li> <li>Find responsibilities (search functionality)</li> </ol> <p>During this stage, the topics will be:</p> <ul> <li>requirements</li> <li>mock-ups</li> <li>trade-offs</li> </ul> <p>CRC cards are useful in this step ([[#Class responsibility collaborator (CRC)]]).</p>"},{"location":"dev/software_architecture/software_architecture/#build-a-technical-design","title":"Build a technical design","text":"<p>Technical design (describes how these responsibilities are met): UML</p> <ol> <li>Specify technical details of each component (split components in small enough pieces)</li> <li>Use technical descriptions for each component</li> <li>Describe how components work together</li> </ol> <p>UML class diagrams are useful in this step (see [[#Expressing designs structures in java &amp; UML class diagrams]])</p>"},{"location":"dev/software_architecture/software_architecture/#expressing-requirements-through-user-stories","title":"Expressing requirements through user stories","text":"<p>Once requirements are found, they can be expressed as a user story. User stories are one of many techniques to express some requirements for a software system. The goal is to formulate them using natural language.</p> <p>As a ... , i want to ... so that ...</p> <p>After having formulated the user story, apply object oriented thinking to identify further requirements. While nouns identify the objects, verbs highlight their responsibilities and connection.</p>"},{"location":"dev/software_architecture/software_architecture/#categories-of-objects-in-designs","title":"Categories of objects in designs","text":"<p>By breaking down big objects into smaller ones, some categories of objects will appear. There are three categories:</p> <ol> <li>Entity objects (the first ones to be identified, corresponds to real world objects like a chair)</li> <li>Boundary objects (any object dealing with another system like a user, external software, internet)</li> <li>Control objects (coordinates the other objects)</li> </ol>"},{"location":"dev/software_architecture/software_architecture/#design-for-quality-attributes-competing-qualities-and-trade-offs","title":"Design for quality attributes - competing qualities and trade-offs","text":"<p>Competing qualities influence software architecture:</p> <ul> <li>Usability</li> <li>Performance</li> <li>Scalability</li> <li>Security</li> <li>Code quality</li> </ul> <p>Architecture is about producing the best quality software given with constraints. Its often quality vs time to market.</p> <ul> <li>What is good enough?</li> <li>What are the trad-offs?</li> </ul> <p>Examples of trade-offs:</p> <ul> <li>Performance code is often less modular and maintainable</li> <li>Secure code has often low performance</li> </ul>"},{"location":"dev/software_architecture/software_architecture/#functional-requirements","title":"Functional requirements","text":"<p>It's about identifying what the system is expected to do.</p>"},{"location":"dev/software_architecture/software_architecture/#non-functional-requirements","title":"Non-functional requirements","text":"<p>Describes how well the system does what it is supposed to do:</p> <ul> <li>performance</li> <li>security</li> <li>availability</li> </ul>"},{"location":"dev/software_architecture/software_architecture/#class-responsibility-collaborator-crc","title":"Class responsibility collaborator (CRC)","text":"<p>CRC cards stands for Class, Responsibility and Collaborator (aka. Components, Connections and Responsibilities). This is a way of representing high level structure ([[#Build a conceptual design]]). It is useful to record, organize and refine the components of the system.</p> <p></p> <p>Example using a bank system:</p> <ul> <li>The bank customer is the class name</li> <li>The responsibilities are:<ul> <li>Inserting bank card</li> <li>Choosing operations</li> </ul> </li> <li> <p>The collaborators:</p> <ul> <li>The bank machine</li> </ul> </li> <li> <p>The bank machine is the class name</p> </li> <li>Its responsibilities are:<ul> <li>Authenticating customers</li> <li>Displaying task options</li> <li>Deposit and withdraw of money</li> <li>Check account balances</li> </ul> </li> <li>Its collaborators are:<ul> <li>Bank customer</li> </ul> </li> </ul>"},{"location":"dev/software_architecture/software_architecture/#creating-models-in-designs","title":"Creating Models in designs","text":"<p>Models are helpful to make a step back and analyze complex situations. In software design, this can be done through UML diagrams (Unified Modelling Language).</p>"},{"location":"dev/software_architecture/software_architecture/#language-evolution","title":"Language evolution","text":"<p>Languages started with COBOL and Fortran using the imperative paradigm. Then, procedural paradigm was developed, adding the support for abstract data types (user defined types). Objected oriented paradigm appeared later in the 1980s, using abstract data types using inheritance (cf. C++, C#, Java, etc...).</p> <p>Object oriented approach is not always the best approach for a piece of software.</p>"},{"location":"dev/software_architecture/software_architecture/#four-design-principles","title":"Four design principles","text":""},{"location":"dev/software_architecture/software_architecture/#abstraction","title":"Abstraction","text":"<p>Abstraction is the idea of simplifying a concept, hiding the details from the user (like in a class for instance).</p> <p>Abstractions have:</p> <ul> <li>attributes describing properties of the object</li> <li>responsibilities describing the behaviors of the object</li> </ul>"},{"location":"dev/software_architecture/software_architecture/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation is about bundling objects, exposing some data and restricting access to some fields.</p> <p>An interface can be provided through methods and their associated restriction. This concept is often referred to as black box thinking.</p>"},{"location":"dev/software_architecture/software_architecture/#decomposition","title":"Decomposition","text":"<p>Decomposition is about breaking a complex problem into pieces that are simpler to understand and solve.</p> <p>The number of pieces can be fixed or dynamic depending on the problem. Decomposed pieces can have varying lifetimes.</p> <p>For instance, a car have a fixed number of motor, wheels, etc... and a dynamic number of passengers. It has a frame lasting the whole life of the car and tires that can be replaced when worn out.</p>"},{"location":"dev/software_architecture/software_architecture/#generalization","title":"Generalization","text":"<p>Generalization helps reduce redundancy in a system by sharing the same common parts.</p> <p>Can be achieved using inheritance, templates, etc...</p> <p>The DRY rule: Don't repeat yourself !</p>"},{"location":"dev/software_architecture/software_architecture/#expressing-designs-structures-in-java-uml-class-diagrams","title":"Expressing designs structures in java &amp; UML class diagrams","text":""},{"location":"dev/software_architecture/software_architecture/#abstraction-in-java-and-uml","title":"Abstraction in Java and UML","text":"<p>Properties turn into variables and operations into members.</p> <p></p> <p>Translates into (without considering the exposition):</p> <pre><code>public class Food {\n    public String greceryID;\n    public String name;\n    public String manufacturer;\n    public String expiryDate;\n    public double price;\n\n    public bool isOnSale();\n}\n</code></pre>"},{"location":"dev/software_architecture/software_architecture/#encapsulation-in-java-and-uml","title":"Encapsulation in java and UML","text":"<p>To make the code clearer, some fields can be hided from the user. This can be done by using the <code>private</code> specifier and implementing getter and setter methods depending on the situation.</p>"},{"location":"dev/software_architecture/software_architecture/#decomposition-in-java-and-uml","title":"Decomposition in Java and UML","text":"<p>Decomposition is about taking a whole and dividing it up into different parts.</p> <p>There are 3 relationships involved in decomposition:</p> <ul> <li>Association</li> <li>Aggregation</li> <li>Composition</li> </ul> <p></p>"},{"location":"dev/software_architecture/software_architecture/#association","title":"Association","text":"<p>Objects may interact with other for some time.</p> <p>Its a loose relationship.</p> <p>For instance: a person can interact with a plane. Neither owns the other.</p>"},{"location":"dev/software_architecture/software_architecture/#aggregation","title":"Aggregation","text":"<p>Aggregation is a \"Has a...\" relationship. One object owns another but both can exist without another.</p> <p>This is a tighter coupling than association.</p>"},{"location":"dev/software_architecture/software_architecture/#composition","title":"Composition","text":"<p>Composition is a tight coupling relationship where an object owns another an cannot exist without the other.</p>"},{"location":"dev/software_architecture/software_architecture/#generalization-in-java-and-uml","title":"Generalization in Java and UML","text":"<ul> <li>Classes can implement one or\u00a0more interface at a time which allows them to have multiple types.\u00a0</li> <li>Interfaces enable you to describe behaviors without the need to\u00a0implement them, which allows you to reuse these abstractions.</li> </ul>"},{"location":"dev/software_architecture/software_architecture/#using-inheritance","title":"Using inheritance","text":""},{"location":"dev/software_architecture/software_architecture/#implementation-inheritance","title":"Implementation inheritance","text":"<p>Inheritance is a way of abstracting objects into super-classes and sub-classes, reducing the code redundancy.</p> <p>Super-class can define some default behaviors that will be the one of every sub-class re-implementing it. It will also share the desired attributes.</p> <p>Implementation inheritance use only one super-class.</p>"},{"location":"dev/software_architecture/software_architecture/#multiple-inheritance","title":"Multiple inheritance","text":"<p>Multiple inheritance is when a sub-class has two or more super-classes.</p>"},{"location":"dev/software_architecture/software_architecture/#using-interfaces","title":"Using Interfaces","text":"<p>An interface only declares method signatures, no constructor, attribute or method bodies.</p> <p>It specifies the behaviors expected for an object. It is also a way to sub-type objects.</p>"},{"location":"dev/software_architecture/software_architecture/#design-principles","title":"Design principles","text":""},{"location":"dev/software_architecture/software_architecture/#coupling-and-cohesion","title":"Coupling and cohesion","text":"<p>Average people can only keep 7 informations in short term memory: keep modules simple and straight forward as much as possible.</p> <p>The metrics to use to evaluate a design complexity are:</p> <ul> <li>Coupling</li> <li>Cohesion</li> </ul> <p>Coupling and cohesion are a trade-off.</p>"},{"location":"dev/software_architecture/software_architecture/#coupling","title":"Coupling","text":"<p>Coupling focuses on complexity between a module and other modules. An analogy is:</p> <ul> <li>Lego allows for loose coupling: any lego can be bound to others</li> <li>Puzzle pieces allow for tight coupling: a piece can only be bound to one other, there is not much possibility here</li> </ul> <p>When evaluating the complexity of a design, consider:</p> <ul> <li>Degree (the number of connections between a module and others: the smaller the better)</li> <li>Ease (how obvious the connections are)</li> <li>Flexibility (how interchangeable the modules are)</li> </ul>"},{"location":"dev/software_architecture/software_architecture/#cohesion","title":"Cohesion","text":"<p>Cohesion focuses on the clarity and complexity within a module.</p> <ul> <li>A lego has high cohesion since it has only one task: fit with another brick</li> <li>A puzzle piece has low cohesion since its role is unclear and depend on its position</li> </ul>"},{"location":"dev/software_architecture/software_architecture/#separation-of-concerns","title":"Separation of concerns","text":"<p>A large problem with a lot of concerns can be divided into smaller parts, using separation of concerns: the code needs it to stay organized. It can be achieved through [[#Four design principles]]: [[#Abstraction]], [[#Encapsulation]], [[#Decomposition]] and [[#Generalization]].</p> <p>For instance, a dog can be analyzed by its behavior. It eats, but not alone and needs an owner for this. Therefore, concern of getting food is separated from the dog and given to the owner. Another example is the smartphone class. A smartphone have a camera and therefore we can create a separate class for the camera. This camera object will then be composed with the smartphone class.</p>"},{"location":"dev/software_architecture/software_architecture/#information-hiding","title":"Information hiding","text":"<p>Information hiding allows other developers to work with a codebase without knowing the implementation details of the modules. This concept is often associated / achieved through the [[#Encapsulation]] principle. It is a way to enforce a good use of an API.</p> <p>For instance, in [[Java]], there are multiple ways to enforce [[#Encapsulation]]:</p> <ul> <li>public methods</li> <li>protected methods</li> <li>default access modifier</li> <li>private methods</li> </ul>"},{"location":"dev/software_architecture/software_architecture/#conceptual-integrity","title":"Conceptual integrity","text":"<p>Conceptual integrity (=consistency) is about creating a consistent or bullet-proof software, letting multiple users connect at once for instance.</p> <p>The following behaviors can help achieve the conceptual integrity:</p> <ul> <li>AGILE development</li> <li>coding conventions (naming conventions for example)</li> <li>code reviews (systematic examination of written code)</li> <li>Defining types through interfaces used in the code base (enforces the use of internal types and therefore the consistency)</li> <li>Restrict the group reviewing commits to the software to the minimum</li> </ul>"},{"location":"dev/software_architecture/software_architecture/#generalization-principles","title":"Generalization principles","text":""},{"location":"dev/software_architecture/software_architecture/#inheritance-issues","title":"Inheritance issues","text":"<p>As previously said, [[#Using inheritance]] is about answering the following questions:</p> <ul> <li>What attributes and behaviors do you need to model in a class through abstraction?</li> <li>How are these attributes and behaviors grouped together and\u00a0accessed through encapsulation?</li> <li>Can my classes be simplified into smaller parts using decomposition?</li> <li>Are there common things across my objects that can be generalized?</li> </ul> <p>How to know when we misuse inheritance in POO?</p> <ul> <li>When objects are really close from each other: Pizza and Pepperoni differ only in their content...</li> <li>Breaking the Liskov substitution principle: overriding some core base-class functionalities for instance...</li> </ul> <p>Liskov substitution principle</p> <p>States that a subclass can replace a super-class if and only if the subclass does not change the functionality of the super-class.</p>"},{"location":"dev/software_architecture/software_architecture/#modelling-behavior","title":"Modelling behavior","text":""},{"location":"dev/software_architecture/software_architecture/#uml-sequence-diagram","title":"UML sequence diagram","text":"<p>Sequence Diagrams are used to show your team how objects in your program interact with each other to complete tasks. This is a map of the conversations between the involved classes.</p> <p></p> <p></p>"},{"location":"dev/software_architecture/software_architecture/#uml-state-diagrams","title":"UML state diagrams","text":"<p>A UML state diagram describes how your system acts or behaves by showing states of the system as events occur. Think of a car: when it is in reverse, it can only achieve some specific actions, like parking. State diagrams helps finding bugs and stepping back from the source code.</p> <p>An activity describes the behavior of an object when in a certain state. There are 3 types of activities:</p> <ol> <li>Entry: actions occurring when the state is just entered from another state</li> <li>Exit: actions occurring when the state is exited</li> <li>Do: actions occurring only once or multiple times while an object is in a certain state</li> </ol> <p>Terminations represents an object being destroyed, or a process being complete, like returning the credit card at the bank machine.</p> <p></p> <p></p>"},{"location":"dev/software_architecture/software_architecture/#model-checking","title":"Model checking","text":"<p>How to make sure that the created model works? Model checking is a systematic check technique of system's state in all its possible variants. It happens after the code has been written and before deployment. Modelling the behavior of the software before is very important since a broken model lead to misbehavior of the model checking tool.</p> <p>One issue with model checking is the state's space explosion. A large code cannot be analyzed by a model checker since the possibilities are just too numerous. Selecting small parts of the code will help solving this issue.</p> <p>It can be achieved through a model checking software. It detects if there are violations, called deadlocks.</p> <p>There are 3 different phases to performing model checking:</p> <ol> <li>Modelling phase: sanity checks</li> <li>Running phase: running the model checker</li> <li>Analysis phase: check if the desired properties are satisfied, determining potential counter-examples</li> </ol>"},{"location":"dev/software_architecture/unified_modelling_language/","title":"Unified Modeling Language (UML)","text":""},{"location":"dev/tools/amazon_aws/","title":"Amazon AWS","text":""},{"location":"dev/tools/brew/","title":"Brew","text":"<p>Homebrew is a package manager for macOS, like vcpkg.</p> <p>It uses git and ruby.</p>"},{"location":"dev/tools/brew/#useful-links","title":"Useful links","text":"<ul> <li>Official website</li> <li>Github repository</li> </ul>"},{"location":"dev/tools/brew/#installation","title":"Installation","text":"<ul> <li>In bash, type:</li> </ul> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Installation location: homebrew installs packages into the <code>/user/local</code> folder.</p>"},{"location":"dev/tools/curl/","title":"Curl","text":"<p><code>curl</code> is a versatile command-line tool used to transfer data to or from a server.</p> <p>It supports various protocols, such as HTTP, HTTPS, FTP, and more.</p>"},{"location":"dev/tools/curl/#basic-usage","title":"Basic Usage","text":""},{"location":"dev/tools/curl/#get-a-urls-content","title":"Get a URL's Content","text":"<pre><code>curl https://example.com\n</code></pre> <p>This fetches the HTML content of the page at the specified URL and prints it to the terminal.</p> <p>Note</p> <p>This command outputs the response directly to the terminal. Use the <code>-o</code> or <code>-O</code> options to save it to a file.</p>"},{"location":"dev/tools/curl/#download-a-file","title":"Download a File","text":"<pre><code>curl -O https://example.com/file.txt\n</code></pre> <p>The <code>-O</code> option saves the file with its original name.</p>"},{"location":"dev/tools/curl/#save-to-a-specific-file","title":"Save to a Specific File","text":"<pre><code>curl -o myfile.txt https://example.com/file.txt\n</code></pre> <p>The <code>-o</code> option lets you specify the name for the saved file.</p>"},{"location":"dev/tools/curl/#sending-data","title":"Sending Data","text":""},{"location":"dev/tools/curl/#send-a-get-request-with-parameters","title":"Send a GET Request with Parameters","text":"<pre><code>curl \"https://example.com?key1=value1&amp;key2=value2\"\n</code></pre> <p>Info</p> <p>URL parameters are included directly in the query string.</p>"},{"location":"dev/tools/curl/#send-a-post-request","title":"Send a POST Request","text":"<pre><code>curl -X POST -d \"key1=value1&amp;key2=value2\" https://example.com\n</code></pre> <ul> <li><code>-X POST</code>: Specifies the HTTP method.</li> <li><code>-d</code>: Sends data in the body of the request.</li> </ul> <p>Warning</p> <p>Be cautious when sending sensitive data in plain text. Use HTTPS to secure your request.</p>"},{"location":"dev/tools/curl/#send-json-data","title":"Send JSON Data","text":"<pre><code>curl -X POST -H \"Content-Type: application/json\" -d '{\"key1\":\"value1\"}' https://example.com\n</code></pre> <ul> <li><code>-H</code>: Adds headers to the request.</li> </ul> <p>Warning</p> <p>Many APIs require JSON data. Ensure the <code>Content-Type</code> header is set appropriately.</p>"},{"location":"dev/tools/curl/#authentication","title":"Authentication","text":""},{"location":"dev/tools/curl/#basic-authentication","title":"Basic Authentication","text":"<pre><code>curl -u username:password https://example.com\n</code></pre> <ul> <li><code>-u</code>: Adds a username and password.</li> </ul> <p>Danger</p> <p>Avoid including sensitive credentials directly in the command, as they may be stored in shell history. Use environment variables for better security.</p>"},{"location":"dev/tools/curl/#bearer-token-authentication","title":"Bearer Token Authentication","text":"<pre><code>curl -H \"Authorization: Bearer your_token\" https://example.com\n</code></pre>"},{"location":"dev/tools/curl/#headers-and-responses","title":"Headers and Responses","text":""},{"location":"dev/tools/curl/#include-response-headers","title":"Include Response Headers","text":"<pre><code>curl -i https://example.com\n</code></pre>"},{"location":"dev/tools/curl/#custom-request-headers","title":"Custom Request Headers","text":"<pre><code>curl -H \"Custom-Header: Value\" https://example.com\n</code></pre> <p>Example</p> <p>Custom headers can be useful for testing APIs or adding metadata to your requests.</p>"},{"location":"dev/tools/curl/#advanced-features","title":"Advanced Features","text":""},{"location":"dev/tools/curl/#follow-redirects","title":"Follow Redirects","text":"<pre><code>curl -L https://example.com\n</code></pre> <p>Note</p> <p>Use the <code>-L</code> option to handle HTTP redirects automatically.</p>"},{"location":"dev/tools/curl/#limit-the-rate-of-data-transfer","title":"Limit the Rate of Data Transfer","text":"<pre><code>curl --limit-rate 100k https://example.com/file.txt\n</code></pre> <p>Info</p> <p>This is helpful for testing bandwidth limits or ensuring your server isn't overloaded.</p>"},{"location":"dev/tools/curl/#upload-a-file","title":"Upload a File","text":"<pre><code>curl -T myfile.txt https://example.com/upload\n</code></pre> <p>Example</p> <p>Some servers may require authentication or specific headers for file uploads.</p>"},{"location":"dev/tools/curl/#save-cookies","title":"Save Cookies","text":"<pre><code>curl -c cookies.txt https://example.com\n</code></pre>"},{"location":"dev/tools/curl/#use-cookies","title":"Use Cookies","text":"<pre><code>curl -b cookies.txt https://example.com\n</code></pre> <p>Tip</p> <p>Saved cookies are often required to maintain sessions with websites.</p>"},{"location":"dev/tools/curl/#debugging","title":"Debugging","text":""},{"location":"dev/tools/curl/#verbose-mode","title":"Verbose Mode","text":"<pre><code>curl -v https://example.com\n</code></pre> <p>Info</p> <p>Use verbose mode to see detailed information about the request and response, including headers and connection details.</p>"},{"location":"dev/tools/curl/#show-only-response-code","title":"Show Only Response Code","text":"<pre><code>curl -o /dev/null -s -w \"%{http_code}\\n\" https://example.com\n</code></pre> <p>Note</p> <p>This is useful for monitoring server responses or scripting health checks.</p>"},{"location":"dev/tools/curl/#helpful-tips","title":"Helpful Tips","text":"<ul> <li>Use <code>man curl</code> for the official manual.</li> <li>Add <code>--help</code> to see a list of options:   <pre><code>curl --help\n</code></pre></li> </ul>"},{"location":"dev/tools/docker-compose/","title":"Docker-Compose","text":"<p>Overview</p> <p>Docker Compose is a tool for defining and managing multi-container Docker applications. It allows developers to use a YAML file to define the services, networks, and volumes needed to run an application, simplifying the management and orchestration of containers.</p>"},{"location":"dev/tools/docker-compose/#features","title":"Features","text":"<ol> <li>Multi-Container Management: Easily define and run applications with multiple containers.  </li> <li>YAML Configuration: Use <code>docker-compose.yml</code> to declaratively define services, networks, and volumes.  </li> <li>Dependency Management: Control service startup order using <code>depends_on</code>.  </li> <li>Networking: Automatically creates networks for inter-service communication.  </li> <li>Environment Variables: Support for <code>.env</code> files to configure environment-specific settings.  </li> <li>Shared Volumes: Persist data and enable data sharing between containers.  </li> <li>Scaling: Scale services horizontally using the <code>--scale</code> flag.  </li> <li>Simplified Commands: Manage containers with commands like <code>up</code>, <code>down</code>, <code>logs</code>, etc.  </li> <li>Local Development: Replicate production-like environments for local development.  </li> <li>Portability: Share and reuse configurations for testing or deployment.</li> </ol>"},{"location":"dev/tools/docker-compose/#usage","title":"Usage","text":"<pre><code>Usage:  docker compose [OPTIONS] COMMAND\n\nDefine and run multi-container applications with Docker.\n\nOptions:\n  --all-resources              Include all resources, even those not used by services\n  --ansi string                Control when to print ANSI control characters (\"never\"|\"always\"|\"auto\") (default \"auto\")\n  --compatibility              Run Compose in backward compatibility mode\n  --dry-run                    Execute command in dry-run mode\n  --env-file stringArray       Specify an alternate environment file\n  -f, --file stringArray       Compose configuration files\n  --parallel int               Control max parallelism, -1 for unlimited (default -1)\n  --profile stringArray        Specify a profile to enable\n  --progress string            Set type of progress output (auto, tty, plain, json, quiet) (default \"auto\")\n  --project-directory string   Specify an alternate working directory (default: the path of the first Compose file)\n  -p, --project-name string    Project name\n\nCommands:\n  attach      Attach to a service's running container\n  build       Build or rebuild services\n  config      Parse, resolve, and render the Compose file\n  cp          Copy files between a service container and the local filesystem\n  create      Create containers for a service\n  down        Stop and remove containers, networks, etc.\n  events      Receive real-time events from containers\n  exec        Execute commands in running containers\n  images      List images used by services\n  kill        Force stop service containers\n  logs        View container logs\n  ls          List running Compose projects\n  pause       Pause services\n  port        Show container port mappings\n  ps          List containers\n  pull        Pull service images\n  push        Push service images\n  restart     Restart service containers\n  rm          Remove stopped service containers\n  run         Run a one-off command\n  scale       Scale services\n  start       Start services\n  stats       Display live resource usage statistics\n  stop        Stop services\n  top         Display running processes\n  unpause     Unpause services\n  up          Create and start containers\n  version     Show Docker Compose version information\n  wait        Wait for service containers to stop\n  watch       Monitor and rebuild containers on file changes\n\nRun 'docker compose COMMAND --help' for detailed usage information.\n</code></pre>"},{"location":"dev/tools/docker-compose/#docker-compose-basics","title":"Docker-Compose Basics","text":""},{"location":"dev/tools/docker-compose/#launch-docker-compose","title":"Launch Docker-Compose","text":""},{"location":"dev/tools/docker-compose/#for-the-first-time","title":"For the First Time","text":"<p>Run the following command in the directory containing the <code>docker-compose.yml</code> file:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"dev/tools/docker-compose/#subsequent-runs","title":"Subsequent Runs","text":"<pre><code>docker-compose start\n</code></pre> <ul> <li>Add <code>-d</code> to run Docker Compose in detached mode:</li> </ul> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"dev/tools/docker-compose/#show-logs","title":"Show Logs","text":"<p>To view logs in detached mode:</p> <pre><code>docker-compose logs\n</code></pre> <p>Exit with <code>Ctrl+C</code> (does not stop containers).</p>"},{"location":"dev/tools/docker-compose/#stop-docker-compose","title":"Stop Docker-Compose","text":"<pre><code>docker-compose stop\n</code></pre>"},{"location":"dev/tools/docker-compose/#delete-docker-compose-services","title":"Delete Docker-Compose Services","text":"<p>This will delete all containers created by the <code>docker-compose.yml</code> file, except for the volumes.</p> <pre><code>docker-compose down\n</code></pre> <p>To delete associated volumes:</p> <pre><code>docker-compose down -v\n</code></pre>"},{"location":"dev/tools/docker-compose/#examples","title":"Examples","text":""},{"location":"dev/tools/docker-compose/#nginx-server-with-postgresql-database","title":"NGINX Server with PostgreSQL Database","text":"<pre><code>version: '3.9'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n    depends_on:\n      - app\n  app:\n    build:\n      context: ./app\n    environment:\n      - APP_ENV=development\n    volumes:\n      - app-data:/app/data\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\nvolumes:\n  app-data:\n</code></pre> <p>This configuration:</p> <ul> <li>Defines three services: <code>web</code>, <code>app</code>, and <code>db</code>.</li> <li>Manages networking and volume sharing.</li> <li>Ensures service dependency management.</li> </ul>"},{"location":"dev/tools/docker-compose/#wordpress-with-mysql","title":"WordPress with MySQL","text":""},{"location":"dev/tools/docker-compose/#with-mapped-volumes","title":"With Mapped Volumes","text":"<pre><code>version: \"3\"\nservices:\n  wordpress:\n    image: wordpress:4.9\n    ports:\n      - 80:80\n    environment:\n      - WORDPRESS_DB_HOST=db\n      - WORDPRESS_DB_USER=user1\n      - WORDPRESS_DB_PASSWORD=user1pswd\n      - WORDPRESS_DB_NAME=wordp\n    networks:\n      galaxie:\n    volumes:\n      - ./data/wp:/var/www/html\n    restart: unless-stopped\n  db:\n    image: mysql:5.7\n    environment:\n      - MYSQL_ROOT_PASSWORD=blabla\n      - MYSQL_DATABASE=wordp\n      - MYSQL_USER=luke\n      - MYSQL_PASSWORD=skywalker\n    networks:\n      - galaxie\n    volumes:\n      - ./data/db:/var/lib/mysql\nnetworks:\n  galaxie:\n</code></pre>"},{"location":"dev/tools/docker-compose/#with-managed-volumes","title":"With Managed Volumes","text":"<p>Use named volumes for storage instead of local paths:</p> <pre><code>version: \"3\"\nservices:\n  wordpress:\n    image: wordpress:4.9\n    ports:\n      - 80:80\n    environment:\n      - WORDPRESS_DB_HOST=db\n      - WORDPRESS_DB_USER=user1\n      - WORDPRESS_DB_PASSWORD=user1pswd\n      - WORDPRESS_DB_NAME=wordp\n    networks:\n      galaxie:\n    volumes:\n      - wp:/var/www/html\n    restart: unless-stopped\n  db:\n    image: mysql:5.7\n    environment:\n      - MYSQL_ROOT_PASSWORD=blabla\n      - MYSQL_DATABASE=wordp\n      - MYSQL_USER=luke\n      - MYSQL_PASSWORD=skywalker\n    networks:\n      - galaxie\n    volumes:\n      - db:/var/lib/mysql\nvolumes:\n  wp:\n  db:\nnetworks:\n  galaxie:\n</code></pre> <p>The key difference is using named volumes (<code>wp</code> and <code>db</code>) instead of mapped local paths (<code>./data/wp</code> and <code>./data/db</code>).</p>"},{"location":"dev/tools/docker/","title":"Docker","text":"<p>Info</p> <p>Docker is a virtualization technique based on containers.</p> <p>It allows running very light and isolated containers.</p> <p>Advantages of containers</p> <ul> <li>Speed: Simplifies setup and teardown of complex environments.</li> <li>Consistency: Ensures all developers use the same environment.</li> <li>Portability: Easily share configurations for testing or deployment.</li> </ul> <p>Quote</p> <ul> <li>Develop inside a container using VSCode</li> <li>Docker documentation</li> <li>Docker Hub</li> <li>Play with Docker</li> <li>ByteByteGo: Virtualization and Containerization: Which one to pick?</li> </ul>"},{"location":"dev/tools/docker/#preliminaries","title":"Preliminaries","text":"<p>See virtualization notes.</p>"},{"location":"dev/tools/docker/#docker-hub","title":"Docker hub","text":"<p>Docker Hub is the equivalent of GitHub. It stores Docker images from the community.</p> <p>Use verified and popular images!</p> <p>Everyone can upload images to Docker hub. Some can have security issues or may contain malwares.</p>"},{"location":"dev/tools/docker/#installation","title":"Installation","text":"<p>Cf official Docker documentation.</p>"},{"location":"dev/tools/docker/#usage","title":"Usage","text":"<pre><code>Usage:  docker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nCommon Commands:\n  run         Create and run a new container from an image\n  exec        Execute a command in a running container\n  ps          List containers\n  build       Build an image from a Dockerfile\n  pull        Download an image from a registry\n  push        Upload an image to a registry\n  images      List images\n  login       Authenticate to a registry\n  logout      Log out from a registry\n  search      Search Docker Hub for images\n  version     Show the Docker version information\n  info        Display system-wide information\n\nManagement Commands:\n  builder     Manage builds\n  buildx*     Docker Buildx\n  compose*    Docker Compose\n  container   Manage containers\n  context     Manage contexts\n  debug*      Get a shell into any image or container\n  desktop*    Docker Desktop commands (Alpha)\n  dev*        Docker Dev Environments\n  extension*  Manages Docker extensions\n  feedback*   Provide feedback, right in your terminal!\n  image       Manage images\n  init*       Creates Docker-related starter files for your project\n  manifest    Manage Docker image manifests and manifest lists\n  network     Manage networks\n  plugin      Manage plugins\n  sbom*       View the packaged-based Software Bill Of Materials (SBOM) for an image\n  scout*      Docker Scout\n  system      Manage Docker\n  trust       Manage trust on Docker images\n  volume      Manage volumes\n\nSwarm Commands:\n  swarm       Manage Swarm\n\nCommands:\n  attach      Attach local standard input, output, and error streams to a running container\n  commit      Create a new image from a container's changes\n  cp          Copy files/folders between a container and the local filesystem\n  create      Create a new container\n  diff        Inspect changes to files or directories on a container's filesystem\n  events      Get real time events from the server\n  export      Export a container's filesystem as a tar archive\n  history     Show the history of an image\n  import      Import the contents from a tarball to create a filesystem image\n  inspect     Return low-level information on Docker objects\n  kill        Kill one or more running containers\n  load        Load an image from a tar archive or STDIN\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  wait        Block until one or more containers stop, then print their exit codes\n\nGlobal Options:\n      --config string      Location of client config files (default\n                           \"C:\\\\Users\\\\bapti\\\\.docker\")\n  -c, --context string     Name of the context to use to connect to the\n                           daemon (overrides DOCKER_HOST env var and\n                           default context set with \"docker context use\")\n  -D, --debug              Enable debug mode\n  -H, --host list          Daemon socket to connect to\n  -l, --log-level string   Set the logging level (\"debug\", \"info\",\n                           \"warn\", \"error\", \"fatal\") (default \"info\")\n      --tls                Use TLS; implied by --tlsverify\n      --tlscacert string   Trust certs signed only by this CA (default\n                           \"C:\\\\Users\\\\bapti\\\\.docker\\\\ca.pem\")\n      --tlscert string     Path to TLS certificate file (default\n                           \"C:\\\\Users\\\\bapti\\\\.docker\\\\cert.pem\")\n      --tlskey string      Path to TLS key file (default\n                           \"C:\\\\Users\\\\bapti\\\\.docker\\\\key.pem\")\n      --tlsverify          Use TLS and verify the remote\n  -v, --version            Print version information and quit\n\nRun 'docker COMMAND --help' for more information on a command.\n\nFor more help on how to use Docker, head to https://docs.docker.com/go/guides/\n</code></pre>"},{"location":"dev/tools/docker/#docker-basics","title":"Docker Basics","text":"<p>One can first analyze the following command:</p> Example: how to call Docker:<pre><code>docker run --rm bash echo Salut!\n</code></pre> <p>It gives the follwing result:</p> <pre><code>Unable to find image 'bash:latest' locally\nlatest: Pulling from library/bash\ne1517fbc9c07: Download complete\n467989b961c3: Download complete\n43c4264eed91: Download complete\nDigest: sha256:ce062497c248eb1cf4d32927f8c1780cce158d3ed0658c586a5be7308d583cbb\nStatus: Downloaded newer image for bash:latest\nSalut!\n</code></pre> <p>What happens is:</p> <ol> <li>Docker searches for a bash image and since we did not specified any tag, it takes the latest version.</li> <li>Docker pulls (downloads) bash image from DockerHub.</li> <li>Docker executes the command <code>echo Salut!</code>.</li> <li>Docker removes the container (not the image) since we used the flag <code>-rm</code>.</li> </ol>"},{"location":"dev/tools/docker/#get-help","title":"Get Help","text":"<p>Each docker command has a <code>--help</code> feature to get a description and usage.</p>"},{"location":"dev/tools/docker/#view-downloaded-cached-images","title":"View downloaded (cached) images","text":"Listing cached images:<pre><code>docker images\n</code></pre> Result:<pre><code>REPOSITORY   TAG       IMAGE ID       CREATED       SIZE\nbash         latest    ce062497c248   6 weeks ago   21.8MB\n</code></pre> <p>After having launched a bash container, bash image is cached in the computer. Caching ensures that the following runs are much faster: there is no need to download the image again.</p> <p>Running again:</p> Specifying an image version / tag:<pre><code>docker run --rm bash:3.2 echo Salut!\n</code></pre> Result:<pre><code>REPOSITORY   TAG       IMAGE ID       CREATED       SIZE\nbash         latest    ce062497c248   6 weeks ago   21.8MB\nbash         3.2       79dd16db958d   5 months ago   17.4MB\n</code></pre> <p>Again, this is the goal of caching: the bash version 3.2 have to be dowloaded and appears in the table.</p>"},{"location":"dev/tools/docker/#running-interactive-docker","title":"Running interactive Docker","text":"<ul> <li><code>-t</code>: asks Docker to give a terminal access, plugging STDIN and STDOUT</li> <li><code>-i</code>: runs the container in interactive mode, giving access to the keyboard</li> <li><code>-ti</code>: combination of <code>-t</code> and <code>-i</code></li> </ul> After this command, Docker terminal appears inside out terminal:<pre><code>docker run -ti --rm bash:3.2 echo Salut!\n</code></pre> To exit the docker container console:<pre><code>exit\n</code></pre> <p><code>`docker run</code> always create a new container.</p>"},{"location":"dev/tools/docker/#start-an-existing-container","title":"Start an existing container","text":"<p>Once we've created a container, we must not use docker run command again. The container can be started using the command:</p> <pre><code>docker start -ai &lt;container name&gt;\n</code></pre> <ul> <li><code>-a</code>: attach the container to a process</li> <li><code>-i</code>: runs the container in interactive mode, giving access to the keyboard</li> <li><code>-ai</code>: combination of <code>-a</code> and <code>-i</code></li> </ul>"},{"location":"dev/tools/docker/#stop-an-existing-container","title":"Stop an existing container","text":"Stop a container from inside the attached commandline<pre><code>exit\n</code></pre> Stop a container gracefully from the outside<pre><code>docker exit\n</code></pre>"},{"location":"dev/tools/docker/#list-container-information","title":"List container information","text":"To print running Docker containers<pre><code>docker ps\n</code></pre> List all containers quietly (only displays container IDs)<pre><code>docker ps -q\n</code></pre> List all containers (running and stoped)<pre><code>docker ps -a\n</code></pre> To print the last n created containers (running and stoped)<pre><code>docker ps -l\n</code></pre> To print container sizes<pre><code>docker ps -s\n</code></pre> To print container with their id, name and status (using formatter)<pre><code>docker ps --format \"table {{.ID}}\\t{{.Names}}\\t{{.Status}}\"\n</code></pre>"},{"location":"dev/tools/docker/#detail-informations-for-any-container","title":"Detail informations for any container","text":"<p>Use <code>`docker ps</code> t get container's name and then:</p> Print information on the docker<pre><code>docker inspect &lt;container name&gt;\n</code></pre>"},{"location":"dev/tools/docker/#attach-to-a-running-container","title":"Attach to a running container","text":"<pre><code>docker attach &lt;container name&gt;\n</code></pre>"},{"location":"dev/tools/docker/#detach-from-a-running-container","title":"Detach from a running container","text":"From inside a container<pre><code>ctrl p+q\n</code></pre>"},{"location":"dev/tools/docker/#container-ids","title":"Container IDs","text":"<p>Image and containers have unique IDs, that can be obtained using <code>docker images</code>. IDs can be used to:</p> <ul> <li>get images properties</li> <li>manipulate images</li> </ul>"},{"location":"dev/tools/docker/#print-history-layers-of-an-image","title":"Print history / layers of an image","text":"Print the layers used for a given image. Layers can be numerous.<pre><code>docker history &lt;IMAGE_ID&gt;\n</code></pre> <p>Shortcut</p> <p>Typing only the first unique digits of the ID is the same as copy-pasting the whole ID.</p> <p>Info</p> <p>All the layers that constitude the container image are read-only. There is a read-write partition inside the container (separated from host), that stores the data of the container. Now there are multiple issues:</p> <ol> <li>How to make backup of the container?</li> <li>How to update an image for this container?</li> </ol> <p>Answer: containers are volatile, and this is where volumes are important.</p>"},{"location":"dev/tools/docker/#volumes-handling","title":"Volumes handling","text":""},{"location":"dev/tools/docker/#maped-volumes","title":"Maped volumes","text":"<p>Volumes mount a directory from host machine into a container. The deletion of the container will not affect the project files.</p> Mount a directory from the host machine inside the container<pre><code>docker run -ti --rm -v $(pwd)/&lt;host folder&gt;:&lt;docker folder&gt;\n</code></pre> <p>bash title=\"To mound a directory in read only, add <code>ro</code>:\" <pre><code>docker run -ti --rm -v $(pwd)/&lt;host folder&gt;:ro&lt;docker folder&gt;\n</code></pre></p>"},{"location":"dev/tools/docker/#managed-volumes","title":"Managed volumes","text":"Docker creates a file volume for us:<pre><code>docker volume create my_data\n</code></pre> Print the list of the created volumes:<pre><code>docker volume ls\n</code></pre> Create a bash container sharing the volume my_data:<pre><code>docker run --rm -ti -v my_data:/src bash\n</code></pre> Create a bash container sharing the volume my_data:<pre><code>docker run --rm -ti -v my_data:/src bash\n</code></pre> <p>When mounting an empty managed volume, the mounting folder of the container is totally transferred inside the host folder, and stays after the container has been deleted.</p> <p>Docker containers can then modify the volume.</p> Print information on the managed volume<pre><code>docker volume inspect my_data\n</code></pre>"},{"location":"dev/tools/docker/#delete-all-existing-containers","title":"Delete all existing containers","text":"Stop all running containers<pre><code>docker stop $(docker ps -q)\n</code></pre> Remove all containers<pre><code>docker rm $(docker ps -a -q)\n</code></pre>"},{"location":"dev/tools/docker/#test-some-executable-in-different-environments","title":"Test some executable in different environments","text":"<pre><code>docker run --rm -v $(pwd)/script.sh:/script.sh bash:4 /script.sh\n</code></pre> <p>What this command will do is:</p> <ul> <li>create a temporary docker (<code>rm</code> command is used) using bash version 4</li> <li>mount a volume corresponding to the executable file <code>script.sh</code></li> <li>execute the script with the command <code>/script.sh</code></li> <li>exit the container and delete it</li> </ul> <p>To test the script or the executable on another bash version, the only thing to do is specifying the version we want to test in the same command:</p> <pre><code>docker run --rm -v $(pwd)/script.sh:/script.sh bash:3.2 /script.sh\n</code></pre> <p>And we have not touched to our system configuration!</p>"},{"location":"dev/tools/docker/#network-ports-handling","title":"Network ports handling","text":"<p>Just as volumes, containers have their own network ports, that can be mounted to host's network ports. <code>-p</code> is similar to <code>-v</code> to mount volumes, but for network ports.</p> Creates an nginx docker that maps the container network port to the host network port<pre><code>docker run --rm -p &lt;host port&gt;:&lt;container port&gt; nginx \n</code></pre> <p>Note that:</p> <ul> <li>ports can be reserved</li> <li>cannot be allocated twice</li> <li>if no host port is specified, the host machine choses the port number</li> </ul> Creates an nginx docker that maps the container network port to the host network port of the host's choice<pre><code>docker run --rm -p -d &lt;host port&gt;:&lt;container port&gt; nginx \n</code></pre> <p>Note that <code>-d</code> detaches the docker and runs it in the background so that the server can run continously.</p> <p>However, docker silences the maping and we want a way to see quickly which port host's system decided to use <code>`docker ps</code> t get container's name and then:</p> Print information on the docker (ports and volumes are one of those)<pre><code>docker inspect &lt;container name&gt;\n</code></pre>"},{"location":"dev/tools/docker/#network-drivers","title":"Network drivers","text":"<p>There are different levels of network drivers for docker containers:</p> <ul> <li>none: no network driver</li> <li>bridge (default): only containers created using the bridge and host will be able to connect to each others</li> <li>custom bridges: same as bridge but this is not a default bridge</li> <li>host: no network isolation between host and container</li> <li>overlay</li> <li>macvlan</li> </ul> <p>Bridge features can be checked using <code>ping</code> command inside each docker</p> <p>Network features can be checked using <code>ifconfig</code> command inside the docker</p>"},{"location":"dev/tools/docker/#no-network","title":"No network","text":"Create a bash container having no network feature<pre><code>docker run -ti --rm --network none bash\n</code></pre>"},{"location":"dev/tools/docker/#default-bridge","title":"Default bridge","text":"Create a bash container having a bridge feature<pre><code>docker run -ti --rm bash\n</code></pre> <p>Warning</p> <p>This default bridge provides acceess to every other docker and the host machine, one may want to ping specific containers instead of all of them. In this case, custom bridges can be used.</p>"},{"location":"dev/tools/docker/#custom-bridge","title":"Custom bridge","text":"Create a bash container having a custom bridge feature<pre><code>docker run -ti --rm --network create --driver=bridge my_bridge_name bash\n</code></pre> <p>Then, my_bridge_name network should appear inside the created network:</p> To list docker networks created<pre><code>docker network ls\n</code></pre> To create another container sharing the same my_bridge_name network:<pre><code>docker run -ti -rm --network=my_bridge_name --name=server1 bash\n</code></pre> <p>Docker uses a internal DNS only for cloned bridges or custom briges, but not for default bridges</p> <p>Containers sharing the same network can therefore ping each other by their IP, but also using their names (given by <code>--name</code>).</p> <p>If a container was created on another bridge or none, it can be linked at container runtime with:</p> Connect container server to the bridge my_bridge_name<pre><code>docker network connect my_bridge_name server\n</code></pre> <p>Once done, server container should be able to ping server1 because it will share the same bridge network. Note that this is done while the container is running and do not require a container reboot.</p>"},{"location":"dev/tools/docker/#host-driver","title":"Host driver","text":"<p>Opening a network port on the docker is equivalent to opening a network port on the host machine.</p> <p>This type of network can be used in very specific cases, but goes against container's isolation principle.</p>"},{"location":"dev/tools/docker/#delete-a-network","title":"Delete a network","text":"Remove the my_bridge_name network<pre><code>docker network rm my_bridge_name\n</code></pre>"},{"location":"dev/tools/docker/#log-detached-containers","title":"Log detached containers","text":"Print the last logs of a given container (a bit like unix tail command)<pre><code>docker logs &lt;container id or name&gt;\n</code></pre> <p>This command is useful for detached containers.</p>"},{"location":"dev/tools/docker/#executing-a-command-in-an-active-container","title":"Executing a command in an active container","text":"Executes the program in the specified active container<pre><code>docker exec -ti &lt;container id or name&gt; &lt;program&gt;\n</code></pre> <p>e.g.</p> Executes the program bqsh in the specified active container d24<pre><code>docker exec -ti d24 bash\n</code></pre> <p>This will open the container in a bash console, in interactive mode.</p>"},{"location":"dev/tools/docker/#creating-images","title":"Creating images","text":"<p>Sometimes, existing images do not have the features we want, and therefore we have to create it.</p> <p>This can be done by:</p> <ol> <li>Selecting an existing image on DockerHub</li> <li>Typing commands that should be run in addition on the image, creating additional layers</li> </ol>"},{"location":"dev/tools/docker/#editing-the-dockerfile","title":"Editing the Dockerfile","text":"<p>Any Dockerfile starts with a base image specification:</p> <pre><code>FROM ubuntu:22.04\n</code></pre> <p>In this scenario, the base image on which we will add layers is ubuntu, version 22.04.</p> <p>Changing the version number of the base image is a standard way of testing a code throughout software versions</p>"},{"location":"dev/tools/docker/#installing-libraries-automatically-using-apt-get","title":"Installing libraries automatically using <code>apt-get</code>","text":"<p>Sometimes, installing libraries need a user input, like Y for yes or N for no.</p> <p>In this case, the syntax in the dockerfile becomes:</p> <pre><code>RUN apt-get install -y libxml2-dev\n</code></pre> <p>This command will provide an automated Y or yes input to the installation procedure of the container.</p> <p>In other scenarios, time-zone has to be known by a user input and stops the container installation process.</p> <p>To automate this, two commands can be added at the top of the Dockerfile:</p> <pre><code>ENV TZ=Europe/Paris\nENV DEBIAN_FRONTEND=noninteractive\n</code></pre>"},{"location":"dev/tools/docker/#changing-the-working-directory","title":"Changing the working directory","text":"Set the working directory to /opt/test<pre><code>WORKDIR /opt/test\n</code></pre>"},{"location":"dev/tools/docker/#build-the-new-image-from-a-dockerfile","title":"Build the new image from a Dockerfile","text":"<pre><code>docker build -t &lt;new container name&gt; &lt;path to Docker file&gt;\n</code></pre> <pre><code>docker build -t php_soap:7.0.31 .\n</code></pre> <p>Where:</p> <ul> <li><code>-t</code> creates a tag for the new image <code>php_soap:7.0.31</code></li> <li><code>.</code> specifies that the dockerfile is in the current working directory</li> </ul> <p>If the Dockerfile has a custom name (different from Dockerfile or dockerfile), then the path to this configuration script is indicated by <code>-f my_custom_named_dockerfile path_to_custom_dockerfile</code></p>"},{"location":"dev/tools/git/","title":"Git","text":""},{"location":"dev/tools/git/#git-tags","title":"Git Tags","text":"<p>Overview</p> <p>Git tags are used to mark specific points in history as important, typically to indicate releases or milestones in a project.</p> <p>Refs</p> <p>Git Basics - Tagging</p>"},{"location":"dev/tools/git/#list-all-tags","title":"List all tags","text":"<p>To list all the tags in the repository:  </p> <pre><code>git tag\n</code></pre>"},{"location":"dev/tools/git/#view-tag-details","title":"View tag details","text":"<p>To display detailed information about a specific tag (commit, author, date, etc.):  </p> <pre><code>git show &lt;tag_name&gt;\n</code></pre>"},{"location":"dev/tools/git/#create-a-new-tag","title":"Create a new tag","text":"<p>You can create two types of tags:</p> <ul> <li>Lightweight tags: A simple reference to a commit (no extra metadata).</li> </ul> <pre><code>git tag &lt;tag_name&gt;\n</code></pre> <ul> <li>Annotated tags: Include additional information such as the tagger's name, email, and a tagging message.</li> </ul> <pre><code>git tag -a &lt;tag_name&gt; -m \"&lt;tagging_message&gt;\"\n</code></pre>"},{"location":"dev/tools/git/#tag-a-specific-commit","title":"Tag a specific commit","text":"<p>You can tag a particular commit by its hash. First, view commit history with <code>git log --pretty=oneline</code> to find the commit hash, then:  </p> <pre><code>git tag -a &lt;tag_name&gt; &lt;commit_hash&gt;\n</code></pre>"},{"location":"dev/tools/git/#push-a-tag-to-remote","title":"Push a tag to remote","text":"<p>To push a specific tag to a remote repository:</p> <pre><code>git push origin &lt;tag_name&gt;\n</code></pre>"},{"location":"dev/tools/git/#delete-a-local-tag","title":"Delete a local tag","text":"<p>To remove a tag locally:</p> <pre><code>git tag -d &lt;tag_name&gt;\n</code></pre>"},{"location":"dev/tools/git/#fetch-tags-from-remote","title":"Fetch tags from remote","text":"<p>Fetch a tags from remote:</p> <pre><code>git fetch --tags\n</code></pre> <p>To fetch a specific tag:</p> <pre><code>git fetch origin &lt;tag_name&gt;\n</code></pre>"},{"location":"dev/tools/git/#git-modules","title":"Git modules","text":""},{"location":"dev/tools/git/#add-a-git-module","title":"Add a git module","text":"<pre><code>## initialize a git repository\ngit init\n\n## add a git module to project\ngit submodule add -b &lt;branch_name&gt; --name &lt;module_name&gt; &lt;url&gt; &lt;path&gt;\n</code></pre> <p>Example:</p> <pre><code>git submodule add -b docking --name imgui https://github.com/ocornut/imgui.git external/imgui\n</code></pre> <p>The former lines of code will clone the repository Imgui from the given URL in the folder <code>external/imgui</code> even if not already existing using the name imgui. A hidden .gitmodules file should appear alongside the .git folder and contains the newly added git modules:</p> <p>```text .gitmodules [submodule \"glfw\"]         path = external/glfw         url = https://github.com/glfw/glfw.git         branch = master <pre><code>Add some more gitmodules by repeating the process.\n\n### Clone a project having submodules\n\n#### Clone sudmodules with the project\n\n```bash\ngit clone --recursive &lt;URL&gt;\n</code></pre></p> <p>By using this command, every submodule of the project will be initialized during the cloning procedure of the main project.</p>"},{"location":"dev/tools/git/#clone-submodules-in-a-differed-way","title":"Clone submodules in a differed way","text":"<p>TODO</p>"},{"location":"dev/tools/git/#delete-a-module-from-the-git-repository","title":"Delete a module from the git repository","text":"<p>A very helpful github gist is available here</p> <pre><code>## Remove the submodule entry from .git/config\ngit submodule deinit -f path/to/submodule\n\n## Remove the submodule directory from the superproject's .git/modules directory\nrm -rf .git/modules/path/to/submodule\n\n## Remove the entry in .gitmodules and remove the submodule directory located at path/to/submodule\ngit rm -f path/to/submodule\n</code></pre>"},{"location":"dev/tools/github/","title":"GitHub","text":""},{"location":"dev/tools/github/#setup-a-secret-on-a-repository","title":"Setup a secret on a repository","text":"<p>To add your created token to the repository secrets in GitHub, follow these steps:</p>"},{"location":"dev/tools/github/#1-copy-your-github-token","title":"1. Copy Your GitHub Token","text":"<ul> <li>Copy the token you generated. If you\u2019ve already closed the page where the token was displayed, you will need to regenerate it because GitHub doesn\u2019t allow you to view the token again.</li> </ul>"},{"location":"dev/tools/github/#2-go-to-your-repository-settings","title":"2. Go to Your Repository Settings","text":"<ul> <li>Navigate to the repository where you want to add the token.</li> <li>Click on the Settings tab at the top of the repository.</li> </ul>"},{"location":"dev/tools/github/#3-navigate-to-secrets-and-variables","title":"3. Navigate to Secrets and Variables","text":"<ul> <li>In the left-hand sidebar, scroll down to Secrets and variables under Security.</li> <li>Click on Actions under this section.</li> </ul>"},{"location":"dev/tools/github/#4-add-a-new-repository-secret","title":"4. Add a New Repository Secret","text":"<ul> <li>Click the New repository secret button.</li> <li>Fill out the fields:</li> <li>Name: Use a clear and descriptive name like <code>ACTIONS_DEPLOY_TOKEN</code>.</li> <li>Secret: Paste the token you copied earlier into this field.</li> <li>Click Add secret to save it.</li> </ul>"},{"location":"dev/tools/github/#5-verify-the-secret","title":"5. Verify the Secret","text":"<ul> <li>The newly added secret will now be listed under the repository secrets, but its value will be hidden for security reasons.</li> <li>Reference this secret in your GitHub Actions workflow using <code>${{ secrets.ACTIONS_DEPLOY_TOKEN }}</code>.</li> </ul>"},{"location":"dev/tools/github/#6-test-the-workflow","title":"6. Test the Workflow","text":"<ul> <li>Push a change to your repository or trigger the workflow manually to test if the secret is working as expected.</li> </ul> <p>Let me know if you face any challenges!</p>"},{"location":"dev/tools/portainer/","title":"Portainer","text":"<p>Overview</p> <p>Portainer is a lightweight and user-friendly management tool for Docker and Kubernetes environments. It provides a graphical user interface (GUI) that simplifies container orchestration, making it accessible to both beginners and advanced users. With Portainer, you can efficiently manage your containerized applications, networks, and volumes through a web-based dashboard, reducing the need for complex CLI commands.</p>"},{"location":"dev/tools/portainer/#key-features-of-portainer","title":"Key Features of Portainer","text":"<ol> <li> <p>Intuitive Web Interface</p> <ul> <li>A simple GUI for managing Docker and Kubernetes environments.</li> <li>Eliminates the need for extensive command-line interaction.</li> </ul> </li> <li> <p>Multi-Environment Support</p> <ul> <li>Manage local Docker instances, Docker Swarm clusters, remote Docker hosts, and Kubernetes clusters from a single interface.</li> </ul> </li> <li> <p>Application Templates</p> <ul> <li>Predefined templates to deploy common applications (e.g., WordPress, MySQL) with minimal effort.</li> </ul> </li> <li> <p>Resource Management</p> <ul> <li>Monitor and manage containers, images, networks, and volumes.</li> <li>Detailed metrics on resource utilization (CPU, memory, disk).</li> </ul> </li> <li> <p>User and Role Management</p> <ul> <li>Secure your environment by assigning different roles and permissions to users.</li> <li>Supports team collaboration through granular access controls.</li> </ul> </li> <li> <p>Stack Deployment</p> <ul> <li>Simplified deployment of multi-container applications using Docker Compose or Kubernetes manifests.</li> </ul> </li> <li> <p>Volume and Network Management</p> <ul> <li>Create and attach volumes and networks easily.</li> <li>Visualize relationships between containers, networks, and volumes.</li> </ul> </li> <li> <p>Integrated Registry Management</p> <ul> <li>Pull images from Docker Hub or private container registries.</li> <li>Manage image tags and repositories.</li> </ul> </li> <li> <p>Backup and Restore</p> <ul> <li>Easy backups of Portainer settings, stacks, and configurations for disaster recovery.</li> </ul> </li> <li> <p>Extensibility</p> <ul> <li>Support for third-party plugins to extend functionality.</li> </ul> </li> </ol>"},{"location":"dev/tools/portainer/#how-portainer-works","title":"How Portainer Works","text":""},{"location":"dev/tools/portainer/#setup","title":"Setup","text":"<p>Portainer runs as a containerized service on Docker or Kubernetes. Once deployed, it provides access via a web-based dashboard.</p>"},{"location":"dev/tools/portainer/#connectivity","title":"Connectivity","text":"<p>It connects to Docker APIs or Kubernetes APIs to gather information about your environment and provide management capabilities.</p>"},{"location":"dev/tools/portainer/#management-capabilities","title":"Management Capabilities","text":"<ul> <li>View, start, stop, and restart containers.</li> <li>Pull and push images to registries.</li> <li>Deploy and scale stacks (or workloads in Kubernetes).</li> </ul>"},{"location":"dev/tools/portainer/#why-use-portainer","title":"Why Use Portainer?","text":"<ol> <li>Ease of Use: Portainer reduces the learning curve of container orchestration, especially for beginners.  </li> <li>Centralized Management: Manage multiple container environments from one dashboard.  </li> <li>Time-Saving: Quick access to logs, metrics, and settings without navigating multiple CLI commands.  </li> <li>Collaboration: Supports teams with role-based access and secure settings.  </li> <li>Lightweight: Minimal resource footprint, making it suitable for local, production, and edge deployments.</li> </ol>"},{"location":"dev/tools/portainer/#how-to-deploy-portainer-on-docker","title":"How to Deploy Portainer on Docker","text":""},{"location":"dev/tools/portainer/#pull-the-portainer-image","title":"Pull the Portainer Image","text":"<pre><code>docker pull portainer/portainer-ce\n</code></pre>"},{"location":"dev/tools/portainer/#run-the-portainer-container","title":"Run the Portainer Container","text":"<pre><code>docker run -d -p 9000:9000 --name=portainer \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v portainer_data:/data \\\n    portainer/portainer-ce\n</code></pre>"},{"location":"dev/tools/portainer/#access-the-web-interface","title":"Access the Web Interface","text":"<p>Open your browser and navigate to <code>http://localhost:9000</code> to complete the setup.</p>"},{"location":"dev/tools/portainer/#portainer-editions","title":"Portainer Editions","text":"<ol> <li> <p>Portainer Community Edition (CE)</p> </li> <li> <p>Free and open-source.</p> </li> <li> <p>Ideal for small projects and non-commercial use.</p> </li> <li> <p>Portainer Business Edition (BE)</p> </li> <li> <p>Paid version with advanced features like LDAP integration, RBAC (Role-Based Access Control), and priority support.</p> </li> <li>Suited for large-scale enterprise environments.</li> </ol>"},{"location":"dev/tools/screen/","title":"Screen (UNIX)","text":"<p>screen` is a powerful terminal multiplexer that allows you to manage multiple terminal sessions within a single window. This is particularly useful when you are working on a remote server or need to detach and reattach to sessions.</p>"},{"location":"dev/tools/screen/#1-installation","title":"1. Installation","text":"<p>If <code>screen</code> is not already installed on your Linux system, you can install it using the package manager for your distribution. For example:</p> <ul> <li> <p>On Ubuntu/Debian:</p> <pre><code>sudo apt-get update\nsudo apt-get install screen\n</code></pre> </li> <li> <p>On CentOS/RHEL:</p> <pre><code>sudo yum install screen\n</code></pre> </li> </ul>"},{"location":"dev/tools/screen/#2-starting-a-screen-session","title":"2. Starting a Screen Session:","text":"<p>To start a new <code>screen</code> session, open a terminal and type:</p> <pre><code>screen\n</code></pre>"},{"location":"dev/tools/screen/#3-working-within-the-screen-session","title":"3. Working within the Screen Session:","text":"<p>Once inside a <code>screen</code> session, you can use it like a regular terminal. Run your commands, open multiple windows, or split the screen.</p> <ul> <li> <p>Create a new window: Press <code>Ctrl-a</code> followed by <code>c</code>.</p> </li> <li> <p>Switch between windows: Press <code>Ctrl-a</code> followed by a number corresponding to the window number.</p> </li> <li> <p>Split the screen horizontally: Press <code>Ctrl-a</code> followed by <code>S</code>.</p> </li> <li> <p>Split the screen vertically: Press <code>Ctrl-a</code> followed by <code>|</code>.</p> </li> <li> <p>Navigate between split regions: Press <code>Ctrl-a</code> followed by <code>Tab</code>.</p> </li> </ul>"},{"location":"dev/tools/screen/#4-detach-from-a-screen-session","title":"4. Detach from a Screen Session:","text":"<p>To detach from a <code>screen</code> session and leave it running in the background, press:</p> <pre><code>Ctrl-a d\n</code></pre>"},{"location":"dev/tools/screen/#5-reattach-to-a-screen-session","title":"5. Reattach to a Screen Session:","text":"<p>To reattach to a detached <code>screen</code> session, list the available sessions:</p> <pre><code>screen -ls\n</code></pre> <p>You will see a list of detached sessions. Reattach to a session by specifying its ID:</p> <pre><code>screen -r &lt;session_id&gt;\n</code></pre>"},{"location":"dev/tools/screen/#6-exiting-a-screen-session","title":"6. Exiting a Screen Session:","text":"<p>To exit a <code>screen</code> session, simply exit all shells within it, and when the last shell is closed, the <code>screen</code> session will terminate.</p> <p>If you want to close a <code>screen</code> session even if there are multiple windows or shells running, press <code>Ctrl-a</code> followed by <code>:</code> to bring up the command prompt and type <code>quit</code> or <code>exit</code>.</p> <p>These are the basic commands to get started with <code>screen</code>. It's a versatile tool that provides a lot of functionality for managing terminal sessions, and you can customize it based on your needs.</p>"},{"location":"dev/tools/tar/","title":"TAR (UNIX)","text":""},{"location":"dev/tools/tar/#basics","title":"Basics","text":""},{"location":"dev/tools/tar/#compress-a-directory","title":"Compress a directory","text":"<pre><code>tar -czvf prod_env.tar.gz prod_env\n</code></pre>"},{"location":"dev/tools/tar/#decompress-an-archive","title":"Decompress an archive","text":"<pre><code>tar -xczvf prod_env.tar.gz prod_env\n</code></pre>"},{"location":"dev/tools/tar/#secure-with-a-password","title":"Secure with a password","text":"<p>Quote</p> <p>baeldung.com</p>"},{"location":"dev/tools/tar/#using-gpg-gnu-privacy-guard","title":"Using GPG (Gnu Privacy Guard)","text":""},{"location":"dev/tools/tar/#using-cccrypt","title":"Using cccrypt","text":""},{"location":"dev/tools/vcpkg/","title":"VCPKG","text":""},{"location":"dev/tools/vcpkg/#description","title":"Description","text":"<p>vcpkg is a C and C++ dependency manager from Microsoft.</p> <p>It works for all platforms, buildsystems and workflows. Works with CMake.</p>"},{"location":"dev/tools/vcpkg/#useful-links","title":"Useful links","text":"<ul> <li>Official website</li> <li>Github repository</li> </ul>"},{"location":"dev/tools/vcpkg/#how-to-install","title":"How to install","text":""},{"location":"dev/tools/vcpkg/#windows","title":"Windows","text":"<ul> <li>clone the repository</li> </ul> <pre><code>git clone https://github.com/microsoft/vcpkg\n</code></pre> <ul> <li>execute the cmd script</li> </ul> <pre><code>\\vcpkg\\bootstrap-vcpkg.bat\n</code></pre> <ul> <li>add vcpkg to the PATH: go to the environment variables and add vcpkg to PATH.</li> <li>to search for a specific package:</li> </ul> <pre><code>.\\vcpkg\\vcpkg search [search term]\n</code></pre> <ul> <li>to install a package; type:</li> </ul> <pre><code>.\\vcpkg\\vcpkg install [package name]:x64-windows\n</code></pre> <ul> <li>to use vcpkg with Visual Studio, run:</li> </ul> <pre><code>.\\vcpkg\\vcpkg integrate install\n</code></pre>"},{"location":"dev/tools/vcpkg/#list-of-useful-packages","title":"List of useful packages","text":"<ul> <li>ImGui</li> <li>GLFW</li> <li>Eigen</li> </ul>"},{"location":"dev/tools/virtualization/","title":"Virtualization","text":"<p>Info</p> <p>Virtualization is the emulation of a physical computer using a software called hypervisor.</p> <p>It allows to run multiple virtual computers on the same physical computer.</p> <p>The operating system (OS) already runs on a virtual computer, and have no way to make the difference between a physical and a virtual computer.</p> <p>The key components of the virtualization are:</p> <ul> <li>Hypervisor</li> <li>Virtual machines</li> <li>Host machines</li> <li>Guest operating systems</li> </ul>"},{"location":"dev/tools/virtualization/#hypervisors","title":"Hypervisors","text":"<p>ByteByteGo.com</p> <p>A hypervisor is software that runs above the physical server or host.</p> <p>It pools the host\u2019s resources and allocates them to virtual machines (VMs).</p>"},{"location":"dev/tools/virtualization/#type-1-hypervisor-bare-metal","title":"Type 1 Hypervisor (Bare Metal)","text":"<p>A Type 1 hypervisor installs directly on the physical server.  They are also called bare metal hypervisors. Type 1 hypervisors are the most common. They provide better security and lower latency.</p> <p></p> <p>Examples:</p> <ul> <li>VMware ESXi</li> <li>Microsoft Hyper-V</li> <li>Open source KVM</li> </ul>"},{"location":"dev/tools/virtualization/#type-2-hypervisor-hosted","title":"Type 2 Hypervisor (Hosted)","text":"<p>A Type 2 hypervisor runs on top of a host operating system installed on the physical server. They are also called hosted hypervisors. Type 2 hypervisors see less frequent use, mainly for end-user virtualization. They have higher latency than Type 1 hypervisors.</p> <p></p> <p>Examples:</p> <ul> <li>Oracle VirtualBox</li> <li>VMware Workstation</li> </ul>"},{"location":"dev/tools/virtualization/#virtual-machine-vm","title":"Virtual Machine (VM)","text":"<p>What is a Virtual Machine?</p> <p>A virtual machine (VM) is a software-based emulation of a physical computer, running an entire operating system and applications within a completely isolated environment.</p> <p>VMs use hardware-level virtualization through a hypervisor to create and run virtual machines.</p> <p>Benefits of VMs</p> <ul> <li><code>Isolated</code> between the host and the virtual machine</li> <li><code>Multi-OS capability</code>: can run different operating systems (e.g., Windows, Linux) simultaneously on the same hardware.</li> <li><code>Environment replication</code>: great for testing, development, and running legacy applications in a controlled environment without impacting the host.</li> <li><code>Controlled ressource allocation</code>: VMs can be allocated specific amounts of CPU, memory, and storage, making them predictable in resource usage.</li> <li><code>Portability</code>: can be easily moved, copied, or backed up as files, simplifying disaster recovery and scaling.</li> <li><code>Security</code>: since each VM is isolated, a crash or compromise in one VM doesn't affect others or the host system.</li> <li><code>Cost efficiency</code>: allows better utilization of hardware by running multiple VMs on the same physical server, reducing the need for additional physical machines.</li> </ul> <p>Drawbacks of VMs</p> <ul> <li><code>Resource intensive</code>: require significant memory, CPU, and storage since each VM runs its own OS. This can lead to overhead.</li> <li><code>Performance overhead</code>: the hypervisor adds a layer between the hardware and VMs, which can cause slower performance compared to running applications directly on the host OS.</li> <li><code>Long startup time</code>: needs to iunitialize a full OS</li> <li><code>Complex management</code> when dealing with large-scale VMs</li> <li><code>License cost</code>: each VM needs its own OS license</li> <li><code>Limited scalability</code> when dealing with loads compared to lightweight solutions like containers.</li> </ul>"},{"location":"dev/tools/virtualization/#containers","title":"Containers","text":"<p>What is a container?</p> <p>Containers share the host OS kernel and isolate applications at the process level: a container is a process of the host machine.</p> <p>They don't include a full OS, just the necessary libraries and dependencies.</p> <p>This makes them lightweight and fast.</p> <p>Containers use OS-level virtualization, where the container runtime (like Docker) isolates processes without the need for a separate OS.</p> <p>Benefits of containers</p> <ul> <li><code>Lightweitgh</code>: containers share the host OS kernel, requiring fewer resources compared to virtual machines. They start quickly and use less memory and CPU than VMs.</li> <li><code>Portiability</code>: A containerized application can run consistently across different environments (development, testing, production) without compatibility issues.</li> <li><code>Scalability</code>: Containers are designed for rapid scaling. You can deploy, replicate, or terminate containers quickly to handle changing workloads.</li> <li><code>Resource Efficiency</code>: Containers use only the resources they need for the application and dependencies, avoiding the overhead of a full operating system (unlike VMs).</li> <li><code>Isolation</code>: Applications in containers run in isolated environments, ensuring that dependencies or conflicts don't affect other containers or the host.</li> <li><code>Microservices Architecture</code>: Ideal for breaking applications into smaller, manageable microservices, which can be developed, deployed, and scaled independently.</li> <li><code>Continuous Integration/Continuous Deployment (CI/CD)</code>: Containers integrate seamlessly with DevOps tools, making automation in building, testing, and deploying applications easier.</li> </ul> <p>Drawbacks of containers</p> <ul> <li><code>Weaker isolation than VMs</code>: Containers share the host OS kernel, so they are less isolated than virtual machines. A vulnerability in the host OS or runtime (like Docker) can affect all containers.</li> <li><code>Limited Multi-OS Capability</code>: Containers use the host OS kernel, so they can't run a different operating system: When running an Ubuntu container on a Windows machine, you're likely using Docker Desktop, which includes a Linux virtual machine (via WSL2 or Hyper-V). This VM provides a Linux kernel, allowing Linux containers to run on Windows. From the user's perspective, it feels seamless, but under the hood, you're relying on a lightweight virtual machine.</li> <li><code>Security Risks</code>: Misconfigured containers or vulnerabilities in the container runtime can expose the host system.</li> <li><code>Storage and Networking Complexity</code>: Persistent storage and advanced networking setups can be challenging in containerized environments.</li> <li><code>Learning Curve</code>: Properly designing, deploying, and managing containers requires understanding of new tools and technologies like Docker, Kubernetes, and orchestration.</li> <li><code>Not Ideal for Monolithic Applications</code>: Large, monolithic applications might not benefit from the microservices model that containers are optimized for.</li> </ul> <p></p>"},{"location":"dev/tools/virtualization/#image","title":"Image","text":"<p>A container is created using an image.</p> <p>Using Oriented Object Programming the container would be the class and the image would be an instance of this class.</p> <p>An image is defined by its tag: it is fixed. On the other hand, the container is dynamic and can be used from this fixed image.</p>"},{"location":"dev/tools/virtualization/#layers","title":"Layers","text":"<p>An image is made from layers. Layers can be added or removed so that the image is relevant for our usage.</p>"},{"location":"dev/tools/virtualization/#virtualization-vs-containerization","title":"Virtualization VS Containerization","text":""},{"location":"file_formats/json/","title":"JSON","text":"<p>Info</p> <p>JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate. It is widely used for representing structured data and exchanging information between a server and a client, or between different components of an application.</p>"},{"location":"file_formats/json/#1-data-structure","title":"1. Data Structure:","text":"<p>JSON represents data as key-value pairs, similar to a dictionary in Python or an object in JavaScript. The basic data structures in JSON are:</p> <ul> <li>Object: An unordered collection of key-value pairs enclosed in curly braces <code>{}</code>. Each key must be a string, and the values can be strings, numbers, objects, arrays, boolean, or <code>null</code>.</li> </ul> <p>Example:</p> <pre><code>{\n    \"name\": \"John\",\n    \"age\": 30,\n    \"isStudent\": false,\n    \"grades\": [85, 90, 78],\n    \"address\": {\n        \"city\": \"New York\",\n        \"zipCode\": \"10001\"\n    }\n}\n</code></pre> <ul> <li>Array: An ordered list of values enclosed in square brackets <code>[]</code>. Elements can be strings, numbers, objects, arrays, booleans, or <code>null</code>.</li> </ul> <p>Example:</p> <pre><code>[1, 2, \"three\", true, {\"name\": \"Alice\"}, null]\n</code></pre>"},{"location":"file_formats/json/#2-syntax-rules","title":"2. Syntax Rules:","text":"<ul> <li>Data is represented as key-value pairs.</li> <li>Keys and strings must be enclosed in double quotation marks.</li> <li>Values can be strings, numbers, objects, arrays, booleans (<code>true</code> or <code>false</code>), or <code>null</code>.</li> <li>Whitespace (spaces, tabs, newlines) is allowed and ignored.</li> <li>The JSON data structure is hierarchical, allowing nesting of objects and arrays.</li> </ul>"},{"location":"file_formats/json/#3-example","title":"3. Example:","text":"<p>Here's a simple example of a JSON object representing information about a person:</p> <pre><code>{\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"isStudent\": true,\n    \"courses\": [\"Math\", \"History\"],\n    \"address\": {\n        \"city\": \"Boston\",\n        \"zipCode\": \"02108\"\n    }\n}\n</code></pre>"},{"location":"file_formats/json/#4-usage","title":"4. Usage:","text":"<p>JSON is commonly used for configuration files, web APIs (as a data interchange format), and exchanging data between a server and a client. It is also used in various programming languages for representing and working with structured data.</p>"},{"location":"file_formats/json/#5-parsing-and-generating-json","title":"5. Parsing and Generating JSON:","text":"<p>In most programming languages, libraries or built-in functions are available to parse JSON from a string into a data structure and vice versa. For example, in Python, the <code>json</code> module provides functions like <code>json.loads()</code> for parsing and <code>json.dumps()</code> for generating JSON.</p> <p>In C++, you can use the <code>nlohmann::json</code> library.</p>"},{"location":"file_formats/json/#6-json-schema","title":"6. JSON Schema:","text":"<p>JSON Schema is a specification for defining the structure of JSON data. It provides a way to validate the structure of JSON documents, ensuring they conform to a predefined schema.</p>"},{"location":"file_formats/json/#7-security-considerations","title":"7. Security Considerations:","text":"<p>While JSON is a versatile and widely used data format, it's important to be aware of security considerations, especially when dealing with user input. Avoid using <code>eval()</code> or similar functions to parse JSON from untrusted sources, as it can lead to security vulnerabilities (JSON Injection). Instead, use dedicated JSON parsing functions provided by the language or library.</p> <p>Understanding the basic principles of JSON is essential for working with web development, APIs, and many other data exchange scenarios in modern software development.</p>"},{"location":"file_formats/obj/","title":"OBJ","text":""},{"location":"file_formats/obj/#object-format-for-meshes","title":"Object format for meshes","text":""},{"location":"file_formats/obj/#what-is-a-obj-file","title":"What is a .obj file ?","text":"<ul> <li>A file containing informations about the geometry of 3D objects</li> <li>It can support colors and additional informations</li> <li>Can be modelled in Blender for example </li> <li>Defined by polygon faces (and so vertexes / points), normals, curves, texture maps and surfaces</li> <li>.obj is a vector size meaning there is no maximum file size</li> </ul>"},{"location":"file_formats/obj/#useful-links","title":"Useful links","text":"<p>Quote</p> <ul> <li>Everything You Need to Know About Using OBJ Files</li> <li>Wikipedia</li> </ul>"},{"location":"file_formats/obj/#vertex-data","title":"Vertex data","text":"<p>A vertex is a point where the corners of a face / polygon meet. Vertex statements begin with the letter v and contain the spatial variables x, y, z, one optional variable w and variable values from 0-1</p>"},{"location":"file_formats/obj/#uv","title":"UV","text":"<p>Defines how a 3D odel is mapped onto a 2D surface such as a computer display and deterine how to apply textures to the 3D object. They are sometimes called \"texture vertexes\". UV statements starts with \"vt\".</p>"},{"location":"file_formats/obj/#vertex-normal","title":"Vertex normal","text":"<p>Can be constructed using the cross product between two edges in a particular direction. Defines shading and brightness by indicating the direction of a light source. Statements starts with \"vn\" and contains the space variables x, y, z.</p>"},{"location":"file_formats/obj/#parameter-space-vertexes","title":"Parameter space vertexes","text":"<p>Free form surface control points. Statements begin with \"vp\".</p>"},{"location":"file_formats/obj/#surface-data","title":"Surface data","text":""},{"location":"file_formats/obj/#element-data","title":"Element data","text":"<p>Other elements that you can include are points (p), lines (l), faces (f), curves and 2d curves.</p>"},{"location":"file_formats/obj/#grouping-data","title":"Grouping data","text":""},{"location":"file_formats/obj/#display-and-rendering-data-attributes","title":"Display and rendering data attributes","text":""},{"location":"file_formats/segy/","title":"SEGY","text":"<p>Info</p> <p>The SEGY (Shot and Common Envelopes with GY data) file format is a standard used in the oil and gas exploration industry to store and exchange seismic data. SEGY files contain data acquired through the process of seismic reflection, which involves sending acoustic waves into the Earth's subsurface and recording the reflections of these waves to create images of the subsurface structure.</p> <p>Quote</p> <ul> <li>SEG Wiki</li> </ul> <p></p> <p>Key features of the SEGY file format include:</p> <ol> <li> <p>Binary Format: SEGY files are binary files that store seismic data in a structured manner. The binary data represents seismic traces, each of which corresponds to a recorded reflection.</p> </li> <li> <p>Header Information: SEGY files have a series of textual and binary headers that precede the actual seismic data. These headers contain metadata information such as survey parameters, acquisition details, and other relevant information about the seismic data.</p> </li> <li> <p>Trace Data: The bulk of the SEGY file consists of seismic trace data. Each trace represents a recorded seismic signal at a particular location and time. The trace data is usually stored as a series of numeric values representing the amplitude of the reflected waves.</p> </li> <li> <p>Trace Headers: Along with trace data, SEGY files include trace headers containing additional information specific to each seismic trace. This information may include details such as trace number, source-receiver distance, and timing information.</p> </li> <li> <p>Standardized Specifications: The SEGY file format is governed by industry standards, and its specifications are maintained by organizations such as the Society of Exploration Geophysicists (SEG). This standardization ensures that SEGY files can be exchanged and interpreted consistently across different seismic data processing and interpretation systems.</p> </li> </ol> <p>SEGY files are widely used in the oil and gas exploration industry for storing and exchanging seismic data collected during exploration activities. The format has been in use for several decades and has become a de facto standard for seismic data interchange. The binary nature of SEGY files makes them efficient for storing large volumes of seismic data, and the standardized headers facilitate interoperability between different seismic data processing software and systems.</p>"},{"location":"file_formats/xml/","title":"XML","text":"<p>Quote</p> <ul> <li>What is XML | XML Beginner Tutorial | Learn XML with Demo in 10 min</li> <li>Wikipedia Extensible Markup Language</li> <li>XML formatter</li> </ul>"},{"location":"file_formats/xml/#about","title":"About","text":"<ul> <li>XML = Extensible Markup Language</li> <li>You can use you own tags &lt;&gt; so it can be extended to any need</li> <li>It is a W3C recommendation</li> <li>It's a software and hardware independent data exchange format</li> <li>Both human and machine readable</li> <li>XML uses a Document Typed Definition (DTD) or XML schema to describe the data</li> <li>XML is not a replacement of HTML</li> <li>XML has no function but to store informations: someone must write a separate code to interpret its data</li> <li>XML has a high degree of persistency i.e. it is very stable through time</li> </ul> <p>Other exchange formats:</p> <ul> <li>WITSMl (XML for seismic acquisition)</li> <li>RESQML</li> </ul> <p>World Wide Web consortium recommends:</p> <ul> <li>XML (Extensible Markup Language)</li> <li>XPath (XML Path Language)</li> <li>XSchema (XML Schema Language)</li> <li>XSL (Extensible Style Language)</li> <li>XQuery (Extensible Query Language)...</li> </ul>"},{"location":"file_formats/xml/#xml-elements","title":"XML elements","text":""},{"location":"file_formats/xml/#xml-declaration","title":"XML declaration","text":"<p>Tells the reader program which version of XML will be used.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ITF-8\"?&gt;\n</code></pre>"},{"location":"file_formats/xml/#values-always-quoted","title":"Values (always quoted)","text":"<pre><code>&lt;number&gt; x=\"1.2\" &lt;/number&gt;\n</code></pre>"},{"location":"file_formats/xml/#element-the-root-element-if-the-first-element-to-be-created","title":"Element (the root element if the first element to be created)","text":"<pre><code>&lt;name&gt; toto &lt;/name&gt;\n</code></pre>"},{"location":"file_formats/xml/#empty-elements","title":"Empty elements","text":"<pre><code>&lt;point x=\"1.23\" y=\"4.56\" z=\"7.97\" /&gt;\n</code></pre>"},{"location":"file_formats/xml/#tags","title":"Tags","text":"<pre><code>&lt;name&gt; toto &lt;/name&gt;\n</code></pre>"},{"location":"file_formats/xml/#attributes-of-an-element-a-way-of-storing-data-child-element-is-another-way","title":"Attributes of an element (a way of storing data, child element is another way)","text":"<pre><code>&lt;name font=\"arial\"&gt;\n\n### Entities\n\n```xml\n&lt;equation&gt; a &amp;lt; b &lt;/equation&gt;\n</code></pre>"},{"location":"file_formats/xml/#pcdata-parsed-character-data","title":"PCDATA (Parsed Character Data)","text":"<p>Parsed text between start-tag and end-tag</p> <pre><code>&lt;name&gt; toto &lt;/name&gt;\n</code></pre>"},{"location":"file_formats/xml/#cdata-character-data","title":"CDATA (Character Data)","text":"<p>CDATA will not be parsed.</p> <pre><code>&lt;![CDATA[*p = &amp;q; b = (i &lt;= 3);]]&gt;\n</code></pre>"},{"location":"file_formats/xml/#creation-and-basic-rules","title":"Creation and basic rules","text":"<ul> <li>Create a file with the xml extension</li> <li>Add an XML prolog</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n</code></pre> <ul> <li>Create a root tag and other sub-tags tags</li> <li>Each tag has a start  and an end :</li> <li>Tags are case sensitive</li> <li>White spaces are preserved (HTML mix multiples spaces into a single but not xml)</li> <li>Can not start a name using \"xml\"</li> </ul> <pre><code>&lt;root&gt;\n\n&lt;child&gt;\n\n&lt;subchild&gt; ... &lt;/subchild&gt;\n\n&lt;/child&gt;\n\n&lt;/root&gt;\n</code></pre>"},{"location":"file_formats/xml/#attributes","title":"Attributes","text":"<ul> <li>If necessary, creates attributes like following. Attributes must be quoted.</li> </ul> <pre><code>&lt;friendList&gt;\n\n&lt;friend gender=\"male\"&gt;\n\n&lt;name&gt; Alex &lt;/name\n\n&lt;age&gt; 25 &lt;/age&gt;\n\n&lt;/friend&gt;\n\n&lt;/friendList&gt;\n</code></pre>"},{"location":"file_formats/xml/#dealing-with-reserved-symbols","title":"Dealing with reserved symbols","text":"<ul> <li>Some symbols already have a meaning in xml, therefore use the reference symbol</li> </ul> <p>This will not work:</p> <pre><code>&lt;eligibility&gt; age &gt; 18 &lt;/eligibility&gt;\n</code></pre> <p>But instead, write this:</p> <p><pre><code>&lt;eligibility&gt; age &amp;gt; 18 &lt;/eligibility&gt;\n</code></pre> \ufffc</p>"},{"location":"file_formats/xml/#commenting-the-code","title":"Commenting the code","text":"<pre><code>&lt;!-- This is a comment --&gt;\n\n&lt;!-- This is an invalid -- comment --&gt;\n</code></pre>"},{"location":"file_formats/xml/#using-prefixes-or-namespaces","title":"Using prefixes or namespaces","text":"<ul> <li> <p>When using prefixes in xml, namespace for the prefix must be defined.</p> </li> <li> <p>The namespaces are \"h:\" or \"f:\"</p> <ul> <li>All child elements with the same prefix are associated with the same namespace</li> <li>\u00ab\u00a0xmlns\u00a0\u00bb stands for xml namespaces</li> <li>the namespace is declared with double dots \u00ab\u00a0:\u00a0\u00bb and its name is just after it (here f and h namespaces), followed by an URL</li> </ul> </li> </ul> <pre><code>&lt;root&gt;\n\n&lt;h:table xmlns:h=\u2018https://www.w3.org/TR/html\u2019&gt;\n\n&lt;h:tr&gt;\n\n&lt;h:td&gt; Apples &lt;/h:td&gt;\n\n&lt;h:td&gt; Bananas &lt;/h:td&gt;\n\n&lt;/h:tr&gt;\n\n&lt;/h:table&gt;\n\n&lt;f:table xmlns:f-\u2018https://www.w3.org/furniture\u2019&gt;\n\n&lt;f:name&gt; Coffee Table &lt;/f:name&gt;\n\n&lt;f:width&gt; 10 &lt;/f:width&gt;\n\n&lt;f:height&gt; 20 &lt;/f:height&gt;\n\n&lt;/f:table&gt;\n\n&lt;/root&gt;\n</code></pre> <p>Namespaces can also be declared in the xml root element</p> <pre><code>&lt;root xmlns:h=\u2018https://www.w3.org/TR/html4/\u2018\n\nxmlns:f=\u2018https://www.w3.org/furniture\u2019&gt;\n\n&lt;h:table xmlns:h=\u2018https://www.w3.org/TR/html\u2019&gt;\n\n&lt;h:tr&gt;\n\n&lt;h:td&gt; Apples &lt;/h:td&gt;\n\n&lt;h:td&gt; Bananas &lt;/h:td&gt;\n\n&lt;/h:tr&gt;\n\n&lt;/h:table&gt;\n\n&lt;f:table xmlns:f-\u2018https://www.w3.org/furniture\u2019&gt;\n\n&lt;f:name&gt; Coffee Table &lt;/f:name&gt;\n\n&lt;f:width&gt; 10 &lt;/f:width&gt;\n\n&lt;f:height&gt; 20 &lt;/f:height&gt;\n\n&lt;/f:table&gt;\n\n&lt;/root&gt;\n</code></pre> <p>Default namespaces can be defined for an element and all the child elements will use it</p> <pre><code>&lt;table xmlns=\u2018https://www.w3.org/TR/html4/\u2019&gt;\n\n&lt;tr&gt;\n\n&lt;td&gt; Apples &lt;/td&gt;\n\n&lt;td&gt; Bananas &lt;/td&gt;\n\n&lt;tr&gt;\n\n&lt;/table&gt;\n</code></pre> <p>is the same as:</p> <pre><code>&lt;h:table xmlns:h=\u2018https://www.w3.org/TR/html\u2019&gt;\n\n&lt;h:tr&gt;\n\n&lt;h:td&gt; Apples &lt;/h:td&gt;\n\n&lt;h:td&gt; Bananas &lt;/h:td&gt;\n\n&lt;/h:tr&gt;\n\n&lt;/h:table&gt;\n</code></pre>"},{"location":"file_formats/xml/#cdata-sections","title":"CDATA sections","text":"<p>Instructs the parser to ignore most markup characters</p> <pre><code>&lt;![CDATA[[ if( *pi &lt; z ) ]]&gt;\n</code></pre>"},{"location":"file_formats/xml/#document-type-definition-dtd","title":"Document Type Definition (DTD)","text":"<ul> <li>Define the legal building bloacks of an XML document</li> <li>Each XML file can carry a description of its own format with it</li> <li>Different people can agree to use a common DTD for interchanging data</li> </ul>"},{"location":"file_formats/xml/#define-elements-general-case","title":"Define elements (general case)","text":"<pre><code>&lt;!ELEMENT element_name category&gt;\n&lt;!ELEMENT element_name (element_content)&gt;\n</code></pre>"},{"location":"file_formats/xml/#empty-elements_1","title":"Empty elements","text":"<pre><code>&lt;!ELEMENT element_name EMPTY&gt;\n</code></pre>"},{"location":"file_formats/xml/#elements-with-only-character-data","title":"Elements with only character data","text":"<pre><code>&lt;!ELEMENT element_name (#PCDATA)&gt;\n</code></pre>"},{"location":"file_formats/xml/#elements-with-any-content","title":"Elements with any content","text":"<pre><code>&lt;!ELEMENT element_name ANY&gt;\n</code></pre>"},{"location":"file_formats/xml/#elements-with-children-sequences","title":"Elements with children (sequences)","text":"<pre><code>&lt;!ELEMENT element_name (child_element_name)&gt;\n\n&lt;!ELEMENT element_name (child_element_name, child_element_name_1, ...)&gt;\n</code></pre>"},{"location":"file_formats/xml/#number-of-occurence-of-the-same-child-element","title":"Number of occurence of the same child element","text":""},{"location":"file_formats/xml/#exactly-one-child","title":"Exactly one child","text":"<pre><code>&lt;!ELEMENT element_name (child_name)&gt;\n</code></pre>"},{"location":"file_formats/xml/#minimum-one-child","title":"Minimum one child","text":"<pre><code>&lt;!ELEMENT element_name (child_name+)&gt;\n</code></pre>"},{"location":"file_formats/xml/#zero-or-more-children","title":"Zero or more children","text":"<pre><code>&lt;!ELEMENT element_name (child_name*)&gt;\n</code></pre>"},{"location":"file_formats/xml/#zero-or-one-child","title":"Zero or one child","text":"<pre><code>&lt;!ELEMENT element_name (child_name?)&gt;\n</code></pre> <p>Either, or</p> <pre><code>&lt;!ELEMENT element_name (either | or)&gt;\n</code></pre>"},{"location":"file_formats/xml/#mixed-content","title":"Mixed content","text":"<pre><code>&lt;!ELEMENT element_name (#PCDATA | choice_1 | choice_2 | ...)&gt;\n</code></pre>"},{"location":"file_formats/xml/#dtd-attributes","title":"DTD attributes","text":"<pre><code>&lt;!ATTLIST element_name attribute_name attribute_type default_value&gt;\n\n&lt;!ATTLIST book isbn CDATA #REQUIRED&gt;\n</code></pre>"},{"location":"file_formats/xml/#default-values","title":"Default values","text":"<pre><code>'#REQUIRED' -&gt; the attribute value must be included in the element\n\n'#IMPLIED' -&gt; the attribute does ot have to be included\n\n\"value\" -&gt; an attribute can be given any legal value as a default\n\n'#FIXED' \"value\" -&gt; the attribute value is fixed\n</code></pre>"},{"location":"file_formats/xml/#dtd-internal-entities","title":"DTD internal entities","text":"<pre><code>&lt;!ENTITY entity_name \"entity_value\"&gt;\n</code></pre>"},{"location":"file_formats/xml/#dtd-external-entities","title":"DTD external entities","text":"<p>...</p> <p>Example:</p> <pre><code>&lt;!ELEMENT author (#PCDATA)&gt;\n\n&lt;!ELEMENT book (title, author, character+)&gt;\n\n&lt;!ATTLIST book isbn CDADA #REQUIRED&gt;\n\n&lt;!ELEMENT character (name, friend-of?, since, qualification)&gt;\n\n&lt;!ELEMENT friend_of (#PCDATA)&gt;\n\n&lt;!ELEMENT name (#PCADATA)&gt;\n\n&lt;!ELEMENT qualification (#PCDATA)&gt;\n\n&lt;!ELEMENT since (#PCDATA)&gt;\n\n&lt;!ELEMENT title (#PCDATA)&gt;\n</code></pre> <p>Problems of the DTD</p> <ul> <li>The syntax is different for XML and DTD so there is a need for two different parsers and there is more work.</li> <li>A soution can be X-Schemas</li> </ul>"},{"location":"file_formats/xml/#x-schemas","title":"X-Schemas","text":"<ul> <li>w3.org</li> <li>xml.com</li> </ul>"},{"location":"file_formats/xml/#about_1","title":"About","text":"<ul> <li>Contains document information such as the data-type of the elements, ranges and values and how data is related to another piece of data</li> <li>'xs:sequence' defines an ordered sequence of sub-elements</li> <li>'xs:choice' choice between several possible particles</li> <li>'xs:all' unordered set of elements</li> <li>'simpleType' is for data-types holding values only</li> <li>'complexType' is for data-types holding attributes, non text children...</li> </ul>"},{"location":"file_formats/xml/#definition","title":"Definition","text":"<pre><code>&lt;? xml version='1.0' encoding='UTF-8'?&gt;\n\n&lt;xs:schema xmlns:xs='https://w3.org/2001/XMLSchema'&gt;\n\n.../...\n\n&lt;/xd:schema&gt;\n</code></pre>"},{"location":"file_formats/xml/#creating-personalized-types","title":"Creating personalized types","text":"<p>Lets create a new type derived from xs:string with a max number of characters equal to 32:</p> <pre><code>&lt;xs:simpleType name='type_name'&gt;\n\n&lt;xs:restriction base='xs:string'&gt;\n\n&lt;xs:maxLength value='32'/&gt;\n\n&lt;/xs:restriction&gt;\n\n&lt;/xs/simpleType&gt;\n</code></pre>"},{"location":"file_formats/xml/#groups","title":"Groups","text":"<p>Containers holding a set of elements or attributes that can be used to describe complex types</p> <pre><code>&lt;!--definition of an element group --&gt;\n\n&lt;xs:group name ='mainBookElements'&gt;\n\n&lt;xs:sequence&gt;\n\n&lt;xs:element name='title' type='nameType'/&gt;\n\n&lt;xs:element name='author' type='nameType'/&gt;\n\n&lt;/xs:sequence&gt;\n\n&lt;/xs:group&gt;\n\n&lt;!-- definition of an attribute group --&gt;\n\n&lt;xs:attributeGroup name='bookAttributes'&gt;\n\n&lt;xs:attribute name='isbn' type='isbnType' use='required'/&gt;\n\n&lt;xs:attribute name='available' type='xs:string'/&gt;\n\n&lt;/xs:attributeGroup&gt;\n\n&lt;!-- definition of a new complexType bookType --&gt;\n\n&lt;xs:complexType name='bookType'&gt;\n\n&lt;xs:sequence&gt;\n\n&lt;xs:group ref='mainBookElements'/&gt;\n\n&lt;xs:element name='character' type='characterType' minOccurs='0' maxOccurs='unbounded'/&gt;\n\n&lt;/xs:sequence&gt;\n\n&lt;xs:complexType&gt;\n</code></pre> <p>Examples:</p> <pre><code>&lt;xs:element name='name' type='xs:string'/&gt;\n\n&lt;xs:element name='friend-of' type='xs:string' minOccurs='0' maxOccurs='unbounded'/&gt;\n\n&lt;xs:element name='since' type='xs:date'/&gt;\n\n&lt;xs:element name='qualification' type='xs:string'/&gt;\n\nReal example:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n\n&lt;xs:element name=\"book\"&gt;\n\n&lt;xs:complexType&gt;\n\n&lt;xs:sequence&gt;\n\n&lt;xs:element name=\"title\" type=\"xs:string\"/&gt;\n\n&lt;xs:element name=\"author\" type=\"xs:string\"/&gt;\n\n&lt;xs:element name=\"character\" minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;\n\n&lt;xs:complexType&gt;\n\n&lt;xs:sequence&gt;\n\n&lt;xs:element name=\"name\" type=\"xs:string\"/&gt;\n\n&lt;xs:element name=\"friend-of\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n\n&lt;xs:element name=\"since\" type=\"xs:date\"/&gt;\n\n&lt;xs:element name=\"qualification\" type=\"xs:string\"/&gt;\n\n&lt;/xs:sequence&gt;\n\n&lt;/xs:complexType&gt;\n\n&lt;/xs:element&gt;\n\n&lt;/xs:sequence&gt;\n\n&lt;xs:attribute name=\"isbn\" type=\"xs:string\u201c use=\u201crequired\u201d/&gt;\n\n&lt;/xs:complexType&gt;\n\n&lt;/xs:element&gt;\n\n&lt;/xs:schema&gt;\n</code></pre>"},{"location":"file_formats/xml/#x-path","title":"X-Path","text":""},{"location":"file_formats/xml/#about_2","title":"About","text":"<ul> <li>Locate information in an XML document</li> <li>Represent node adresses following the document's tree structure (like a unix directory)</li> <li>A path starting with <code>/</code> is an absolute path</li> <li>A path starting with <code>//</code> encompasses all elements in the document that fullfill the criteria</li> <li>So <code>/book/character/name</code> selects all the name elements of all the character elements of the book element</li> <li>So <code>//name</code> selects all the name elements in the document</li> <li>Wildcards <code>*</code> can be used to select unknown XML elements</li> <li>So <code>/book/character/*</code> selects all child elements of all character elements of the book element</li> <li>So <code>/book/*/name</code> selects all name elements that are grandchild elements of the book element</li> <li>So <code>//*</code> selects all elements in the current document</li> </ul>"},{"location":"geoscience/seismic/born_modelling/","title":"Born Modelling","text":"<p>Overview</p> <p>The Born modeling in seismic exploration is a linearized approximation of the wave equation used to describe the relationship between the perturbations in the subsurface properties and the resulting perturbations in the recorded seismic data. It's named after Max Born, a physicist who contributed to the theory of wave propagation.</p>"},{"location":"geoscience/seismic/born_modelling/#formulations","title":"Formulations","text":""},{"location":"geoscience/seismic/born_modelling/#mathematical-formulation","title":"Mathematical Formulation","text":"<p>Why Born Modeling?</p> <p>In seismic inversion, the goal is to estimate the subsurface model by comparing observed and modeled seismic data. The Born modeling equation is used iteratively to update the model until the simulated data match the observed data. This process helps in recovering information about subsurface structures, such as the distribution of velocity and density.</p> <p>Born modeling equation</p> \\[ \\delta \\mathbf{d} = \\mathbf{G} \\cdot \\delta \\mathbf{m} = \\delta \\mathbf{d}(\\mathbf{x}, t) = \\int_{V} \\mathbf{G}(\\mathbf{x}, \\mathbf{y}, t) \\cdot \\delta \\mathbf{m}(\\mathbf{y}) \\, d\\mathbf{y} \\] <p>Where:</p> <ul> <li>\\(\\delta \\mathbf{d}\\) is the perturbation in the recorded seismic data</li> <li>\\(\\delta \\mathbf{m}\\) is the perturbation in the subsurface model (changes in velocity, density, or other parameters)</li> <li>\\(\\mathbf{G}\\) is the Born operator, representing the linearized relationship between the perturbations in the model and the resulting perturbations in the data</li> <li>\\(\\mathbf{x}\\) and \\(\\mathbf{y}\\) are spatial coordinates</li> <li>\\(t\\) is time</li> <li>\\(V\\) represents the volume of the subsurface</li> </ul> <p>Warning</p> <p>Born modeling is based on the assumption that the perturbations in the subsurface are small enough to be treated linearly. This is a reasonable approximation in many cases, especially when dealing with small contrasts in velocity or density.</p>"},{"location":"geoscience/seismic/born_modelling/#born-modelling-steps","title":"Born modelling steps","text":"<ol> <li> <p>Wave Equation:</p> <p>Start with the full wave equation describing seismic wave propagation in the subsurface. This is typically a second-order partial differential equation involving the wavefield \\(p\\), velocity \\(v\\), and density \\(\\rho\\).</p> </li> <li> <p>Linearization:</p> <p>Linearize the wave equation by assuming small perturbations in the subsurface properties. This involves expressing the wavefield, velocity, and density as the sum of their background values and perturbations.</p> </li> <li> <p>Born Approximation:</p> <p>Apply the Born approximation, neglecting higher-order terms in the perturbation series. This leads to a simplified linearized equation that relates the perturbations in the seismic data to the perturbations in the subsurface model.</p> </li> <li> <p>Born Modeling Equation:</p> <p>Obtain the Born modeling equation of the form \\(\\delta \\mathbf{d} = \\mathbf{G} \\cdot \\delta \\mathbf{m}\\), where \\(\\delta \\mathbf{d}\\) is the perturbation in the recorded seismic data, \\(\\delta \\mathbf{m}\\) is the perturbation in the subsurface model, and \\(\\mathbf{G}\\) is the Born operator.</p> </li> </ol>"},{"location":"geoscience/seismic/born_modelling/#algorithmic-implementation","title":"Algorithmic Implementation","text":"<ol> <li> <p>Discretization:     Discretize the subsurface into a grid or mesh. Represent the wavefield, velocity, and density at each grid point.</p> </li> <li> <p>Wavefield Computation:</p> <p>Use a numerical method (e.g., finite-difference or finite-element) to solve the linearized wave equation for the perturbed wavefield. This involves updating the wavefield iteratively in time.</p> </li> <li> <p>Forward Modeling:</p> <p>Compute the perturbed seismic data by applying the Born modeling equation. This involves integrating the Born operator over the subsurface volume.</p> </li> <li> <p>Inverse Problem:</p> <p>In seismic inversion, compare the perturbed seismic data with the observed data. Adjust the subsurface model iteratively to minimize the misfit between the modeled and observed data.</p> </li> <li> <p>Model Update:</p> <p>Update the subsurface model using an optimization algorithm (e.g., gradient-based methods). The gradient is computed through the Born modeling process.</p> </li> <li> <p>Iteration:</p> <p>Repeat the forward modeling and inversion steps iteratively until a satisfactory match between modeled and observed data is achieved.</p> </li> </ol>"},{"location":"geoscience/seismic/born_modelling/#born-operator","title":"Born Operator","text":"<ul> <li> <p>The Born operator \\(\\mathbf{G}\\) describes the sensitivity of the seismic data to changes in the subsurface model. It depends on the geometry of the acquisition setup, wave propagation characteristics, and the subsurface structure.</p> </li> <li> <p>Computation of \\(\\mathbf{G}\\) involves solving an [[Eikonal equation]] to calculate travel times and performing integrations over the subsurface volume.</p> </li> <li> <p>The efficiency of Born modeling is often enhanced using numerical techniques such as pre-computed Green's functions and parallel computing.</p> </li> </ul>"},{"location":"geoscience/seismic/eikonal_equation/","title":"Eikonal equation","text":"<p>Overview</p> <p>The eikonal equation describes the travel time of a seismic wavefront through a medium. Its general form is the following:</p> \\[ |\\Delta u(x) | = F(x) \\] \\[ F(x) in \\Omega \\in R^2 \\space or \\space R^3, F(x) 0 \\] <p>\\(u\\) is a known function given along a prescribed curve or surface \\(\\Gamma\\) in \\(R^3\\). The Eikonal is part of a broader Hamilton-Jacobi equations set of the form \\(\\mathcal{H}(u_x,u_y,u_z,x,y,z)=0\\). The Hamiltonian generalized hamiltonian function is \\(\\mathcal{H}=|\\Delta u(x)|-F(x)=0\\)</p>"},{"location":"geoscience/seismic/eikonal_equation/#mathematical-expressions","title":"Mathematical expressions","text":""},{"location":"geoscience/seismic/eikonal_equation/#isotropic-heterogeneous-eikonal","title":"Isotropic Heterogeneous Eikonal","text":"<p>Isotropic Heterogeneous Eikonal</p> \\[ |\\nabla T|^2 = \\frac{1}{v^2} \\] <p>With:</p> <ul> <li>\\(T\\) is the travel time of the seismic wave,</li> <li>\\(\\nabla\\) is the gradient operator,</li> <li>\\(|\\nabla T|^2\\) represents the squared magnitude of the gradient of the travel time,</li> <li>\\(v\\) is the velocity of the seismic wave, which can vary spatially in heterogeneous media.</li> </ul> <p>Solving this equation provides the travel time information for the seismic wavefront at different locations in the heterogeneous medium.</p> <p>Numerical methods, such as the [[Fast Marching]] Method or the Fast Sweeping Method, are commonly employed to solve the eikonal equation in practical applications.</p>"},{"location":"geoscience/seismic/eikonal_equation/#algorithms-to-solve-the-eikonal-equation","title":"Algorithms to solve the Eikonal equation","text":"<p>There are various numerical methods to solve the Eikonal equation efficiently. Here are some common methods:</p> <ol> <li> <p>Fast Marching Method (FMM):</p> <ul> <li>Description: The Fast Marching Method is an efficient algorithm for solving the Eikonal equation. It iteratively updates the travel times from seed points in a wavefront-propagation manner.</li> <li>Advantages: Fast and accurate for isotropic and simple anisotropic media.</li> <li>Limitations: Less suitable for highly anisotropic media.</li> </ul> </li> <li> <p>Fast Sweeping Method:</p> <ul> <li>Description: The Fast Sweeping Method is another approach to solve the Eikonal equation. It involves iteratively sweeping through the grid in a specific order and updating travel times based on neighboring points.</li> <li>Advantages: Efficient for parallel computation, suitable for anisotropic media.</li> <li>Limitations: May require careful handling of complex boundary conditions.</li> </ul> </li> <li> <p>Level Set Methods:</p> <ul> <li>Description: Level Set Methods represent the evolving wavefront as the zero level set of a higher-dimensional function. The Eikonal equation is solved using techniques from level set methods.</li> <li>Advantages: Handles evolving interfaces well, applicable to various geometric settings.</li> <li>Limitations: Can be computationally demanding.</li> </ul> </li> <li> <p>Fast Iterative Method (FIM):</p> <ul> <li>Description: The Fast Iterative Method is an iterative numerical approach to solving the Eikonal equation. It updates the travel times using an iterative process.</li> <li>Advantages: Can be computationally efficient, suitable for parallelization.</li> <li>Limitations: May require tuning of parameters.</li> </ul> </li> <li> <p>Finite Difference Methods:</p> <ul> <li>Description: Finite difference methods can be employed to discretize the Eikonal equation in both space and time. The resulting system of equations is then solved iteratively.</li> <li>Advantages: Versatile, applicable to various grid types.</li> <li>Limitations: Computational demands may increase with higher accuracy.</li> </ul> </li> <li> <p>Characteristics Method:</p> <ul> <li>Description: The Characteristics Method involves solving ordinary differential equations along characteristic curves derived from the Eikonal equation.</li> <li>Advantages: Can handle complex velocity models.</li> <li>Limitations: Computationally more intensive in certain scenarios.</li> </ul> </li> <li> <p>Fast Iterative Method (FIM):</p> <ul> <li>Description: The Fast Iterative Method is an iterative approach to solving the Eikonal equation. It iteratively updates travel times based on local information.</li> <li>Advantages: Can be computationally efficient, suitable for parallelization.</li> <li>Limitations: Convergence may depend on the problem setup.</li> </ul> </li> <li> <p>Finite Element Methods (FEM):</p> <ul> <li>Description: Finite element methods can be adapted to solve the Eikonal equation by discretizing the problem and solving the resulting system iteratively.</li> <li>Advantages: Versatile, applicable to complex geometries.</li> <li>Limitations: Computational demands may be higher for certain applications.</li> </ul> </li> </ol> <p>The choice of method depends on factors such as the nature of the subsurface, the desired level of accuracy, and available computational resources. Fast Marching and Fast Sweeping are particularly popular for their efficiency in many practical scenarios, while other methods may be more suitable for specific applications or complex geological settings.</p>"},{"location":"geoscience/seismic/fast_marching_method/","title":"Fast Marching Method","text":"<p>Overview</p> <p>The Fast Marching Method (FMM) is a numerical algorithm used to solve the [[Eikonal equation]], which describes the travel time of a wavefront through a medium. It is particularly useful in seismic modeling, image processing, and various other applications where the evolution of a wavefront needs to be computed efficiently. The Fast Marching Method is widely used in applications such as seismic imaging, medical imaging, and computer graphics, where accurate and fast computation of wavefront propagation is essential.</p> <p>Refer to Sethian (1996) &amp; Sethian (1999) &amp; Rawlinson and Sanbridge (2004) for more details on FMM.</p> <p>Strengths</p> <ul> <li>unconditional stability (robust)</li> <li>low computation time (efficient)</li> <li>handle velocity models of arbitrary complexities</li> <li>computational cost is \\(o(Nlog(N))\\) where N is the number of grid points</li> </ul> <p>Weaknesses</p> <ul> <li>Raw FMM can only locate first arrival phases in continuous media</li> <li>Like most of the finite difference Eikonal solvers, struggle with high velocity gradients (adressed Kim and Cook, 1999)</li> <li>Wavefront may have discontinuous travel time gradients (when wavefront self intersect = multi-pathing) and later arriving information is discarded. The Eikonal cannot be easily solved where \\(\\Delta_x T\\) is discontinuous because it needs it to be solved... (Adressed Popovici, 1999 using the entropy satisfying upwind scheme \"once a point burns, it stays burnt\")</li> <li>High wavefront curvature cause accuracy loss because first order FDM struggles at describing this trend</li> <li>Second, the original fast marching algorithm does not work when the group velocity vector is not aligned with the phase velocity vector, as in the case of the TTI eikonal equation <sup>1</sup></li> </ul>"},{"location":"geoscience/seismic/fast_marching_method/#overview","title":"Overview","text":"<p>Here's a basic overview of how the Fast Marching Method works:</p> <ol> <li>Initialization:</li> <li>Start with a known source point (or points) where the wavefront originates.</li> <li>Set the travel time at the source point(s) to zero.</li> <li> <p>Assign initial estimates of travel time to neighboring points based on the local velocity information.</p> </li> <li> <p>Ordered List (Heap):</p> </li> <li> <p>Maintain an ordered list of grid points (or nodes) based on their current estimates of travel time. A priority queue or heap data structure is often used for this purpose.</p> </li> <li> <p>Fast Marching:</p> </li> <li> <p>While the ordered list is not empty:</p> <ul> <li>Extract the point with the smallest current estimate of travel time from the list.</li> <li>Update the travel time estimates of its neighbors based on the local velocity information and the Eikonal equation.</li> <li>Reorder the list to maintain its order.</li> </ul> </li> <li> <p>Termination:</p> </li> <li>Continue the process until the wavefront reaches the desired locations or covers the entire domain.</li> </ol> <p>From Sambridge (2005) <sup>2</sup>:</p>      Principle behind the tracking of reflection and transmission traveltimes. The incident wavefront is tracked to all points on the wavefront, before FMM is reinitialised in the incident (for reflection) or adjacent (for transmission) layer.         Tracking of a single reflection arrival through a medium containing a single interface. Wavespeed varies linearly with depth within a layer, so each ray path segment is described by a circular arc. Wavefronts are plotted at 0.4 s intervals in all cases. Receivers are denoted by grey triangles and the source by a dark grey star. (a)-(d) Wavefronts and rays; (e)-(h) traveltime accuracy of four different schemes using four different grid sizes (1000 m, 500 m, 250 m, 125 m)."},{"location":"geoscience/seismic/fast_marching_method/#historical-note","title":"Historical note","text":"<p>Fast marching (Sethian, 1999) and fast sweeping (Zhao, 2005) are the two most commonly used algorithms for numerically solving an eikonal equation. Fast marching methods rely on the fact that the direction of energy propagation of a wavefront, given by the group velocity, is aligned with the direction of wave propagation, given by the phase velocity. While this is true for isotropic media, the phase velocity vector in an anisotropic medium deviates from the group velocity vector. Therefore, the original fast marching algorithm cannot be reliably used to solve the anisotropic eikonal equation. This limitation led to the development of a more generally applicable version of the fast marching method known as the ordered upwind method (Sethian and Vladimirsky, 2003). However, implementation became significantly more complex compared to the original fast marching method, in addition to an increase in the computational cost. <sup>1</sup></p>"},{"location":"geoscience/seismic/fast_marching_method/#equations","title":"Equations","text":"<p>Popovici (1999), Chopp (2001), and Popovici and Sethian (2002) <sup>3</sup></p> \\[ \\left[ \\sqrt{max(D_a^{-x} T | -D_b^{+x} T| 0) + max(D_c^{-y} T | -D_d^{+y} T| 0) + max(D_e^{-z} T | -D_f^{+z} T| 0)}\\right] _{ijk} = s_{ijk} \\] <p>where:</p> <ul> <li>Upwind operators are denoted by \\(D\\)</li> <li>First order in \\(-x\\) direction (backward FDM) is \\(\\(D_1^{-x} T_i = \\frac{T_i - T_{i-1}}{\\delta x}\\)\\)</li> <li>Second order in \\(-x\\) direction (backward FDM) is \\(\\(D_1^{-x} T_i = \\frac{3T_i - 4T_{i-1} + T_{i-2}}{2\\delta x}\\)\\)</li> <li>\\((i,j,k)\\) are Cartesian grid increment variables \\((x,y,z)\\) coordinate system</li> <li>\\(a,b,c,d,e,f\\) are integer values describing the order of the FDM scheme</li> <li>\\(\\delta x\\) is the grid spacing in x</li> </ul> <ol> <li> <p>Umair Bin Waheed. A fast marching eikonal solver for tilted transversely isotropic media. GEOPHYSICS, 85:1\u201354, 09 2020. doi:10.1190/geo2019-0799.1.\u00a0\u21a9\u21a9</p> </li> <li> <p>Nicholas Rawlinson and Malcolm Sambridge. The fast marching method: an effective tool for tomographic imaging and tracking multiple phases in complex layered media. Exploration Geophysics - EXPLOR GEOPHYS, 36:, 12 2005. doi:10.1071/EG05341.\u00a0\u21a9</p> </li> <li> <p>Alexander Mihai Popovici and James A. Sethian. 3\u2010d imaging using higher order fast marching traveltimes. GEOPHYSICS, 67(2):604\u2013609, 2002. doi:10.1190/1.1468621.\u00a0\u21a9</p> </li> </ol>"},{"location":"geoscience/seismic/fast_sweeping_method/","title":"Fast Sweeping Method","text":"<p>Umair Bin Waheed. A fast marching eikonal solver for tilted transversely isotropic media. <sup>1</sup></p> <p>Fast sweeping methods, on the other hand, solve an eikonal equation by sweeping the computational domain in alternating directions. The idea is that all characteristic directions can be divided into a finite number of groups and each sweeping iteration covers a group of characteristics (Zhao, 2005). The algorithm converges in a finite number of iterations and is more robust and flexible for general equations than the fast marching method.</p> <p>The complications associated with using fast marching for the anisotropic eikonal equation resulted in the fast sweeping method being the preferred algorithm for computing traveltimes in anisotropic media (Tsai et al., 2003; Luo and Qian, 2012; Waheed et al., 2015; Le Bouteiller et al., 2019).</p> <ol> <li> <p>Umair Bin Waheed. A fast marching eikonal solver for tilted transversely isotropic media. GEOPHYSICS, 85:1\u201354, 09 2020. doi:10.1190/geo2019-0799.1.\u00a0\u21a9</p> </li> </ol>"},{"location":"geoscience/seismic/full_waveform_inversion/","title":"Full Waveform Inversion","text":""},{"location":"geoscience/seismic/seismic_fundamentals/","title":"Fundamentals of seismic acquisition","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#mathematics","title":"Mathematics","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#fourrier-analysis","title":"Fourrier analysis","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#statistics","title":"Statistics","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#physics","title":"Physics","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#snells-law","title":"Snell's law","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#huygens-principle","title":"Huygen's principle","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#newtons-law-of-motion","title":"Newton's law of motion","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#hookes-law","title":"Hooke's law","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#wave-equation","title":"Wave equation","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#wave-types","title":"Wave types","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#partition-of-energy-at-interface","title":"Partition of energy at interface","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#transmission-losses","title":"Transmission losses","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#spherical-divergence","title":"Spherical divergence","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#absorption","title":"Absorption","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#transmission-losses-at-interfaces","title":"Transmission losses at interfaces","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#reciprocity","title":"Reciprocity","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#data-domains","title":"Data domains","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#naatural-domains","title":"Naatural domains","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#source-domain","title":"Source domain","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#receiver-domain","title":"Receiver domain","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#midpoint-domain","title":"Midpoint domain","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#constant-offset-domain","title":"Constant-offset domain","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#constant-azimuth-domain","title":"Constant-azimuth domain","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#unaliased-domains","title":"Unaliased domains","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#the-cross-spread-domain","title":"The cross-spread domain","text":""},{"location":"geoscience/seismic/seismic_fundamentals/#the-offset-vector-tile","title":"The offset vector tile","text":""},{"location":"geoscience/seismic/seismic_industry_history/","title":"Seismic Industry History","text":"<p>Before you get more data, get the most out of your data. (Yilmaz 2001<sup>1</sup>)</p>"},{"location":"geoscience/seismic/seismic_industry_history/#beginning-of-seismic-up-to-the-1950s","title":"Beginning of seismic (up to the 1950s)","text":""},{"location":"geoscience/seismic/seismic_industry_history/#seismoscope","title":"Seismoscope","text":"<p>Seismoscope vs Seismograph</p> <p>A seismoscope allows for the observation of ground motion, whereas a seismograph or seismometer records ground motion.</p> <p>Main seismoscopes history:</p> <ul> <li>132: First seismoscope: the Chang H\u00eang seismoscope</li> <li>1703: Mercury seismoscope by Jean de Hautefeuille</li> <li>1783: Pendulum seismoscope by Domenico Salsano</li> <li>1851: Irish geophysicist Robert Mallet (1810\u20131881) undertook the first seismic experiment.</li> </ul>"},{"location":"geoscience/seismic/seismic_industry_history/#seismograph","title":"Seismograph","text":"<p>Seismograph was invented about 100 years later in the 1880s.</p> <ul> <li>1903: First electromagnetic seismograph by Boris Galitzin</li> <li>World War 1: First seismic refraction systems to locate enemy guns</li> <li>1917: First field seismograph by Ludger Mintrop</li> </ul> <p>Development of the reflection-seismic method started at about the same time as development of the refraction method but took a little longer to achieve maturity.</p>"},{"location":"geoscience/seismic/seismic_industry_history/#going-offshore","title":"Going offshore","text":"<ul> <li>1928: Early offshore refraction seismic work and discoveries reported by Karcher (1987)</li> <li>1935: First offshore seismic reflection experiment by Maurice Ewing</li> <li>1947: Patent of the oil filled streamer by R. Paslay, G. Pavey, and P. Wipff</li> </ul> <p>Offshore and onshore seismic started to be considered as separated from 1955 Hammer (1955, p. 663\u2013664)</p>"},{"location":"geoscience/seismic/seismic_industry_history/#1950s-modern-times","title":"1950s - Modern Times","text":"<p>It is fair to assign the opening of the modern era to the introduction of the common-depth-point technique (CDP) by Harry Mayne, who filed a patent application in 1950. <sup>2</sup></p> <ul> <li>1950: Vibroseis introduction</li> <li>early 1950s: Start of magnetic recording</li> </ul>"},{"location":"geoscience/seismic/seismic_industry_history/#1960s-from-analog-to-digital-to-computers","title":"1960s - From analog to digital to computers","text":"<p>In the 1960s, the digital revolution profoundly changed seismic acquisition. We were then able to record more data by increasing the number of channels and fold of coverage. The digital revolution brought about the need to use digital computers to analyze the recorded data. That came about in the 1970s when we switched from calculators to computers. Many of the data processing algorithms, including deconvolution, velocity analysis, refraction, and residual statics corrections, normal-moveout corection and stacking, and even migration, were implemented in those years. The computer before the seventies was a person using the calculator; now the computer is a machine and the person became the seismic analyst. (Yilmaz 2001<sup>1</sup>)</p> <p>Digital recording was introduced in the early 1960s. The first digital recorder (DFS1000) was manufactured by Texas Instruments in 1963. After some rather short discussions of its merits, the technique was accepted universally and was implemented progressively. <sup>2</sup></p>"},{"location":"geoscience/seismic/seismic_industry_history/#1980s-from-2d-to-3d","title":"1980s - From 2D to 3D","text":"<p>In the 1980s, the seismic industry took another big step forward; it was now beginning to provide the oil and gas industry with 3-D images of the subsurface. We need only to examine the global reserve production curves over the past decades to see that the 3-D revolution gave a big jump from 35 to 45 years for oil and from 50 to 65 years for gas. The seismic industry was already pushing the computer industry to the limit with its need for power to handle large-scale data volumes acquired by 3-D surveys. (Yilmaz 2001<sup>1</sup>)</p> <p>The introduction of 3D seismic surveys was the next major step forward in the industry. It occurred progressively in the 1970s. In this case, the high potential of the method was recognized early. <sup>2</sup></p> <p>Development of cableless systems (introduced in the early )</p>"},{"location":"geoscience/seismic/seismic_industry_history/#1990s-from-time-to-depth","title":"1990s - From time to depth","text":"<p>Finally, in the 1990s, the seismic industry was capable of providing the oil and gas industry with images of the subsurface, not just in 3-D, but also in depth. It took years of exhaustive experimental research to test and field-prove numerous methods to accurately estimate an earth model in depth and use it to efficiently create an earth image in depth. Once again, the seismic industry has challenged the computer industry to provide cost-effective solutions for numerically intensive applications with large input-output operations, such as 3-D prestack depth migration. (Yilmaz 2001<sup>1</sup>)</p>"},{"location":"geoscience/seismic/seismic_industry_history/#1990s-from-3d-to-4d-to-4c","title":"1990s - From 3D to 4D to 4C","text":"<p>As the seismic industry made one breakthrough after another during its history, it also created new challenges for itself. Now we record not just P-waves but also converted S-waves for a wide range of objectives. Using the multicomponent seismic method, commonly known as the 4-C seismic method, we are now able to see through gas plumes caused by the reservoir below. We are able to sometimes better image the sub-salt and sub-basalt targets with the 4-C seismic method. Using the converted S-waves, we are able to detect the oil-water contact, and the top or base of the reservoir unit that we sometimes could not delineate using only P-waves. We even go further now and attempt to identify fluid types in reservoir rocks, discriminate sand from shale, and map hydrocarbon saturation, again using the 4-C seismic method. Our ultimate objective is to use the seismic method, in addition to the production and geologic data, to characterize oil and gas reservoirs accu- rately. (Yilmaz 2001<sup>1</sup>)</p> <p>Greaves and Fulp (1987) give one early account of time-lapse seismic experiments. They describe the successful monitoring of a fire-flood project in 1982\u20131983 in Texas with three repeated 3D onshore seismic surveys. Although earlier experiments had been recorded (for instance, on a gas-storage reservoir in France in 1981\u20131982, using permanent 2C geophones) (Blondin and Mari, 1986), the clarity of the images obtained by Greaves and Fulp must have accelerated the launch of the method, which so far has been significantly more successful offshore than onshore. <sup>2</sup></p> <p>After some early experiments in the 1980s, two simultaneous-acquisition techniques were introduced almost at the same time. Rozemond (1996) presents the slip-sweep technique, and Sallas et al. (1998) introduce the HFVS method (which they patented). <sup>2</sup></p>"},{"location":"geoscience/seismic/seismic_industry_history/#2000s-from-isotropy-to-anisotropy","title":"2000s - From isotropy to anisotropy","text":"<p>Just as we may characterize oil and gas reservoirs seismically, we may also seismically monitor them. Given a set of time-lapse 3-D seismic survey data, which constitutes the basis of the 4-D seismic method, we can track flow paths and fluid distribution in the reservoirs throughout their lifetime. And finally, we have to acknowledge that the earth is anisotropic. By accounting for anisotropy, we can map fractures and increase the accuracy of velocity esitmation and imaging techniques. Accompanying all of these new frontiers for the seismic industry is the availability of a dazzling 3-D visualization technology that now enables us to perform volume-based processing and inversion and interpretation. Keep the following principle in mind when analyzing large volumes of data: before you get more data, get the most out of your data. (Yilmaz 2001<sup>1</sup>)</p> <p>Among the latest technological advances, one of the most important is the almost universal use of the Global Positioning System (GPS) for positioning seismic sources and receivers with accuracy that is often far better than strictly necessary. In addition, after seven decades of domination by electromagnetic geophone technology, another advance is the introduction of new sensors using either microelectromechanical or fiber-optic technology. Regarding equipment, it is worth noting the development of cableless systems (introduced in the early 1980s) onshore and of quieter cables and partially steered cables offshore. Concerning those methods, the quest for lower frequencies is more intense than ever, both onshore and offshore. Another offshore acquisition technique, already successful, is the use of various methods to acquire marine data with raypaths in more than one direction. <sup>2</sup></p>"},{"location":"geoscience/seismic/seismic_industry_history/#big-names-in-seimsic","title":"Big names in seimsic","text":"<ul> <li> <p>Willebrord Snellius 1580\u20131626</p> </li> <li> <p>Christiaan Huygens 1629-1695</p> </li> <li> <p>Robert Hooke 1635-1702</p> </li> <li> <p>Joseph Fourier 1768-1830</p> </li> <li> <p>Augustin-Jean Fresnel 1788-1827</p> </li> <li> <p>Gustav Kirchhoff 1824-1887</p> </li> <li> <p>Karl Bernhard Zoeppritz 1881-1908</p> </li> <li> <p>Harry Nyquist 1889-1976</p> </li> <li> <p>Norman H. Ricker 1896-1980</p> </li> <li> <p>Carl Hewitt Dix 1905-1984</p> </li> <li> <p>Claude Elwood Shannon 1916-2001</p> </li> </ul> <ol> <li> <p>Oz Yilmaz. Seismic data analysis, pages 2065. Volume 1. Society of Exploration Geophysicists, 01 2001. doi:10.1190/1.9781560801580.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Julien Meunier. Seismic Acquisition from Yesterday to Tomorrow. Society of Exploration Geophysicists, 2011. URL: https://library.seg.org/doi/book/10.1190/1.9781560802853, doi:10.1190/1.9781560802853.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"geoscience/seismic/tomography/","title":"Tomography","text":""},{"location":"geoscience/seismic/tomography/#traveltime-tomography","title":"Traveltime Tomography","text":"<p>The main ray tracing methods of seismic travel-time tomography include:</p> <ul> <li>Two point ray tracing</li> <li>Shortest path ray tracing</li> <li>Finite difference method</li> <li>Travel-time interpolation</li> <li>Wavefront construction</li> </ul>"},{"location":"mathematics/fourrier_transform/","title":"Fourrier Transform","text":"<p>The Fourier Transform is a mathematical tool that transforms a signal from its original domain (often time or space) into the frequency domain. It breaks down signals into their constituent sinusoidal components (sines and cosines) to analyze their frequency content.</p> <p>Resources</p> <ul> <li>Youtube 3BlueOneBrown</li> <li>Wolfram MathWorld</li> </ul>"},{"location":"mathematics/fourrier_transform/#continuous-fourier-transform-cft","title":"Continuous Fourier Transform (CFT)","text":""},{"location":"mathematics/fourrier_transform/#definition","title":"Definition","text":"<p>The Continuous Fourier Transform (CFT) is defined for continuous signals \\( x(t) \\) as:</p> \\[ X(f) = \\int_{-\\infty}^\\infty x(t) e^{-j 2 \\pi f t} \\, dt \\] <ul> <li>\\( X(f) \\): Frequency domain representation of \\( x(t) \\)</li> <li>\\( f \\): Frequency (in Hz)</li> <li>\\( t \\): Time</li> <li>\\( e^{-j 2 \\pi f t} \\): Complex exponential (sinusoidal basis function)</li> </ul>"},{"location":"mathematics/fourrier_transform/#inverse-transform","title":"Inverse Transform","text":"\\[ x(t) = \\int_{-\\infty}^\\infty X(f) e^{j 2 \\pi f t} \\, df \\]"},{"location":"mathematics/fourrier_transform/#discrete-fourier-transform-dft","title":"Discrete Fourier Transform (DFT)","text":""},{"location":"mathematics/fourrier_transform/#definition_1","title":"Definition","text":"<p>The Discrete Fourier Transform (DFT) applies to discrete signals (sequences) \\( x[n] \\) of finite length \\( N \\). It is defined as:</p> \\[ X[k] = \\sum_{n=0}^{N-1} x[n] e^{-j \\frac{2 \\pi}{N} k n} \\] <ul> <li>\\( X[k] \\): Frequency domain representation of \\( x[n] \\)</li> <li>\\( k \\): Frequency index</li> <li>\\( N \\): Number of samples in the sequence</li> </ul>"},{"location":"mathematics/fourrier_transform/#inverse-transform_1","title":"Inverse Transform","text":"\\[ x[n] = \\frac{1}{N} \\sum_{k=0}^{N-1} X[k] e^{j \\frac{2 \\pi}{N} k n} \\]"},{"location":"mathematics/fourrier_transform/#key-differences-between-cft-and-dft","title":"Key Differences Between CFT and DFT","text":"Aspect Continuous Fourier Transform (CFT) Discrete Fourier Transform (DFT) Signal type Continuous signals \\( x(t) \\) Discrete signals \\( x[n] \\) Domain Continuous in time and frequency Discrete in time and frequency Mathematical tool Integral Summation Applications Idealized, theoretical analysis Practical, real-world computations (via FFT)"},{"location":"mathematics/fourrier_transform/#usual-fourrier-transforms","title":"Usual Fourrier Transforms","text":""},{"location":"mathematics/sampling_theory/","title":"The Sampling Theory","text":"<p>The sampling theory describes how continuous signals can be sampled and reconstructed accurately from their discrete samples, provided certain conditions are met.</p>"},{"location":"mathematics/sampling_theory/#key-concepts","title":"Key Concepts","text":""},{"location":"mathematics/sampling_theory/#sampling","title":"Sampling","text":"<p>Sampling involves measuring a continuous-time signal \\( x(t) \\) at discrete intervals, resulting in </p> \\[ x[n] = x(nT_s) \\] <p>where:</p> <ul> <li>\\( T_s \\): Sampling period or sampling interval.</li> <li>\\( f_s = \\frac{1}{T_s} \\): Sampling frequency (samples per second).</li> </ul>"},{"location":"mathematics/sampling_theory/#nyquist-shannon-sampling-theorem","title":"Nyquist-Shannon Sampling Theorem","text":"<p>A continuous signal can be perfectly reconstructed from its samples if the sampling frequency \\( f_s \\) is greater than twice the highest frequency component \\( f_{\\text{max}} \\) of the signal:</p> \\[ f_s &gt; 2 f_{\\text{max}} \\]"},{"location":"mathematics/sampling_theory/#nyquist-frequency","title":"Nyquist frequency","text":"<p>\\( f_{\\text{Nyquist}} = \\frac{f_s}{2} \\), the maximum frequency that can be accurately represented with a given sampling rate.</p>"},{"location":"mathematics/sampling_theory/#aliasing","title":"Aliasing","text":"<p>If \\( f_s \\leq 2 f_{\\text{max}} \\), higher frequency components appear as lower-frequency artifacts in the sampled signal, distorting the reconstructed signal. This phenomenon is called aliasing.</p>"},{"location":"mathematics/sampling_theory/#reconstruction","title":"Reconstruction","text":"<ul> <li>If \\( f_s &gt; 2 f_{\\text{max}} \\), the original signal \\( x(t) \\) can be reconstructed perfectly using an ideal low-pass filter with a cutoff frequency equal to \\( f_{\\text{Nyquist}} \\).</li> </ul>"},{"location":"mathematics/sampling_theory/#key-relationships","title":"Key Relationships","text":"<ol> <li> <p>Sampling Frequency \\( f_s \\):</p> <ul> <li>Determines how often the signal is sampled.</li> <li>A higher \\( f_s \\) allows for capturing higher frequencies and more detail.</li> </ul> </li> <li> <p>Reconstructed Signal Frequency:</p> <ul> <li>After reconstruction, frequencies up to \\( f_{\\text{Nyquist}} \\) are preserved accurately.</li> <li>Frequencies above \\( f_{\\text{Nyquist}} \\) are aliased.</li> </ul> </li> </ol>"},{"location":"mathematics/sampling_theory/#example","title":"Example","text":""},{"location":"mathematics/sampling_theory/#using-calculus","title":"Using calculus","text":"<ul> <li> <p>Consider a signal with a maximum frequency \\( f_{\\text{max}} = 1 \\, \\text{kHz} \\):</p> </li> <li> <p>Minimum Sampling Rate: \\( f_s &gt; 2 \\times 1 \\, \\text{kHz} = 2 \\, \\text{kHz} \\).</p> </li> <li>If sampled at \\( 4 \\, \\text{kHz} \\), the signal can be perfectly reconstructed.</li> <li>If sampled at \\( 1.5 \\, \\text{kHz} \\), aliasing occurs, and the original signal cannot be accurately reconstructed.</li> </ul>"},{"location":"mathematics/sampling_theory/#using-an-image","title":"Using an image","text":""},{"location":"mathematics/sampling_theory/#practical-considerations","title":"Practical Considerations","text":"<ol> <li> <p>Anti-Aliasing Filter</p> <ul> <li>Used before sampling to remove frequencies above \\( f_{\\text{Nyquist}} \\), preventing aliasing.</li> </ul> </li> <li> <p>Oversampling</p> <ul> <li>Sampling at a rate significantly higher than \\( 2 f_{\\text{max}} \\) can improve practical reconstruction by reducing noise sensitivity.</li> </ul> </li> </ol>"},{"location":"physics/huygens_principle/","title":"Huygens' Principle","text":"<p>Concept</p> <p>Every point on a wavefront can be considered a secondary source of spherical wavelets. These secondary wavelets spread outward, and the new wavefront is formed by the constructive interference of these wavelets.</p> <p>Resources</p>"},{"location":"physics/huygens_principle/#-wikipedia","title":"- Wikipedia","text":""},{"location":"physics/huygens_principle/#images","title":"Images","text":""},{"location":"physics/huygens_principle/#core-principle-applied-to-plane-and-spherical-waves","title":"Core principle applied to plane and spherical waves","text":""},{"location":"physics/huygens_principle/#diffraction-explained","title":"Diffraction explained","text":""},{"location":"physics/huygens_principle/#transmission-at-interface-explained","title":"Transmission at interface explained","text":""},{"location":"physics/wave_propagation/","title":"Wave propagation","text":""},{"location":"physics/wave_propagation/#seismic-wave-propagation","title":"Seismic wave propagation","text":"<p>In 3D isotropic seismic wave propagation, the equations governing P-waves (compressional waves) and S-waves (shear waves) are derived from the wave equation for elastic media. These equations describe how seismic displacements propagate through an isotropic, homogeneous elastic medium.</p>"},{"location":"physics/wave_propagation/#general-wave-equation-for-elastic-waves","title":"General Wave Equation for Elastic Waves","text":"<p>The displacement vector \\(\\mathbf{u}(\\mathbf{r}, t)\\) satisfies:</p> \\[ \\rho \\frac{\\partial^2 \\mathbf{u}}{\\partial t^2} = (\\lambda + 2\\mu) \\nabla (\\nabla \\cdot \\mathbf{u}) - \\mu \\nabla \\times (\\nabla \\times \\mathbf{u}), \\] <p>where:</p> <ul> <li>\\(\\rho\\): density of the medium,  </li> <li>\\(\\lambda, \\mu\\): Lam\u00e9 parameters,  </li> <li>\\(\\mathbf{u}(\\mathbf{r}, t)\\): displacement vector,  </li> <li>\\(t\\): time,  </li> <li>\\(\\nabla\\): spatial gradient operator.  </li> </ul>"},{"location":"physics/wave_propagation/#p-wave-and-s-wave-components","title":"P-Wave and S-Wave Components","text":"<p>This general wave equation can be decomposed into P-wave and S-wave components:</p>"},{"location":"physics/wave_propagation/#p-wave-equation-compressional-wave","title":"P-Wave Equation (Compressional Wave)","text":"<p>P-waves correspond to the irrotational part of the displacement field, governed by:</p> \\[ \\nabla^2 \\phi - \\frac{1}{\\alpha^2} \\frac{\\partial^2 \\phi}{\\partial t^2} = 0, \\] <p>where:</p> <ul> <li>\\(\\phi(\\mathbf{r}, t)\\) is the scalar potential such that \\(\\mathbf{u}_P = \\nabla \\phi\\),</li> <li>\\(\\alpha = \\sqrt{\\frac{\\lambda + 2\\mu}{\\rho}}\\) is the P-wave velocity.</li> </ul>"},{"location":"physics/wave_propagation/#s-wave-equation-shear-wave","title":"S-Wave Equation (Shear Wave)","text":"<p>S-waves correspond to the solenoidal (divergence-free) part of the displacement field, governed by:</p> \\[ \\nabla^2 \\mathbf{\\Psi} - \\frac{1}{\\beta^2} \\frac{\\partial^2 \\mathbf{\\Psi}}{\\partial t^2} = 0, \\] <p>where:</p> <ul> <li>\\(\\mathbf{\\Psi}(\\mathbf{r}, t)\\) is the vector potential such that \\(\\mathbf{u}_S = \\nabla \\times \\mathbf{\\Psi}\\),</li> <li>\\(\\beta = \\sqrt{\\frac{\\mu}{\\rho}}\\) is the S-wave velocity.</li> </ul>"},{"location":"physics/wave_propagation/#full-displacement-field","title":"Full Displacement Field","text":"<p>The total displacement field \\(\\mathbf{u}(\\mathbf{r}, t)\\) is the sum of the P-wave and S-wave contributions:</p> \\[ \\mathbf{u} = \\nabla \\phi + \\nabla \\times \\mathbf{\\Psi}. \\]"},{"location":"physics/wave_propagation/#seismic-wave-velocities","title":"Seismic Wave Velocities","text":""},{"location":"physics/wave_propagation/#p-wave-velocity-alpha","title":"P-wave velocity (\\(\\alpha\\))","text":"\\[ \\alpha = \\sqrt{\\frac{\\lambda + 2\\mu}{\\rho}} \\]"},{"location":"physics/wave_propagation/#s-wave-velocity-beta","title":"S-wave velocity (\\(\\beta\\))","text":"\\[ \\beta = \\sqrt{\\frac{\\mu}{\\rho}} \\] <p>These velocities depend on the elastic properties (\\(\\lambda, \\mu\\)) and density (\\(\\rho\\)) of the medium.</p>"},{"location":"physics/wave_propagation/#key-notes","title":"Key Notes","text":"<ul> <li>Isotropy: Assumes uniform properties in all directions.</li> <li>Homogeneity: Assumes constant \\(\\lambda, \\mu, \\rho\\) in the medium.</li> <li>For layered or anisotropic media, additional terms or adjustments are required.</li> </ul>"},{"location":"physics/wave_propagation/#demonstration","title":"Demonstration","text":"<p>The demonstration is done for elastic isotropic and homogeneous media.</p>"},{"location":"physics/wave_propagation/#starting-with-newtons-second-law","title":"Starting with Newton's Second Law","text":"<p>In its most basic form, Newton's law states:</p> \\[ F = ma \\] <p>where:</p> <ul> <li>\\(F\\) is the force in \\(N/m\\) or in \\(kg.m.s^{-1}\\)</li> <li>\\(m\\) is the mass subject to acceleration in \\(kg\\)</li> <li>\\(a\\) is the acceleration of the mass in \\(m.s^{-1}\\)</li> </ul> <p>In other words, the force per unit volume is linked to the density of the material:</p> \\[ \\frac{F}{V} = \\frac{m}{V}.a = \\rho a \\] <p>For a continuous medium, this translates to:</p> \\[ \\text{force per unit volume} = \\text{mass per unit volume} * \\text{acceleration} \\] <p>The equation for is:</p> \\[ F_{total} = \\rho \\frac{\\partial^2 u}{\\partial t^2} \\] <p>where:</p> <ul> <li>\\(\\rho\\) is the mass per unit volume or material density in \\(kg/m^3\\)</li> <li>\\(u\\) is the displacement vector, describing motion of particles in the medium in \\(m\\)</li> <li>\\(\\frac{\\partial^2 u}{\\partial t^2}\\) is the particle acceleration (second derivative of the position with respect to time)</li> </ul>"},{"location":"physics/wave_propagation/#recovering-the-momentum-equation","title":"Recovering the momentum equation","text":"<p>In a continuous elastic medium, there are two main sources of force acting on a small element of material:</p> <ol> <li>Body forces (\\(F\\)): external forces like gravity or a seismic source acting throughout the volume of the material.</li> <li>Stress gradient (\\(\\nabla.\\tau\\)): internal forces due to the stress variations within the material. Stress represents how forces are distributed inside the medium and is described by a tensor \\(\\tau\\). The gradient of the stress tensor \\(\\nabla.\\tau\\) gives the net force acting on the element due to stress imbalances.</li> </ol> <p>Therefore, summing these forces give:</p> \\[ F_{total} = \\nabla.\\tau+F \\] <p>This equation is the momentum equation, and is the foundation for deriving seismic wave equations. It says that the motion of a material element is driven by internal stress variations and external body forces.</p> <p>If internal forces are negligible, then \\(F\\) vanishes and the simplified equations is:</p> \\[ F_{total} = \\nabla.\\tau \\]"},{"location":"physics/wave_propagation/#using-the-stress-strain-equation","title":"Using the stress-strain equation","text":"<p>To solve for the displacement \\(u\\), we need to relate the stress tensor \\(\\tau\\) to the dusplacement field \\(u\\). This is done using Hooke's law for a linear, elastic and isotropic material.</p> \\[ \\tau_{ij} = \\lambda \\delta_{ij} (\\nabla . u) + 2 \\mu e_{ij} = \\lambda \\delta_{ij} (\\nabla . u) + \\mu (\\partial_i u_j + \\partial_j u_i) \\] <p>where:</p> <ol> <li> <p>\\(\\tau_{ij}\\): Stress Tensor</p> <ul> <li>Describes internal forces per unit area within the material.</li> <li>Subscripts \\(i\\) and \\(j\\) indicate directions:<ul> <li>\\(i\\): Direction of the force.</li> <li>\\(j\\): Orientation of the surface on which the force acts.</li> </ul> </li> </ul> </li> <li> <p>\\(\\lambda\\) and \\(\\mu\\): Lam\u00e9 Parameters</p> <ul> <li>Material-specific constants that describe how a material responds to stress.</li> <li>\\(\\lambda\\): Bulk modulus-related term, governing volume changes.</li> <li>\\(\\mu\\): Shear modulus, governing shape changes (shear deformation).</li> <li>Together, they define the elastic properties of the medium.</li> </ul> </li> <li> <p>\\(\\delta_{ij}\\): Kronecker Delta</p> <ul> <li>A mathematical tool that equals:</li> </ul> \\[ \\delta_{ij} = \\begin{cases} 1, &amp; \\text{if } i = j \\ (\\text{diagonal terms, e.g., \\(\\tau_{xx}\\)}), \\\\ 0, &amp; \\text{if } i \\neq j \\ (\\text{off-diagonal terms, e.g., \\(\\tau_{xy}\\)}). \\end{cases} \\] </li> <li> <p>\\(e_{ij}\\): Strain Tensor</p> <ul> <li>Describes deformation of the material:</li> <li>\\(e_{ij} = \\frac{1}{2} \\left( \\partial_i u_j + \\partial_j u_i \\right)\\),</li> <li>Symmetric with respect to \\(i\\) and \\(j\\),</li> <li>Represents how displacement gradients (\\(\\partial_i u_j\\)) cause material deformation.</li> </ul> </li> <li> <p>\\(e_{kk}\\): Volumetric Strain</p> <ul> <li>Sum of the diagonal components of the strain tensor (\\(e_{xx} + e_{yy} + e_{zz}\\)):</li> </ul> \\[ e_{kk} = \\nabla \\cdot \\mathbf{u}. \\] <ul> <li>Represents changes in the material's volume (compression or dilation).</li> </ul> </li> </ol> <p>\\(\\lambda \\delta_{ij} e_{kk}\\):</p> <ul> <li>Describes the isotropic part of stress (uniform compression or dilation).</li> <li>Depends on the volumetric strain \\(e_{kk}\\).</li> <li>Acts only on the diagonal components of \\(\\tau_{ij}\\) (normal stresses).</li> </ul> <p>\\(2\\mu e_{ij}\\):</p> <ul> <li>Describes the deviatoric part of stress (shape-changing or shearing deformation).</li> <li>Depends on the strain tensor \\(e_{ij}\\).</li> <li>Acts on both diagonal and off-diagonal components of \\(\\tau_{ij}\\).</li> </ul>"},{"location":"physics/wave_propagation/#to-the-wave-equation","title":"To the wave equation","text":"<p>By substituting this stress-strain relationship into the simplified momentum equation, we can derive the equations governing the propagation of seismic waves, ultimately leading to the separation of P-waves and S-waves.</p> \\[ \\rho \\frac{\\partial^2 u}{\\partial t^2} = \\nabla \\cdot \\left( \\lambda \\delta_{ij} (\\nabla.u) + \\mu(\\nabla u + (\\nabla u)^T) \\right) \\] <p>If the material is homogeneous (elasticity parameters does not depend on space) \\(\\lambda\\), \\(\\mu\\) and \\(\\rho\\) are constants:</p> \\[ \\rho \\frac{\\partial^2 u}{\\partial t^2} = \\lambda \\delta_{ij} \\nabla \\cdot (\\nabla \\cdot u) + \\mu \\nabla \\cdot (\\nabla \\cdot u) + \\mu \\nabla \\cdot (\\nabla u)^T \\] <p>Simplifications using the vector identity \\(\\nabla \\times (\\nabla \\times u) = \\nabla \\cdot (\\nabla \\cdot u) - \\nabla^2 u\\) can be done. Also \\(\\nabla^2 u = \\nabla \\cdot (\\nabla u)^T\\).</p> \\[ \\rho \\frac{\\partial^2 u}{\\partial t^2} = \\lambda \\delta_{ij} \\nabla \\cdot (\\nabla \\cdot u) + \\mu \\nabla \\cdot (\\nabla \\cdot u) + \\mu (\\nabla \\cdot (\\nabla \\cdot u) - \\nabla \\times (\\nabla \\times u)) \\] <p>Developing:</p> \\[ \\rho \\frac{\\partial^2 u}{\\partial t^2} = \\lambda \\delta_{ij} \\nabla \\cdot (\\nabla \\cdot u) + \\mu \\nabla \\cdot (\\nabla \\cdot u) + \\mu \\nabla \\cdot (\\nabla \\cdot u) - \\mu \\nabla \\times (\\nabla \\times u) \\] <p>And grouping terms in \\(\\nabla \\cdot (\\nabla \\cdot u)\\), we get:</p> \\[ \\rho \\frac{\\partial^2 u}{\\partial t^2} = (\\lambda + 2 \\mu) \\nabla \\cdot (\\nabla \\cdot u)  - \\mu \\nabla \\times (\\nabla \\times u) \\]"},{"location":"physics/wave_propagation/#decomposition-in-p-waves","title":"Decomposition in P-waves","text":"<p>Taking the divergence (\\(\\nabla \\cdot\\)) of the wave equation gives the equation for P-waves:</p> \\[ \\nabla \\cdot \\left( \\rho \\frac{\\partial^2 u}{\\partial t^2} \\right) = \\nabla \\cdot \\left[ (\\lambda + 2 \\mu) \\nabla \\cdot (\\nabla \\cdot u)  - \\mu \\nabla \\times (\\nabla \\times u) \\right] \\] <p>Since the divergence of a curl is always zero:</p> \\[ \\nabla \\cdot \\left( \\rho \\frac{\\partial^2 u}{\\partial t^2} \\right) = \\nabla \\cdot \\left[ (\\lambda + 2 \\mu) \\nabla \\cdot (\\nabla \\cdot u) \\right] \\] <p>And that the material is homogeneous:</p> \\[ \\rho \\frac{\\partial^2 (\\nabla \\cdot u)}{\\partial t^2} = (\\lambda + 2 \\mu) \\nabla \\cdot \\nabla \\cdot (\\nabla \\cdot u) \\] <p>Lets detail a bit.</p> <p>The Laplacian, \\(\\nabla^2\\), is the natural result of applying divergence twice on a scalar field because of symmetry in second-order partial derivatives (Clairaut's theorem):</p> \\[ \\nabla \\cdot \\nabla \\cdot (\\nabla \\cdot u) = \\nabla^2 (\\nabla \\cdot u) \\] <p>Simplifying to (homogeneous medium, \\(\\rho\\) is constant):</p> \\[ \\rho \\frac{\\partial^2 (\\nabla \\cdot u)}{\\partial t^2} = (\\lambda + 2 \\mu) \\nabla^2 (\\nabla \\cdot u) \\] <p>Define \\(\\phi = \\nabla \\cdot u\\). \\(\\phi\\) is a scalar field or scalar potential representing compressional component of the wave.</p> \\[ \\rho \\frac{\\partial^2 \\phi}{\\partial t^2} = (\\lambda + 2 \\mu) \\nabla^2 \\phi \\] <p>Or:</p> \\[ \\frac{\\partial^2 \\phi}{\\partial t^2} = \\frac{\\lambda + 2 \\mu}{\\rho} \\nabla^2 \\phi \\] <p>Using \\(\\frac{\\lambda + 2 \\mu}{\\rho} = \\alpha^2 = V_p^2\\) (P-wave velocity) we get the common notation:</p> \\[ \\frac{\\partial^2 \\phi}{\\partial t^2} = \\alpha^2 \\nabla^2 \\phi \\]"},{"location":"physics/wave_propagation/#decomposition-in-s-waves","title":"Decomposition in S-waves","text":"<p>Taking the curl (\\(\\nabla \\times\\)) of the wave equation gives the equation for S-waves:</p> \\[ \\nabla \\times \\left( \\rho \\frac{\\partial^2 u}{\\partial t^2} \\right) = \\nabla \\times \\left[ (\\lambda + 2 \\mu) \\nabla (\\nabla \\cdot u)  - \\mu \\nabla \\times (\\nabla \\times u) \\right] \\] <p>The curl of a gradient is always zero:</p> \\[ \\nabla \\times \\left( \\rho \\frac{\\partial^2 u}{\\partial t^2} \\right) = \\nabla \\times \\left[ - \\mu \\nabla \\times (\\nabla \\times u) \\right] \\] <p>Lets detail a bit.</p> <p>Simplifying to (homogeneous medium, \\(\\rho\\) and \\(\\mu\\) do not depend on space coordinates):</p> \\[ \\rho \\frac{\\partial^2 (\\nabla \\times u)}{\\partial t^2} = - \\mu \\nabla \\times \\nabla \\times (\\nabla \\times u) \\] <p>But we have the vector identity \\(\\nabla \\times (\\nabla \\times u) = \\nabla (\\nabla \\cdot u) - \\nabla^2 u\\).</p> <p>Taking the curl of this vector identity gives: \\(\\nabla \\times \\nabla \\times (\\nabla \\times u) = \\nabla \\times \\nabla (\\nabla \\cdot u) - \\nabla \\times \\nabla^2 u\\).</p> <p>Lets break down this expression and simplify it:</p> <ol> <li>The curl of a gradient is always zero: \\(\\nabla \\times \\nabla (\\nabla \\cdot u) = 0\\)</li> <li>Taking the curl of the Laplacian is equivalent to taking the Laplacian of the curl: \\(\\nabla \\times \\nabla^2 u = \\nabla^2 (\\nabla \\times u)\\)</li> </ol> <p>In the end: \\(\\nabla \\times \\nabla \\times (\\nabla \\times u) = \\nabla^2 (\\nabla \\times u)\\).</p> \\[ \\rho \\frac{\\partial^2 (\\nabla \\times u)}{\\partial t^2} = \\mu \\nabla^2 (\\nabla \\times u) \\] <p>Define \\(\\Psi = \\nabla \\times u\\). \\(\\Psi\\) is a vector field or vector potential representing the shear component of the wave.</p> \\[ \\rho \\frac{\\partial^2 \\Psi}{\\partial t^2} = \\mu \\nabla^2 \\Psi \\] <p>Using \\(\\frac{\\mu}{\\rho} = \\beta^2 = V_s^2\\) (S-wave velocity) we get the common notation:</p> \\[ \\frac{\\partial^2 \\Psi}{\\partial t^2} = \\beta^2 \\nabla^2 \\Psi \\]"}]}